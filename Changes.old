***********************************************************************
PLPLOT 4.0
----------

Here are the biggest changes that have been made to PLPLOT, especially
those likely to affect the user.  Please see the PLPLOT docs for more
information. 

Some of the changes stem from the direction we want to take PLPLOT.  For
example, away from device dependence and use the metafile driver as our
main target.  This probably means offloading more intelligence into the
drivers in the future. 

Also, some very small files have been consolidated in order to speed
compilation and keep related routines together.

***********************************************************************
Changes from the 3.x strain by M. LeBrun

This version came originally from PLPLOT 2.6b.  In accomodating
the changes made in 3.0 (Tony's version), I had to break a few calls.
Namely, the following routines now have a different call syntax:

	plsxax plsyax plszax
	plgxax plgyax plgzax
	plmesh
	plot3d

Please see the documentation for the proper calls.  

You can now specify the argument types to PLPLOT calls in the more
generic fashion INT and FLOAT.

There have also been some new functions added and improvements made to
plrender. 

***********************************************************************
Major changes from PLPLOT 3.0.

------------------------------------------------------------------------
The PLPLOT <-> driver interface completely rewritten.  Now a pointer
to a data structure containing all the PLPLOT "state" information for
a given data stream is passed into the driver.

Several new capabilities were added to the drivers.  This includes:

	aspect ratio scaling (see below)
	family files
	escape function
	multiple output streams

New drivers include:
	X-window
	metafile

Utilities:
	plrender	renders metafiles
	pltek		displays tektronix files

plrender has lots of options (see the docs).  In particular, the
family file output, margins, justification, and orientation flags
are fun to play with.
------------------------------------------------------------------------
A multiple output stream capability has been added.  The default
stream number is 0.  To start a new stream, call plsstrm(#) with #
set to stream number, then call plstar or plstart.  After that,
you can use this routine to switch between streams (simultaneous
plotting is not done).

------------------------------------------------------------------------
The character, sym, and tick mark lengths are no longer specified in
terms of the actual physical page dimensions by default, rather, a
virtual page size of 238 x 180 mm is used (not actual mm).  This is
to ensure the ratio of sym size and box length is independent of output
device.  For the old method of scaling, you can change back with
the call plspsc(1). (set physical scaling)

------------------------------------------------------------------------
There is a new function for specifying viewport with a given aspect
ratio -- plvpas().  This is sort of a combination of plvasp() and
plvpor(), in that you specify the corners (like plvpor) and the aspect
ratio.  The biggest box that fits within your specified box with the
given aspect ratio will be used.  Makes plvasp() and plvpor() (and plsvpa
to some extent) virtually obsolete.

------------------------------------------------------------------------
I implemented a function plsasp(aspect) to do global aspect ratio
scaling.  This never quite worked out the way I planned, and now I
recommend using plvpas instead.  I may still make plsasp() useful
in the future.

------------------------------------------------------------------------
Put in an 'escape' function in all the drivers.  I really just wanted to
add a new function to set the colors on the basis of rgb inputs.  But I
realized I'd be wanting to add support for raster operations in the future
to both the X and Amiga drivers, but no other ones.  Since it's a pain
adding a new function (even if a stub) to all the drivers and dispatch.c,
etc, I figured the escape function would be good.  You pass in the op-code
and a pointer to whatever data you want passed.

------------------------------------------------------------------------
The plcwin() and plgwin() calls are no longer supported.  Use pltext()
and plgra() instead.

------------------------------------------------------------------------
The pleop() and plbop() calls are no longer supported.  Use plclr()
and plpage() instead.

------------------------------------------------------------------------
plorient() and plselect() are no longer supported.  Use plsori(),
plsfnam(), plsfile() instead.

------------------------------------------------------------------------
Some new functions to set color, plrgb() and plhls().  The latter converts
color in hls values to rgb.  plrgb calls the gresc() function mentioned
above, and plhls() calls plrgb().  Also you can allocate a named color
(only works with X interface right now) with the plancol() routine.

------------------------------------------------------------------------
Put in family file support.  There is an option now to create a family of
files with each roughly of a given size.  Also each file is a complete
stand alone, and plrender can read a whole family like it is a single
logical file, and create a single output file or family output file. 

There are two new routines, plsfam() and plgfam(), for setting/getting
the parameters governing creation of family file sets.

Also changes were required to all drivers that support familying.  As far
as plplot is concerned, it's still just a single logical file.  The only
drivers I've put the familying into are the ps, tekf, and plmeta drivers.

------------------------------------------------------------------------
The ANSI/non-ANSI behavior of PLPLOT has changed again.  Now you need
to include plplot.h into your program to make sure you get the argument
types right (i.e. for ANSI compiler, a FLOAT really passes as a FLOAT
not a double).  Face it, we've had an ANSI standard for C for about 4
years now and ISO for 2, and vendors who don't comply should be boycotted.

All PLPLOT routines that accept a FLOAT as an argument now use an ANSI
style function declaration if PLSTDC is defined, to bypass the K&R style
promotion.  Eventually support for non-Standard C compilers will be
dropped. 

The analogous problem with ints is discussed in the GNU CC manual, under
'Known Causes of Trouble with GNU CC':

*** begin quote ***

Users often think it is a bug when GNU CC reports an error for code like this: 

    int foo (short);

    int foo (x)
    short x;
    (...)

The error message is correct; this code really is erroneous, because the
old-style non-prototype definition passes subword integers in their
promoted types.  In other words, the argument is really an int, not a
short.  The correct prototype is this:

    int foo (int);

*** end quote ***

------------------------------------------------------------------------
Some other magic being done in plplot.h includes redefinition of the
C-entry bindings (the installer can disable this but I don't recommend it). 
The point is that the C and Fortran namespaces on some systems clobber
each other, and there is no good solution except to change the C entry
names.  Each external call is prepended with a 'c_'.  So you must include
plplot.h and recompile any old programs that are to work with PLPLOT 4.0.

------------------------------------------------------------------------
Put in an alternate startup routine plstart(), that lets you specify device
name.  This makes the old plbeg() call obsolete.  See the pl_DevName entry
in the dispatch table (the second entry) for valid device names. 

------------------------------------------------------------------------
plfont.c:

Made font locating code to be much more intelligent, with 3 hardwired
locations, current directory, and $(HOME)/lib checked.  Locations
can be passed in from the makefile.

------------------------------------------------------------------------
plconf.c:

New, based on plcont.c and plcntr.c, for better Fortran interface.  Passes
grid arrays instead of function pointer for calculation of coordinate
transformation.  Also error handling changed. 

Also added fortran stub routines for the three new contour plotters: 

	plcon0 - simple contour plot, no transformation
	plcon1 - 1-d transformation, i.e. x(i), y(j).
	plcon2 - 2-d transformation, i.e. x(i,j), y(i,j)

as well as stub routines for plconf(), and three functions to handle
coordinate transformation (none, 1-d, 2-d).  Transformation functions
detect out-of-bounds coordinates and react intelligently (giving nearest
point and issuing a warning). 

------------------------------------------------------------------------
plccal.c:

  Improved interpolation algorithm to get rid of occasional contour crossing
  (especially for noisy data). 

------------------------------------------------------------------------
strtoint.f:

Changed string interface to be portable.  Each string is now a *char but
stored from fortran packed in an INTEGER*32.  The fortran stub packs the
string via 'strtoint', and the C routine unpacks via 'long_to_str'.

------------------------------------------------------------------------
System-independent makefile written in m4 for unix-like systems.  Compile
with m4 for desired system, e.g.

	m4 -DSUNOS makefile.m4 >makefile

Simplifies debugging & testing by creating symlinks between plplot/tmp and
all source & example files. 

------------------------------------------------------------------------
Reorganized directory structure.  New directories include:

docs/         examples/     fonts/        include/      lib/
src/          sys/          tmp/          utils/

Under src/, all source + directories stubc/ and stubf/.
Under sys/, amiga/  ctss/   dos/    os2/    unix/   vms/.
Under examples/, C/ and f77/.

So this way new systems can be supported without changing the top level dir
structure. 

