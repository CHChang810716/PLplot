PLPLOT FAQ (Frequently Asked Questions)
---------------------------------------

This note contains answers to some Frequently Asked Questions (FAQ)
regarding plplot.  There is no particular order of topics at present.

Disclaimer:

The questions & answers that follow typically have been posed (and
answered) to (by) me in email, and seem to me to be worthy of inclusion in
a FAQ.  They may be out of date with respect to the current revision, or
be otherwise suspect (misleading, incomplete, etc.).  Personal opinions
may be contained within: this document is not to be considered the
official opinion of the IFS or University of Texas or any other funding
agency supporting this work.  Feel free to send comments or corrections to
me (Maurice LeBrun) at mjl@dino.ph.utexas.edu.

Since I like the conventions of the CVS FAQ, I will adopt them here.  Each
question in the table of contents will be given a change marker in the
first column: 

	'-'	for a Question that has changed.
	'='	for an Answer that has changed.
	'#'	for an entry with changes to both Question and Answer.
	'+'	for a newly added Question and Answer.

I will feel free to not mark trivial changes (misspellings, grammar, etc).

Note: this is the first release of this FAQ, so I omit all change markers.

==============================================================================
Contents
--------

 1. Installing plplot
 2. General features
 3. X-based drivers (includes Tcl/TK, Tcl-DP)
 4. All other drivers & supported platforms

==============================================================================
Section 1: Installing plplot

 1.1 How do I build & install plplot?
 1.2 Why should I use plplot?
 1.3 I don't have an ANSI compiliant C compiler.  How do I compile plplot?
 1.4 I don't have a fortran compiler; how do I compile plplot?
 1.5 The linker complains of unresolved functions atexit(), fsetpos(),
     fgetpos(), and so on.
 1.6 The compiler complains about the use of "malloc" or "size_t".
 1.7 configure script doesn't run correctly
 1.8 makefile doesn't build correctly using m4.
 1.9 The linker complains that it can't resolve Tcl_AppInit. 

==============================================================================
Section 2: General features

 2.1 The manual doesn't mention capability X.
 2.2 How do I change to change the default background color?
 2.3 I'm getting core dumps when calling a contour function from C.

==============================================================================
Section 3: X-based drivers (includes Tcl/TK, Tcl-DP)

 3.1 Where do I get Tcl/TK?   
 3.2 How do I use "xauth"?
 3.3 How do I use the Tcl/TK driver?
 3.4 I've been having trouble getting the TK/TCL and plplot working on...
 3.5 I would like to issue a plot command, have the window appear,...
 3.6 The X driver seems to run slower than on older versions of plplot.
 3.7 How do I change the title on the TK window menu bar, i.e.,...

==============================================================================
Section 4: All other drivers & supported platforms

 4.1 What about support for platform X?
 4.2 What about plplot support for VMS?

==============================================================================
Section 1: Installing plplot
==============================================================================

 1.1 How do I build & install plplot?

Read the system dependent notes, in sys/<system>.  On a Unix-like system,
"configure" is NOT the GNU auto-configure script.  Instead, you must cd
to tmp and configure from there, e.g.:

% cd tmp
% ../configure
% make
% make install

will often give the desired results.  You really should check the readme
file first, though (especially before typing "make install").  You can
easily set up a site-specific build environment for PLPLOT under Unix
that will enable painless upgrades (using the config file, cf_plplot.m4).
For more info on the Unix build scripts, see m4/README.


 1.2 Why should I use plplot?

This is probably the first question I was ever asked, and it continues
to come up often enough to dwell on it a bit.

First off, my involvement with plplot came from a very simple need: a
portable, free, reasonable quality scientific graphics package.  At the
time I had a 1 year fellowship in Japan, to continue my work on numerical
simulation of plasmas.  Previous to this, I and my colleagues had
laboriously translated the simulation code graphics to use two other
libraries (one quasi-commercial and one PD), only to find both packages
lacking in some important respects (most notably the PD one) and unable to
easily (or cheaply) obtain the commercial one where I was working in
Japan.  This was an extremely frustrating situation, which had always been
apparent to me but only then came to a head.  Scientific graphics is an
utter necessity to anyone doing numerical modeling, and I decided that
being at the mercy of vendors and computer centers on this issue was
unacceptable.  

I have no objection to commercial software, but let's face it.. sometimes
commercial solutions suck.  This is one of those times.  You don't have
access to the source code, so you can't improve it to suit your needs
better, and you certainly can't freely carry it to different machines.
Software environments on high-performance Unix systems, especially as
regards commercial software, are VERY variable from machine to machine.
Regardless of why this situation exists, I decided I could no longer
depend on commercial software to provide a basic graphics capability.  I
was somewhat familiar with plplot for the Amiga, and seeing that it was
fairly capable and portable I decided this would be the "last" graphics
package I would use and support (for a long while at least).

It turned out that plplot required some substantial investment of my time
before it satisfied all of my (then) needs, but has nonetheless performed
quite well.  In the interim I took over development for it from Tony
Richardson.  The package has become almost trivially portable -- we can
now get our codes running on a new machine in record time.  We can fix
bugs in record time, although it doesn't always happen that way :-).
Still, it takes less than a month or two for me to get around to fixing
most bugs, which is better turnaround time than you typically get from
vendors.  New features can be added with astonishing speed if the need
(ours) is great enough.

So those are some of the reasons _I_ got involved, which may differ from
those of the casual user.  Most people won't be digging into the source
code to fix bugs, but it's very reassuring to know that you can if you
need to.  I can't promise to support the package or make specific
enhancements as my responsibilities (i.e. funding) lie elsewhere.  But I
am always interested to hear what people want, since if it's a good idea I
will benefit too.  User-contributed code is always welcomed (I have had
quite a few).  And backward incompatibilities will be introduced into
the package sparingly if at all.

The features supported by plplot are necessarily fewer in number than a
big commercial package.  Plplot has a fairly complete set of basic
graphical capabilities, and a few very strong capabilities (e.g.  the
Tcl/TK X-based GUI driver or its sibling the DP driver, the latter of
which supports distributed rendering).  This has its good and bad points.
The good part is that the library is relatively small, and can be modified
without too much difficulty.  The disk space required is reasonable
(especially if shared libraries are used), and the learning curve mild.
The effort I might expend adhering to some large set of capabilities (many
of which may be only rarely used; e.g. look at the GKS standard) can be
focused instead on portability, user interface, and certain select
capabilities.

On the other hand, there are many nice capabilities missing from plplot at
present, such as support for solid 3d modeling, maps, postscript fonts,
and so on.  New features are continually being added, but the fact remains
that other more special purpose (and/or high priced) products will always
have things that plplot lacks (or do them better).  One way I see to fit
plplot in the overall software environment is to add more output drivers,
both for generic file formats (e.g. TIFF, CGM) as well as for specific
graphics packages (e.g. AVS).  That way you could produce your graphics
and view them using plplot, dumping to disk those pages or plots you want
to process using a separate package.  This can already be done using the
XFig driver, for example.  For this to be most effective, plplot should
have internal knowlege of more varied objects than "line" (currently the
fundamental unit), and I have some plans in this area.  

I'm always interested in gaining new collaborators and contributors for
plplot, so feel free to send me email (mjl@dino.ph.utexas.edu) so we can
discuss additions you'd like to make.  Want to help support plplot but
need suggestions?  I hesitate to recommend anything that will require
broad changes to the package, but any of the following would be great:

	volunteers for target platform support (I have HPUX covered)
	output drivers: TIFF, CGM, others?
	plplot demos?  (especially using Tcl/TK)
	an improved contour plotter
	any interesting ideas/code for TK widgets for use with plplot
	help rewriting the manual?  (OK, so I'm really reaching here)


 1.3 I don't have an ANSI compiliant C compiler.  How do I compile plplot?

Get an ANSI C compiler.  The cheap solution is to get gcc up if it has
been ported to your machine.  This is not unreasonable IMHO -- the C
standard was approved in 1989.  Isn't it about time you upgraded?


 1.4 I don't have a fortran compiler; how do I compile plplot?

The Fortran files are only part of the interface layer for Fortran codes
that use plplot.  If you don't need this capability the layer can be
omitted by defining NO_FORTRAN when building the makefile.  I.e. put
the line:

define({NO_FORTRAN})

somewhere in cf_plplot.m4 and copy this file to a directory ~/config,
so that from then on it will always be found when the configure
script is run.

Alternately, you can use 'f2c' (freeware fortran-to-C translator) to
compile the layer, assuming it (f2c) has been ported to your system.


 1.5 The linker complains of unresolved functions atexit(), fsetpos(),
     fgetpos(), and so on.

This is caused by a non-ANSI libc.  It _is_ possible to run plplot on such
a system, but at somewhat reduced functionality -- I rely on ANSI libc
functions both for seeking (fsetpos, fgetpos) and for cleanup (atexit).
If you don't have an ANSI libc handy or if it is inconvenient to use, you
can specify -DNO_ANSI_LIBC when building PLPLOT.  This will switch to the
older ftell/fseek form of seeking and disable some capabilities of the
tek/xterm drivers.  Some older versions of Sunos & acc require you to link
in the ANSI lib explicitly when using from a Fortran program, but this
appears to be fixed in SunOS 4.1.3.  People using gcc without the GNU libc
will also have this problem.  The cleanest way to change the build to use
this switch is to use the following in ~/config/cf_plplot.m4 --

EXT_FLAGS_C	= -DNO_ANSI_LIBC


 1.6 The compiler complains about the use of "malloc" or "size_t".

Once upon a time, the source code went to some lengths to make sure
these were properly prototyped/typedef'ed even on systems that weren't
completely ANSI-compliant.  Now the code assumes they are in the usual
places:

	malloc	should be declared in stdlib.h
	size_t	should be typedef'ed in stdio.h (sometimes is in stdlib.h
		also, and sometimes only in stdlib.h.  The latter is a
		violation of the standard but I look for it there too.)

So when these are needed, stdio.h and/or stdlib.h are included.  If 
this does not work on your system, there are two things to try.  First:
fix the headers.  You can leave the current definition in place as 
long as you "wrap" it, e.g.:

#  ifndef _SIZE_T
#    define _SIZE_T
     typedef unsigned int size_t;
#  endif /* _SIZE_T */

Then add an identical declaration where it is *supposed* to be.  The
second way is to hack plplot.h to explicitly prototype/typedef it.


 1.7 configure script doesn't run correctly

Look around for a different shell to run it under (posix shell, ksh).
See notes in sys/unix.


 1.8 makefile doesn't build correctly using m4.

Some m4's do not handle the -D<macro-def> switch correctly.  In this case
I suggest installing GNU m4, as it installs easily (for me) and works
great.  Otherwise you can use the following trick to generate the
makefile:

echo 'define(SYSTEM,BSD)' | cat - makefile.m4 | m4 > Makefile

Since the configure script uses the -D <macro-def> syntax, however,
the best thing to do is to find a non-braindead m4 and use that.


 1.9 The linker complains that it can't resolve Tcl_AppInit. 

The Tcl7.0/TK3.3 and later libraries contain a function called "main".
Hmmm.  Sounds dangerous, eh?

It's dangerous because it's relying on the linker to do what you expect --
pick out the correct main program when you have multiple copies.

This was done to make it easier to build custom versions of wish, so
all you had to do is to create your own version of Tcl_AppInit, link
with the library, and POOF! there is your modified wish.  Unfortunately
it sometimes sends the fortran compiler / linker into spasms, because
it gets the wrong main!  I have had exactly this problem under a 2-year
old version of SunOS (but not under a more recent one), and couldn't
get it to work despite varied link invocations.  BTW, I hear a similar
problem exists under Linux from a C++ main.

My solution on these platforms was to recompile the tcl and tk libraries
without the file including the main program (I think it was tclMain.o and
tkMain.o).  I installed the new libraries as well as the separately compiled
*Main.o's in case someone needed them.  No more problem with the Fortran
compiler.

==============================================================================
Section 2: General features

 2.1 The manual doesn't mention capability X.
 2.2 How do I change to change the default background color?
 2.3 I'm getting core dumps when calling a contour function from C.

==============================================================================

 2.1 The manual doesn't mention capability X.

The manual is waaay out of date.  Consult the last few update files to
keep tabs of what's going on.  Take a look if there are are any
substantial new capabilities in the example programs.  Sorry, I'll try to
update the manual as soon as practical (writing code is so much more
interesting..).


 2.2 How do I change to change the default background color?

Use the -bg option.  Type plrender -h.


 2.3 I'm getting core dumps when calling a contour function from C.

Aha.  Did you specify the minimum index as 1, not 0?  This is a leftover
from when the package was written in Fortran, sigh.  I'm not sure why this
isn't explained in the manual -- I just looked and there is no mention of
it.  When I first got involved I mainly learned how to use the package
from the demo programs and so didn't really notice the inconsistency.
I've added some more explanatory error messages and will improve the
document in this area.  Unfortunately it may be too late I think to change
the minimum index to 0, since by now many people are used to this way.
Maybe add some new function calls to fix up the API..

==============================================================================
Section 3: X-based drivers (includes Tcl/TK, Tcl-DP)

 3.1 Where do I get Tcl/TK?   
 3.2 How do I use "xauth"?
 3.3 How do I use the Tcl/TK driver?
 3.4 I've been having trouble getting the TK/TCL and plplot working on...
 3.5 I would like to issue a plot command, have the window appear,...
 3.6 The X driver seems to run slower than on older versions of plplot.
 3.7 The linker complains that it can't resolve Tcl_AppInit. 
 3.8 How do I change the title on the TK window menu bar, i.e.,...

==============================================================================

 3.1 Where do I get Tcl/TK?   

You can get the Tcl/TK package by anonymous ftp from sprite.berkeley.edu
in the tcl subdirectory (or from harbor.ecn.purdue.edu in directory
pub/tcl).  Also consult with the comp.lang.tcl newsgroup on Usenet.  The
most recent version at the time of this writing is Tcl 7.3 and TK 3.6, and
if you are just starting out make sure to get that.  Plplot may eventually
require these versions but for now works with earlier releases (it once
worked with Tcl 6.7, TK 3.2, but may no longer).  Note: to build, you need
to have the Tcl/TK header files where they can be found by the C compiler
(e.g. /usr/local/include, or softlinks to it will work fine).


 3.2 How do I use "xauth"?

The 7.0/3.3 and later releases of Tcl/TK require xauth security in order
to accept send requests.  The only problem is that you have to
*completely* eliminate use of the older xhost method.  So typing "xhost -"
isn't good enough -- you must also explicitly delete all the names from
the xhost access list (type just "xhost" to see them).  That should do it
for your local node.  To grant remote nodes access, just ftp your
~/.Xauthority file (server machine) to your remote home directory.  There
are some notes on setting this up in the file Xauthority in the doc
directory.


 3.3 How do I use the Tcl/TK driver?

Get it going with the example programs, and play with it.  Read the online
docs.


 3.4 I've been having trouble getting the TK/TCL and plplot working on
my Indigo running IRIX 4.0.5. I got TCL7.0 and TK3.3 as advised and built the
libraries and moved them to "/usr/lib" directory and then went about 
(re)building plplot. I then compiled the c-demos and ran them. The tk driver
would pop up a window and disappear with the following complaints...
...
>>Starting up ./plserver
>>Server command "[list $plw_init $plwindow $client]" failed:
>>         remote interpreter did not respond
>>Program aborted

I think what is happening is that plserver is dumping core for some
reason.  So why don't you get a "core dumped" message?  It has something
to do with it being created through fork/exec from the TK driver.  Never
quite knew what, but now that I am thinking about it once again I bet I
know what the deal is.  It takes a little bit of time for it to dump core,
and in that time the sending interpreter in the TK driver times out, and
aborts.  Since the application is the parent process, once it exits you
don't see any pending messages that the plserver (child) has.  In this
circumstance I'm not sure if one should always get a core file or not.

So, the key is to find out why plserver is dumping core.  There are
a few things you can do.  When you built Tcl/TK, did you run the tests?
You need to type "make test" in either the tk3.3 or tcl7.0 directory, and
it will merrily go on its way.  After you have done that, try cd'ing to
the tk3.3/tests directory and running the tests using your installed
version of wish.  Some of the tests will fail because "make test" actually
compiles a custom version of wish with some extra functionality just for
the test suite.  But most of the tests will do ok.  If not, you hosed
the installation and that would explain the observed behavior.  If not
we need to do some more hunting.  


 3.5 I would like to issue a plot command, have the window appear,
or be re-painted, and allow the user to continue with command line operation
of RLaB. I would like the user to be able to resize the window at any time
or cover/un-cover it at any time and have it re-paint itself. The way  I 
can get it to work is: the user issues plot command, window appears and is
resizable, etc... the user must use the 3rd mouse button to "release" the
window, after that control returns to the command line, but the window will
no longer resize/repaint.

This is a feature, not a bug :-).

When the plotting package is waiting for the user to advance the page, it
is actually waiting for any X event.  So events like refresh and resize
get intercepted and processed.

Also during the normal course of plotting, the X server is periodically
polled to find out if there are any events that need processing, and
handles them if so.  I don't do this on every graphics instruction because
otherwise the overhead is too large -- currently on every 20 line draws,
every 10 polyline draws, and on every other call.

But once the user signals for the page advance, and control is returned
to the user program, there is no way for the X driver to process any
events simply because the control is in your program, not in the X driver.
The single-headedness of your process becomes the culprit here.  You can
either sit in an event loop, or be doing user code specific things, but
not both.  There is one improvement that could still be made which is to
provide a plevents() call so you can explicitly force all events to
be handled, but that's just a bandaid solution so I never put it in.

The real solution is to fork off the rendering into a separate process,
and this is just what I did with the Tcl/TK driver.  So, if you select
the tk driver, your code can go about its merry way while the graphics
window can be refreshed, resized, zoomed, printed, dumped, or whatever.

It'd also be a worthwhile project to split the X driver up similarly,
and there has been some interest in doing that (but I don't plan to
work on it).


 3.6 The X driver seems to run slower than on older versions of plplot.

This may be caused by writing into the pixmap.  Each instruction is
essentially done twice -- once to the screen and once to the offscreen
pixmap.  I'm not at all happy about the tradeoff but there's not much that
can be done.  With the pixmap, you get fast refreshes but slow draws, and
the other way around without it.  What made me decide on using a pixmap as
the default is the smooth scrolling that you can get (try a zoom followed
by a scroll in the TK driver -- without writing into a pixmap the
scrolling really sucks).  One way would be to write only to the pixmap and
occasionally blit it to the screen, but that would be jerky and you'd have
to worry about incomplete pages.  Try plotting with the -nopixmap option
to see if that's any better.  I do almost all my plplot X development on
an HP 720 color console and graphics speed is usually not a problem :-).


 3.7 How do I change the title on the TK window menu bar, i.e.,

>   Plot >> plclient_#2
> 
>            ^^^^
>            I'd like this to read SuperCode

It uses the name of the main window if nothing else is set.  You can set
it two ways.  One, use plParseOpts to parse your command line, then it
will use argv[0] out of that list.  Two, just glom pls->program directly,
via: 

#include <plstream.h>

PLStream *pls;

...

    plgpls(&pls);
    pls->program = "myprogram";

Yes, by this method you have access to the complete internal state of
the current plplot stream.  So be careful what you change :-).

There is one catch, though.  The way it is set up now it must be a unique
name since it corresponds to your main window name (to which X property
messages are sent).  If there is a previous Tcl interpreter of that name
hanging around (say, as a result of some sort of abnormal exit like a core
dump) you will get the mysterious _#2 appended (and _#3, and so on; note
there is a utility called delinterp that will delete these zombie
interpreters).

==============================================================================
Section 4: All other drivers & supported platforms

 4.1 What about support for platform X?
 4.2 What about plplot support for VMS?

==============================================================================

 4.1 What about support for platform X?

We are most likely to have the package be up-to-date on the following
systems: HP-UX, Linux; less likely on the following: SunOS, AIX, Unicos,
Super-UX, Amiga, and maybe not at all on any others.  I'd love to have
volunteers to pick up the slack here.  I could get prerelease versions to
you in order to make whatever fixes are needed ahead of time.  I am
gradually moving away from supporting the Amiga driver so could use some
help here.  Geoff has abandoned the DOS drivers and is leaning away from
supporting the OS/2 driver, so here again target platform developers are
needed.


 4.2 What about plplot support for VMS?

It's true, I did support plplot under VMS at one time, although I never
DID see the X driver running on it (supposedly it did).  However after
exclusively using Unix for a while I vowed never to go back to VMS :-).
It certainly caused me lots of pain to get up, but at least I learned a
few things about portability.  Anyway, there may still be people out there
who would find it useful under VMS, so if anyone succeeds in making plplot
work and want to continue supporting it there, the job is yours for the
asking.  I certainly don't have the time or patience for it.

==============================================================================
