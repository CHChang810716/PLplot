PLplot Installation Notes: Unix-based systems
---------------------------------------------

For non Unix-based systems, refer to the notes in sys/<system name>.

PLplot building and installation is trivially easy on most Unix systems.
From the distribution directory, type:

% configure
% make
% make install

Make sure you check the "prefix" variable before typing "make install",
as this determines where the files are installed.  E.g.

% configure --prefix=$HOME/local/plplot

sets up $HOME/local/plplot as the home directory for the installed
package. 

The package is actually built in the tmp directory.  You can build any of
a number of demo programs and run them from there.  Example:

% configure
% cd tmp		(also "cd tmp; ../configure" works fine too)
% make
% make x01c
% x01c

	<program presents you with a driver list, pick one>


Additional notes
----------------

The Makefile in the distribution directory just recursively invokes "make"
on the Makefile in tmp/.  The latter has many more targets so it's better
to build and test the package from there.  I provide the top-level
Makefile only as a convenience, since most GNU packages work that way.

Targets supported by the Makefile include:

	cdemos		All the C demos
	fdemos		All the Fortran demos
	tkdemos		All the extended wish (TK) demos
	x??[cf]		Demo number ??, C or fortran versions
	xtk??		Demo number ??, extended wish versions

By default, the configure script chooses the most powerful configuration
of PLplot supported on your system, based on a search for all the include
files and libraries that PLplot can use.  If it is unable to locate a
library that /is/ available on your system, either you need to change the
location of the library, put in a soft link to a more common place,
request for the directory to be added to the search path, or set up the
directory in a site specific way (more on that below).

"configure" IS NOW generated by the GNU autoconf facility, although
it didn't used to be.  Normally you don't need to create a new configure
script, just use the one that comes with the package.  See cf/README
for notes on how to recreate it if you really need to.

There are many ways in which to influence the configure process.  It's
best to run configure once to see what options are set already.  You can
enable/disable packages (or device drivers) with a --enable-<pkg> or
--disable-<pkg> switch, and set/unset options with a --with-<option> or
--without-<option> switch.  The value of each important flag is printed
near the end of the configuration process.  Here is an example:

-----------------------------------------------------------------------------
Configuration results (edit and run ./config.status to modify):

system:         HP-UX-A.09.01
prefix:         /usr/local/plplot
CC:             c89 -c     
F77:            fort77 -c     
LDC:            c89   
LDF:            fort77   
INCS:             -I/usr/local/include   
LIBS:            -L/usr/local/lib -ldpnetwork  -ltk  -litcl  -ltcl  -lX11  -lm
LIB_TAG:        ftk
devices:         plmeta null xterm tek4010 mskermit conex vlt versaterm ps xfig ljii lj_hpgl xwin tk dp

with-shlib:     yes             with-double:    no
with-debug:     no              with-opt:       no
with-warn:      no              with-profile:   no
with-f2c:       no              with-gcc:       no

enable-xwin:    yes             enable-tcl:     yes
enable-tk:      yes             enable-dp:      yes
enable-itcl:    yes             enable-f77:     yes
-----------------------------------------------------------------------------

If you want to change to using e.g. double precision with optimization
turned on and no shared library, you could rerun configure by typing:

% configure --with-double --with-opt --without-shlib

Similarly, all device drivers can be enabled/disabled by using
--enable-<device> or --disable-<device>.  I treat the f77 interface layer
the same way since it's an "extra" capability.   Configure options
are as follows:

with-shlib	Build shared library if supported for your system
with-double	Use double precision floats
with-debug	Build with debugging on
with-opt	Build with optimization on
with-warn	Build with all warnings on
with-profile	Build with profiling turned on
with-f2c	Use f2c to compile Fortran interface
with-gcc	Use gcc as C compiler instead of default

(--without-<option> to disable)

enable-f77	Include Fortran interface
enable-<...>	Include "..." driver (if present) and all dependent code.

(--disable-<capability> to disable)

You can specify the installation directory by using the --prefix flag, e.g.:

% configure --prefix=$HOME/tools/plplot

If you want configure to remember certain settings each time it is run
for your site, you can create a file ~/config/cf_plplot.in.  If found,
this file is sourced by configure.  An example cf_plplot.in file is
given in the cf/README file.
