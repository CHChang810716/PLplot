PLplot Release 5.9.4
~~~~~~~~~~~~~~~~~~~~
This is a development release of PLplot. It represents the ongoing efforts
of the community to improve the PLplot plotting package. Development 
releases in the 5.9.x series will be available every few months. The next 
stable release will be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.


Notices for Users.

I. This is the official notice that our deprecated autotools-based build
system has been removed as of release 5.9.1.  Instead, use the CMake-based
build system following the directions in the INSTALL file.

II. This is official notice that we (as of 5.9.1) no longer support
Octave-2.1.73 which has a variety of run-time issues in our tests of the
Octave examples on different platforms.  In contrast our tests show we get
good run-time results with all our Octave examples for Octave-3.0.1. Also,
that is the recommended stable version of Octave at
http://www.gnu.org/software/octave/download.html so that is the only version
of Octave we support at this time.

III. This is official notice that the PLplot team have decided (as of release
5.9.1) for consistency sake to change the PLplot stream variables
plsc->vpwxmi, plsc->vpwxma, plsc->vpwymi, and plsc->vpwyma and the results
returned by plgvpw to reflect the exact window limit values input by users
using plwind. Previously to this change, the stream variables and the values
returned by plgvpw reflected the internal slightly expanded range of window
limits used by PLplot so that the user's specified limits would be on the
graph.  Two users noted this slight difference, and we agree with them it
should not be there. Note that internally, PLplot still uses the expanded
ranges so most users results will be identical.  However, you may notice
some small changes to your plot results if you use these stream variables
directly (only possible in C/C++) or use plgvpw.

IV. This is official notice that (as of release 5.9.2) we have set
HAVE_PTHREAD to ON by default for all platforms other than Darwin.  Darwin
will follow later once it appears the Apple version of X supports it.

V. This is official notice that (as of release 5.9.3) our  build system
requires CMake version 2.6.0 or higher.

VI. This is official notice that (as of release 5.9.3) we have deprecated
the gcw device driver and the related gnome2 and pygcw bindings since these
are essentially unmaintained. For example, the gcw device and associated
bindings still depends on the plfreetype approach for accessing unicode
fonts which has known issues (inconsistent text offsets, inconvenient font
setting capabilities, and incorrect rendering of CTL languages).  To avoid
these issues we advise using the xcairo device and the externally supplied
XDrawable or Cairo context associated with the xcairo device and the
extcairo device (see examples/c/README.cairo) instead. If you still
absolutely must use -dev gcw or the related gnome2 or pygcw bindings despite
the known problems, then they can still be accessed by setting PLD_gcw,
ENABLE_gnome2, and/or ENABLE_pygcw to ON.

VII. This is official notice that (as of release 5.9.3) we have deprecated
the gd device driver which implements the png, jpeg, and gif devices.  This
device driver is essentially unmaintained. For example, it still depends on
the plfreetype approach for accessing unicode fonts which has known issues
(inconsistent text offsets, inconvenient font setting capabilities, and
incorrect rendering of CTL languages).  To avoid these issues for PNG
format, we advise using the pngcairo or pngqt devices.  To avoid these
issues for the JPEG format, we advise using the jpgqt device.  PNG is
normally considered a better raster format than GIF, but if you absolutely
require GIF format, we advise using the pngcairo or pngqt devices and then
downgrading the results to the GIF format using the ImageMagick "convert"
application.  For those platforms where libgd (the dependency of the gd
device driver) is accessible while the required dependencies of the cairo
and/or qt devices are not accessible, you can still use these deprecated
devices by setting PLD_png, PLD_jpeg, or PLD_gif to ON.

VIII. This is official notice that the tk, itk, and itcl components of
PLplot have been reenabled again by default (as of release 5.9.3) after
being disabled by default as of release 5.9.1 due to segfaults.  The cause
of the segfaults was a bug (now fixed) in how pthread support was
implemented for the Tk-related components of PLplot.

INDEX

1. Changes relative to PLplot 5.9.3 (the previous development release)

1.1 Various bug fixes
1.2 Cairo driver improvements


2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed
2.2 Build system bug fixes
2.3 Build system improvements
2.4 Implement build-system infrastructure for installed Ada bindings and 
examples
2.5 Code cleanup 
2.6 Date / time labels for axes
2.7 Alpha value support
2.8 New PLplot functions
2.9 External libLASi library improvements affecting our psttf device.
2.10 Improvements to the cairo driver family.
2.11 wxWidgets driver improvements
2.12 pdf driver improvements
2.13 svg driver improvements
2.14 Ada language support
2.15 OCaml language support
2.16 Perl/PDL language support
2.17 Update to various language bindings
2.18 Update to various examples
2.19 Extension of our test framework
2.20 Rename test subdirectory to plplot_test
2.21 Website support files updated
2.22 Internal changes to function visibility
2.23 Dynamic driver support in Windows
2.24 Documentation updates
2.25 libnistcd (a.k.a. libcd) now built internally for -dev cgm
2.26 get-drv-info now changed to test-drv-info
2.27 Text clipping now enabled by default for the cairo devices
2.28 A powerful qt device driver has been implemented
2.29 The PLplot API is now accessible from Qt GUI applications
2.30 NaN / Inf support for some PLplot functions
2.31 Various bug fixes
2.32 Cairo driver improvements

1. Changes relative to PLplot 5.9.3 (the previous development release)

1.1 Various bug fixes

Various bugs in the 5.9.3 release have been fixed including:

- Include missing file needed for the aqt driver on Mac OS X
- Missing library version number for nistcd
- Fixes for the qt examples with dynamic drivers disabled
- Fixes to several tcl examples so they work with plserver
- Fix pkg-config files to work correctly with Debug / Release build types set
- Make fortran command line argument parsing work with shared libraries on Windows

1.2 Cairo driver improvements

Improvements to the cairo driver to give better results for bitmap 
formats when used with anti-aliasing file viewers.

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed

CMake (with the exception of a special build script for the DJGPP platform)
is now the only supported build system. It has been tested on Linux / Unix,
Mac OS-X and Windows platforms.

2.2 Build system bug fixes

Various fixes include the following:

Ctest will now work correctly when the build tree path includes symlinks.

Dependencies for swig generated files fixed so they are not rebuilt every 
time make is called.

Various dependency fixes to ensure that parallel builds (using make -j) 
work under unix.

2.3 Build system improvements

We now transform link flag results delivered to the CMake environment by
pkg-config into the preferred CMake form of library information.  The
practical effect of this improvement is that external libraries in
non-standard locations now have their rpath options set correctly for our
build system both for the build tree and the install tree so you don't have
to fiddle with LD_LIBRARY_PATH, etc.

2.4 Implement build-system infrastructure for installed Ada bindings and 
examples

Install source files, library information files, and the plplotada library
associated with the Ada bindings.  Configure and install the pkg-config file
for the plplotada library.  Install the Ada examples and a configured Makefile
to build them in the install tree.

2.5 Code cleanup

The PLplot source code has been cleaned up to make consistent use of 
(const char *) and (char *) throughout. Some API functions have changed 
to use const char * instead of char * to make it clear that the strings 
are not modified by the function. The C and C++ examples have been updated
consistent with this. These changes fix a large number of warnings 
with gcc-4.2. Note: this should not require programs using PLplot to be 
recompiled as it is not a binary API change.

There has also been some cleanup of include files in the C++ examples
so the code will compile with the forthcoming gcc-4.3.

2.6 Date / time labels for axes
  
PLplot now allows date / time labels to be used on axes. A new option 
('d') is available for the xopt and yopt arguments to plbox which 
indicates that the axis should be interpreted as a date / time. Similarly
there is a new range of options for plenv to select date / time labels. 
The time format is seconds since the epoch (usually 1 Jan 1970). This 
format is commonly used on most systems. The C gmtime routine can be 
used to calculate this for a given date and time. The format for the 
labels is controlled using a new pltimefmt function, which takes a 
format string. All formatting is done using the C strftime function. 
See documentation for available options on your platform. Example 29 
demonstrates the new capabilities.

N.B. Our reliance on C library POSIX time routines to (1) convert from
broken-down time to time-epoch, (2) to convert from time-epoch to
broken-down time, and (3) to format results with strftime have proved
problematic for non-C languages which have time routines of variable
quality.  Also, it is not clear that even the POSIX time routines are
available on Windows. So we have plans afoot to implement high-quality
versions of (1), (2), and (3) with additional functions to get/set the epoch
in the PLplot core library itself.  These routines should work on all C
platforms and should also be uniformly accessible for all our language
bindings. 

WARNING.....  Therefore, assuming these plans are implemented, the present
part of our date/time PLplot API that uses POSIX time routines will be
changed.

2.7 Alpha value support

PLplot core has been modified to support a transparency or alpha value
channel for each color in color map 0 and 1. In addition a number of new
functions were added the PLplot API so that the user can both set and query
alpha values for color in the two color maps. These functions have the same
name as their non-alpha value equivalents, but with a an "a" added to the
end. Example 30 demonstrates some different ways to use these functions
and the effects of alpha values, at least for those drivers that support alpha
values. This change should have no effect on the device drivers that do not 
currently support alpha values. Currently only the cairo, qt, gd, wxwidgets and
aquaterm drivers support alpha values. There are some limitations with the gd 
driver due to transparency support in the underlying libgd library.

2.8 New PLplot functions

An enhanced version of plimage, plimagefr has been added. This allows images
to be plotted using coordinate transformation, and also for the dynamic range
of the plotted values to be altered. Example 20 has been modified to 
demonstrate this new functionality. 

To ensure consistent results in example 21 between different platforms and 
language bindings PLplot now includes a small random number generator within
the library. plrandd will return a PLFLT random number in the range 0.0-1.0. 
plseed will allow the random number generator to be seeded.

2.9 External libLASi library improvements affecting our psttf device.

Our psttf device depends on the libLASi library. libLASi-1.1.0 has just been
released at http://sourceforge.net/svn/?group_id=187113 .  We recommend
using this latest version of libLASi for building PLplot and the psttf
device since this version of libLASi is more robust against glyph
information returned by pango/cairo/fontconfig that on rare occasions is not
suitable for use by libLASi.

2.10 Improvements to the cairo driver family.

Jonathan Woithe improved the xcairo driver so that it can optionally be 
used with an external user supplied X Drawable. This enables a nice 
separation of graphing (PLplot) and window management (Gtk, etc..). Doug 
Hunt fixed the bugs that broke the memcairo driver and it is now fully
functional. Additionally, a new extcairo driver was added that will plot
into a user supplied cairo context.

2.11 wxWidgets driver improvements

Complete reorganization of the driver code. A new backend was added, based
on the wxGraphicsContext class, which is available for wxWidgets 2.8.4
and later. This backend produces antialized output similar to the
AGG backend but has no dependency on the AGG library. The basic wxDC
backend and the wxGraphicsContext backend process the text output
on their own, which results in much nicer plots than with the standard
Hershey fonts and is much faster than using the freetype library. New
options were introduced in the wxWidgets driver:
 - backend: Choose backend: (0) standard, (1) using AGG library,
                            (2) using wxGraphicsContext
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - text: Use own text routines (text=0|1)
 - freetype: Use FreeType library (freetype=0|1)
The option "text" changed its meaning, since it enabled the FreeType library
support, while now the option enables the driver's own text routines.

Some other features were added:
 * the wxWidgets driver now correctly clears the background (or parts of it)
 * transparency support was added
 * the "locate mode" (already availale in the xwin and tk driver) was
   implemented, where graphics input events are processed and translated
   to world coordinates

2.12 pdf driver improvements

The pdf driver (which is based on the haru library http://www.libharu.org)
processes the text output now on its own. So far only the Adobe Type1
fonts are supported. TrueType font support will follow. Full unicode
support will follow after the haru library will support unicode strings. The
driver is now able to produce A4, letter, A5 and A3 pages. The Hershey font
may be used only for symbols. Output can now be compressed, resulting in 
much smaller file sizes.
Added new options:
 - text: Use own text routines (text=0|1)
 - compress: Compress pdf output (compress=0|1)
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - pagesize: Set page size (pagesize=A4|letter|A3|A5)
 
2.13 svg driver improvements

This device driver has had the following improvements: schema for generated
file now validates properly at http://validator.w3.org/ for the
automatically detected document type of SVG 1.1; -geometry option now works;
alpha channel transparency has been implemented; file familying for
multipage examples has been implemented; coordinate scaling has been
implemented so that full internal PLplot resolution is used; extraneous
whitespace and line endings that were being injected into text in error have
now been removed; and differential correction to string justification is now
applied.  

The result of these improvements is that our SVG device now gives the
best-looking results of all our devices.  However, currently you must be
careful of which SVG viewer or editor you try because a number of them have
some bugs that need to be resolved.  For example, there is a librsvg bug in
text placement (http://bugzilla.gnome.org/show_bug.cgi?id=525023) that
affects all svg use within GNOME as well as the ImageMagick "display"
application.  However, at least the latest konqueror and firefox as well as
inkscape and scribus-ng (but not scribus!) give outstanding looking results
for files generated by our svg device driver.

2.14 Ada language support

We now have a complete Ada bindings implemented for PLplot. We also have a
complete set of our standard examples implemented in Ada which give results
that are identical with corresponding results for the C standard examples.
This is an excellent test of a large subset of the Ada bindings. We now
enable Ada by default for our users and request widespread testing of this
new feature.

2.15 OCaml language support

Thanks primarily to Hezekiah M. Carty's efforts we now have a complete OCaml
bindings implemented for PLplot. We also have a complete set of our standard
examples implemented in OCaml which give results that are identical with
corresponding results for the C standard examples. This is an excellent test
of a large subset of the OCaml bindings. We now enable OCaml by default for
our users and request widespread testing of this new feature.

2.16 Perl/PDL language support

Thanks to Doug Hunt's efforts the external Perl/PDL module,
PDL::Graphics::PLplot version 0.46 available at
http://search.cpan.org/dist/PDL-Graphics-PLplot has been brought up to date
to give access to recently added PLplot API.  The instructions for how to
install this module on top of an offical PDL release are given in
examples/perl/README.perldemos. Doug has also finished implementing a
complete set of standard examples in Perl/PDL which are part of PLplot and
which produce identical results to their C counterparts if the above updated
module has been installed.  Our build system tests the version of
PDL::Graphics::PLplot that is available, and if it is not 0.46 or later, the
list of Perl/PDL examples that are run as part of our standard tests is
substantially reduced to avoid examples that use the new functionality.  In
sum, if you use PDL::Graphics::PLplot version 0.46 or later the full
complement of PLplot commands is available to you from Perl/PDL, but
otherwise not.

2.17 Updates to various language bindings

A concerted effort has been made to bring all the language bindings up to
date with recently added functions. Ada, C++, f77, f95, Java, OCaml, Octave, 
Perl/PDL, Python, and Tcl now all support the common PLplot API (with the 
exception of the mapping functions which are not yet implemented for all 
bindings due to technical issues.) This is a significant step forward for 
those using languages other than C.

2.18 Updates to various examples

To help test the updates to the language bindings the examples have been 
thoroughly checked. Ada, C, C++, f77, f95, and OCaml now contain a full set
of non-interactive tests (examples 1-31 excluding 14 and 17). Java, Octave,
Python and Tcl are missing example 19 because of the issue with the mapping
functions. The examples have also been checked to ensure consistent results
between different language bindings. Currently there are still some minor
differences in the results for the tcl examples, probably due to rounding
errors.  Some of the Tcl examples (example 21) require Tcl version 8.5 for
proper support for NaNs.

Also new is an option for the plplot_test.sh script to run the examples 
using a debugging command. This is enabled using the --debug option. The
default it to use the valgrind memory checker. This has highlighted at 
least one memory leaks in plplot which have been fixed. It is not part 
of the standard ctest tests because it can be _very_ slow for a complete
set of language bindings and device drivers.

2.19 Extension of our test framework

The standard test suite for PLplot now carries out a comparison of the
stdout output (especially important for example 31 which tests most of our
set and get functions) and PostScript output for different languages as a
check.  Thanks to the addition of example 31, the inclusion of examples 14
and 17 in the test suite and other recent extensions of the other 
examples we now have rigourous testing in place for almost the entirety 
of our common API.  This extensive testing framework has already helped 
us track down a number of bugs, and it should make it much easier for us 
to maintain high quality for our ongoing PLplot releases.

2.20 Rename test subdirectory to plplot_test

This change was necessary to quit clashing with the "make test" target which
now works for the first time ever (by executing ctest).

2.21 Website support files updated

Our new website content is generated with PHP and uses CSS (cascaded style
sheets) to implement a consistent style.  This new approach demanded lots of
changes in the website support files that are used to generate and upload
our website and which are automatically included with the release.

2.22 Internal changes to function visibility

The internal definitions of functions in plplot have been significantly 
tidied up to allow the use of the -fvisibility=hidden option with newer
versions of gcc. This prevents internal functions from being exported
to the user where possible. This extends the existing support for this
on windows.

2.23 Dynamic driver support in Windows

An interface based on the ltdl library function calls was established
which allows to open and close dynamic link libraries (DLL) during
run-time and call functions from these libraries. As a consequence
drivers can now be compiled into single DLLs separate from the core
plplot DLL also in Windows. The cmake option ENABLE_DYNDRIVERS is now
ON by default for Windows if a shared plplot library is built.

2.24 Documentation updates

The docbook documentation has been updated to include many of the 
C-specific functions (for example plAlloc2dGrid) which are not part 
of the common API, but are used in the examples and may be helpful 
for plplot users.

2.25 libnistcd (a.k.a. libcd) now built internally for -dev cgm

CGM format is a long-established (since 1987) open standard for vector
graphics that is supported by w3c (see http://www.w3.org/Graphics/WebCGM/).
PLplot has long had a cgm device driver which depended on the (mostly) 
public domain libcd library that was distributed in the mid 90's by National
Institute of Standards and Technology (NIST) and which is still available
from http://www.pa.msu.edu/ftp/pub/unix/cd1.3.tar.gz.  As a convenience
to our -dev cgm users, we have brought that
source code in house under lib/nistcd and now build libnistcd routinely
as part of our ordinary builds.  The only changes we have made to the
cd1.3 source code is visibility changes in cd.h and swapping the sense of
the return codes for the test executables so that 0 is returned on success
and 1 on failure.  If you want to test libnistcd on your platform,
please run

make test_nistcd

in the top-level build tree.  (That tests runs all the test executables
that are built as part of cd1.3 and compares the results that are generated
with the *.cgm files that are supplied as part of cd1.3.)

Two applications that convert and/or display CGM results on Linux are
ralcgm (which is called by the ImageMagick convert and display applications)
and uniconvertor.

Some additional work on -dev cgm is required to implement antialiasing and
non-Hershey fonts, but both those should be possible using libnistcd according
to the text that is shown by lib/nistcd/cdtext.cgm and lib/nistcd/cdexp1.cgm.

2.26 get-drv-info now changed to test-drv-info

To make cross-building much easier for PLplot we now configure the *.rc
files that are used to describe our various dynamic devices rather than
generating the required *.rc files with get-drv-info.  We have changed the
name of get-drv-info to test-drv-info.  That name is more appropriate
because that executable has always tested dynamic loading of the driver
plug-ins as well as generating the *.rc files from the information gleaned
from that dynamic loading.  Now, we simply run test-drv-info as an option
(defaults to ON unless cross-building is enabled) and compare the resulting
*.rc file with the one configured by cmake to be sure the dynamic device
has been built correctly.

2.27 Text clipping now enabled by default for the cairo devices

When correct text clipping was first implemented for cairo devices, it was
discovered that the libcairo library of that era (2007-08) did that clipping
quite inefficiently so text clipping was disabled by default.  Recent tests
of text clipping for the cairo devices using libcairo 1.6.4 (released in
2008-04) shows text clipping is quite efficient now.  Therefore, it is now
enabled by default.  If you notice a significant slowdown for some libcairo
version prior to 1.6.4 you can use the option -drvopt text_clipping=0 for
your cairo device plots (and accept the improperly clipped text results that
might occur with that option).  Better yet, use libcairo 1.6.4 or later.

2.28 A powerful qt device driver has been implemented

Thanks to the efforts of Alban Rochel of the QSAS team, we now have a new qt
device driver which delivers the following 9 (!) devices: qtwidget, bmpqt,
jpgqt, pngqt, ppmqt, tiffqt, epsqt, pdfqt, and svgqt. qtwidget is an
elementary interactive device where, for now, the possible interactions
consist of resizing the window and right clicking with the mouse (or hitting
<return> to be consistent with other PLplot interactive devices) to control
paging.  The qtwidget overall size is expressed in pixels. bmpqt, jpgqt,
pngqt, ppmqt, and tiffqt are file devices whose overall sizes are specified
in pixels and whose output is BMP (Windows bitmap), JPEG, PNG, PPM (portable
pixmap), and TIFF (tagged image file format) formatted files. epsqt, pdfqt,
svgqt are file devices whose overall sizes are specified in points (1/72 of
an inch) and whose output is EPS (encapsulated PostScript), PDF, and SVG
formatted files.  The qt device driver is based on the powerful facilities
of Qt4 so all qt devices implement variable opacity (alpha channel) effects
(see example 30).  The qt devices also use system unicode fonts, and deal
with CTL (complex text layout) languages automatically without any
intervention required by the user.  (To show this, try qt device results
from examples 23 [mathematical symbols] and 24 [CTL languages].)

Our exhaustive Linux testing of the qt devices (which consisted of detailed
comparisons for all our standard examples between qt device results and the
corresponding cairo device results) indicates this device driver is mature,
but testing on other platforms is requested to confirm that maturity. Qt-4.5
(the version we used for most of our tests) has some essential SVG
functionality so we recommend that version (downloadable from
http://www.qtsoftware.com/downloads for Linux, Mac OS X, and Windows) for
svgqt.  One of our developers found that pdfqt was orders of magnitude
slower than the other qt devices for Qt-4.4.3 on Ubuntu 8.10 installed on a
64 bit box.  That problem was completely cured by moving to the downloadable
Qt-4.5 version.  However, we have also had good Qt-4.4.3 pdfqt reports on
other platforms.  One of our developers also found that all first pages of
examples were black for just the qtwidget device for Qt-4.5.1 on Mac OS X.
From the other improvements we see in Qt-4.5.1 relative to Qt-4.4.3 we
assume this black first page for qtwidget problem also exists for Qt-4.4.3,
but we haven't tested that combination.

In sum, Qt-4.4.3 is worth trying if it is already installed on your machine,
but if you run into any difficulty with it please switch to Qt-4.5.x (once
Qt-4.5.x is installed all you have to do is to put the 4.5.x version of
qmake in your path, and cmake does the rest).  If the problem persists for
Qt-4.5, then it is worth reporting a qt bug.

2.29 The PLplot API is now accessible from Qt GUI applications

This important new feature has been implemented by Alban Rochel of the QSAS
team as a spin-off of the qt device driver project using the extqt device
(which constitutes the tenth qt device).  See examples/c++/README.qt_example
for a brief description of a simple Qt example which accesses the PLplot API
and which is built in the installed examples tree using the pkg-config
approach. Our build system has been enhanced to configure the necessary
plplotd-qt.pc file.

2.30 NaN / Inf support for some PLplot functions

Some PLplot now correctly handle Nan or Inf values in the data to be plotted.
Line plotting (plline etc) and image plotting (plimage, plimagefr) will 
now ignore NaN / Inf values. Currently some of the contour plotting / 3-d 
routines do not handle NaN / Inf values. This functionality will 
depend on whether the language binding used supports NaN / Inf values.

2.31 Various bug fixes

Various bugs in the 5.9.3 release have been fixed including:

- Include missing file needed for the aqt driver on Mac OS X
- Missing library version number for nistcd
- Fixes for the qt examples with dynamic drivers disabled
- Fixes to several tcl examples so they work with plserver
- Fix pkg-config files to work correctly with Debug / Release build types set
- Make fortran command line argument parsing work with shared libraries on Windows

2.32 Cairo driver improvements

Improvements to the cairo driver to give better results for bitmap 
formats when used with anti-aliasing file viewers.


PLplot Release 5.9.3
~~~~~~~~~~~~~~~~~~~~
This is a development release of PLplot. It represents the ongoing efforts
of the community to improve the PLplot plotting package. Development 
releases in the 5.9.x series will be available every few months. The next 
stable release will be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.


Notices for Users.

I. This is the official notice that our deprecated autotools-based build
system has been removed as of release 5.9.1.  Instead, use the CMake-based
build system following the directions in the INSTALL file.

II. This is official notice that we (as of 5.9.1) no longer support
Octave-2.1.73 which has a variety of run-time issues in our tests of the
Octave examples on different platforms.  In contrast our tests show we get
good run-time results with all our Octave examples for Octave-3.0.1. Also,
that is the recommended stable version of Octave at
http://www.gnu.org/software/octave/download.html so that is the only version
of Octave we support at this time.

III. This is official notice that the PLplot team have decided (as of release
5.9.1) for consistency sake to change the PLplot stream variables
plsc->vpwxmi, plsc->vpwxma, plsc->vpwymi, and plsc->vpwyma and the results
returned by plgvpw to reflect the exact window limit values input by users
using plwind. Previously to this change, the stream variables and the values
returned by plgvpw reflected the internal slightly expanded range of window
limits used by PLplot so that the user's specified limits would be on the
graph.  Two users noted this slight difference, and we agree with them it
should not be there. Note that internally, PLplot still uses the expanded
ranges so most users results will be identical.  However, you may notice
some small changes to your plot results if you use these stream variables
directly (only possible in C/C++) or use plgvpw.

IV. This is official notice that (as of release 5.9.2) we have set
HAVE_PTHREAD to ON by default for all platforms other than Darwin.  Darwin
will follow later once it appears the Apple version of X supports it.

V. This is official notice that (as of release 5.9.3) our  build system
requires CMake version 2.6.0 or higher.

VI. This is official notice that (as of release 5.9.3) we have deprecated
the gcw device driver and the related gnome2 and pygcw bindings since these
are essentially unmaintained. For example, the gcw device and associated
bindings still depends on the plfreetype approach for accessing unicode
fonts which has known issues (inconsistent text offsets, inconvenient font
setting capabilities, and incorrect rendering of CTL languages).  To avoid
these issues we advise using the xcairo device and the externally supplied
XDrawable or Cairo context associated with the xcairo device and the
extcairo device (see examples/c/README.cairo) instead. If you still
absolutely must use -dev gcw or the related gnome2 or pygcw bindings despite
the known problems, then they can still be accessed by setting PLD_gcw,
ENABLE_gnome2, and/or ENABLE_pygcw to ON.

VII. This is official notice that (as of release 5.9.3) we have deprecated
the gd device driver which implements the png, jpeg, and gif devices.  This
device driver is essentially unmaintained. For example, it still depends on
the plfreetype approach for accessing unicode fonts which has known issues
(inconsistent text offsets, inconvenient font setting capabilities, and
incorrect rendering of CTL languages).  To avoid these issues for PNG
format, we advise using the pngcairo or pngqt devices.  To avoid these
issues for the JPEG format, we advise using the jpgqt device.  PNG is
normally considered a better raster format than GIF, but if you absolutely
require GIF format, we advise using the pngcairo or pngqt devices and then
downgrading the results to the GIF format using the ImageMagick "convert"
application.  For those platforms where libgd (the dependency of the gd
device driver) is accessible while the required dependencies of the cairo
and/or qt devices are not accessible, you can still use these deprecated
devices by setting PLD_png, PLD_jpeg, or PLD_gif to ON.

VIII. This is official notice that the tk, itk, and itcl components of
PLplot have been reenabled again by default (as of release 5.9.3) after
being disabled by default as of release 5.9.1 due to segfaults.  The cause
of the segfaults was a bug (now fixed) in how pthread support was
implemented for the Tk-related components of PLplot.

INDEX

1. Changes relative to PLplot 5.9.2 (the previous development release)

1.1 libnistcd (a.k.a. libcd) now built internally for -dev cgm
1.2 get-drv-info now changed to test-drv-info
1.3 Text clipping now enabled by default for the cairo devices
1.4 A powerful qt device driver has been implemented
1.5 The PLplot API is now accessible from Qt GUI applications
1.6 NaN / Inf support for some PLplot functions

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed
2.2 Build system bug fixes
2.3 Build system improvements
2.4 Implement build-system infrastructure for installed Ada bindings and 
examples
2.5 Code cleanup 
2.6 Date / time labels for axes
2.7 Alpha value support
2.8 New PLplot functions
2.9 External libLASi library improvements affecting our psttf device.
2.10 Improvements to the cairo driver family.
2.11 wxWidgets driver improvements
2.12 pdf driver improvements
2.13 svg driver improvements
2.14 Ada language support
2.15 OCaml language support
2.16 Perl/PDL language support
2.17 Update to various language bindings
2.18 Update to various examples
2.19 Extension of our test framework
2.20 Rename test subdirectory to plplot_test
2.21 Website support files updated
2.22 Internal changes to function visibility
2.23 Dynamic driver support in Windows
2.24 Documentation updates
2.25 libnistcd (a.k.a. libcd) now built internally for -dev cgm
2.26 get-drv-info now changed to test-drv-info
2.27 Text clipping now enabled by default for the cairo devices
2.28 A powerful qt device driver has been implemented
2.29 The PLplot API is now accessible from Qt GUI applications
2.30 NaN / Inf support for some PLplot functions

1. Changes relative to PLplot 5.9.2 (the previous development release)

1.1 libnistcd (a.k.a. libcd) now built internally for -dev cgm

CGM format is a long-established (since 1987) open standard for vector
graphics that is supported by w3c (see http://www.w3.org/Graphics/WebCGM/).
PLplot has long had a cgm device driver which depended on the (mostly) 
public domain libcd library that was distributed in the mid 90's by National
Institute of Standards and Technology (NIST) and which is still available
from http://www.pa.msu.edu/ftp/pub/unix/cd1.3.tar.gz.  As a convenience
to our -dev cgm users, we have brought that
source code in house under lib/nistcd and now build libnistcd routinely
as part of our ordinary builds.  The only changes we have made to the
cd1.3 source code is visibility changes in cd.h and swapping the sense of
the return codes for the test executables so that 0 is returned on success
and 1 on failure.  If you want to test libnistcd on your platform,
please run

make test_nistcd

in the top-level build tree.  (That tests runs all the test executables
that are built as part of cd1.3 and compares the results that are generated
with the *.cgm files that are supplied as part of cd1.3.)

Two applications that convert and/or display CGM results on Linux are
ralcgm (which is called by the ImageMagick convert and display applications)
and uniconvertor.

Some additional work on -dev cgm is required to implement antialiasing and
non-Hershey fonts, but both those should be possible using libnistcd according
to the text that is shown by lib/nistcd/cdtext.cgm and lib/nistcd/cdexp1.cgm.

1.2 get-drv-info now changed to test-drv-info

To make cross-building much easier for PLplot we now configure the *.rc
files that are used to describe our various dynamic devices rather than
generating the required *.rc files with get-drv-info.  We have changed the
name of get-drv-info to test-drv-info.  That name is more appropriate
because that executable has always tested dynamic loading of the driver
plug-ins as well as generating the *.rc files from the information gleaned
from that dynamic loading.  Now, we simply run test-drv-info as an option
(defaults to ON unless cross-building is enabled) and compare the resulting
*.rc file with the one configured by cmake to be sure the dynamic device
has been built correctly.

1.3 Text clipping now enabled by default for the cairo devices

When correct text clipping was first implemented for cairo devices, it was
discovered that the libcairo library of that era (2007-08) did that clipping
quite inefficiently so text clipping was disabled by default.  Recent tests
of text clipping for the cairo devices using libcairo 1.6.4 (released in
2008-04) shows text clipping is quite efficient now.  Therefore, it is now
enabled by default.  If you notice a significant slowdown for some libcairo
version prior to 1.6.4 you can use the option -drvopt text_clipping=0 for
your cairo device plots (and accept the improperly clipped text results that
might occur with that option).  Better yet, use libcairo 1.6.4 or later.

1.4 A powerful qt device driver has been implemented

Thanks to the efforts of Alban Rochel of the QSAS team, we now have a qt
device driver which delivers the following 9 (!) devices: qtwidget, bmpqt,
jpgqt, pngqt, ppmqt, tiffqt, epsqt, pdfqt, and svgqt. qtwidget is an
elementary interactive device where, for now, the possible interactions
consist of resizing the window and right clicking with the mouse to control
paging.  The qtwidget overall size is expressed in pixels. bmpqt, jpgqt,
pngqt, ppmqt, and tiffqt are file devices whose overal sizes are specified
in pixels and whose output is BMP (Windows bitmap), JPEG, PNG, PPM (portable
pixmap), and TIFF (tagged image file format) formatted files. epsqt, pdfqt,
svgqt are file devices whose overall sizes are specified in points (1/72 of
an inch) and whose output is EPS (encapsulated PostScript), PDF, and SVG
formatted files.  The qt device driver is based on the powerful facilities
of Qt4 so all qt devices implement variable opacity (alpha channel) effects
(see example 30).  The qt devices also use system unicode fonts, and deal
with CTL (complex text layout) languages automatically without any
intervention required by the user.  (To show this, try qt device results
from examples 23 [mathematical symbols] and 24 [CTL languages].)

Our exhaustive Linux testing of the qt devices (which consisted of detailed
comparisons for all our standard examples between qt device results and the
corresponding cairo device results) indicates this device driver is mature,
but testing on other platforms is requested to confirm that maturity.
Qt-4.5 has some essential SVG functionality so we recommend that
version (downloadable from http://www.qtsoftware.com/downloads for Linux,
Mac OS X, and Windows) for svgqt.  Qt-4.5 is the version we have used for
most of our testing, but limited testing for Qt-4.4 indicates that version
should be fine for qt devices other than svgqt.

1.5 The PLplot API is now accessible from Qt GUI applications

This important new feature has been implemented by Alban Rochel of the QSAS
team as a spin-off of the qt device driver project using the extqt device
(which constitutes the tenth qt device).  See examples/c++/README.qt_example
for a brief description of a simple Qt example which accesses the PLplot API
and which is built in the installed examples tree using the pkg-config
approach. Our build system has been enhanced to configure the necessary
plplotd-qt.pc file.

1.6 NaN / Inf support for some PLplot functions

Some PLplot now correctly handle Nan or Inf values in the data to be plotted.
Line plotting (plline etc) and image plotting (plimage, plimagefr) will 
now ignore NaN / Inf values. Currently some of the contour plotting / 3-d 
routines do not handle NaN / Inf values. This functionality will 
depend on whether the language binding used supports NaN / Inf values.

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed

CMake (with the exception of a special build script for the DJGPP platform)
is now the only supported build system. It has been tested on Linux / Unix,
Mac OS-X and Windows platforms.

2.2 Build system bug fixes

Various fixes include the following:

Ctest will now work correctly when the build tree path includes symlinks.

Dependencies for swig generated files fixed so they are not rebuilt every 
time make is called.

Various dependency fixes to ensure that parallel builds (using make -j) 
work under unix.

2.3 Build system improvements

We now transform link flag results delivered to the CMake environment by
pkg-config into the preferred CMake form of library information.  The
practical effect of this improvement is that external libraries in
non-standard locations now have their rpath options set correctly for our
build system both for the build tree and the install tree so you don't have
to fiddle with LD_LIBRARY_PATH, etc.

2.4 Implement build-system infrastructure for installed Ada bindings and 
examples

Install source files, library information files, and the plplotada library
associated with the Ada bindings.  Configure and install the pkg-config file
for the plplotada library.  Install the Ada examples and a configured Makefile
to build them in the install tree.

2.5 Code cleanup

The PLplot source code has been cleaned up to make consistent use of 
(const char *) and (char *) throughout. Some API functions have changed 
to use const char * instead of char * to make it clear that the strings 
are not modified by the function. The C and C++ examples have been updated
consistent with this. These changes fix a large number of warnings 
with gcc-4.2. Note: this should not require programs using PLplot to be 
recompiled as it is not a binary API change.

There has also been some cleanup of include files in the C++ examples
so the code will compile with the forthcoming gcc-4.3.

2.6 Date / time labels for axes
  
PLplot now allows date / time labels to be used on axes. A new option 
('d') is available for the xopt and yopt arguments to plbox which 
indicates that the axis should be interpreted as a date / time. Similarly
there is a new range of options for plenv to select date / time labels. 
The time format is seconds since the epoch (usually 1 Jan 1970). This 
format is commonly used on most systems. The C gmtime routine can be 
used to calculate this for a given date and time. The format for the 
labels is controlled using a new pltimefmt function, which takes a 
format string. All formatting is done using the C strftime function. 
See documentation for available options on your platform. Example 29 
demonstrates the new capabilities.

N.B. Our reliance on C library POSIX time routines to (1) convert from
broken-down time to time-epoch, (2) to convert from time-epoch to
broken-down time, and (3) to format results with strftime have proved
problematic for non-C languages which have time routines of variable
quality.  Also, it is not clear that even the POSIX time routines are
available on Windows. So we have plans afoot to implement high-quality
versions of (1), (2), and (3) with additional functions to get/set the epoch
in the PLplot core library itself.  These routines should work on all C
platforms and should also be uniformly accessible for all our language
bindings. 

WARNING.....  Therefore, assuming these plans are implemented, the present
part of our date/time PLplot API that uses POSIX time routines will be
changed.

2.7 Alpha value support

PLplot core has been modified to support a transparency or alpha value
channel for each color in color map 0 and 1. In addition a number of new
functions were added the PLplot API so that the user can both set and query
alpha values for color in the two color maps. These functions have the same
name as their non-alpha value equivalents, but with a an "a" added to the
end. Example 30 demonstrates some different ways to use these functions
and the effects of alpha values, at least for those drivers that support alpha
values. This change should have no effect on the device drivers that do not 
currently support alpha values. Currently only the cairo, qt, gd, wxwidgets and
aquaterm drivers support alpha values. There are some limitations with the gd 
driver due to transparency support in the underlying libgd library.

2.8 New PLplot functions

An enhanced version of plimage, plimagefr has been added. This allows images
to be plotted using coordinate transformation, and also for the dynamic range
of the plotted values to be altered. Example 20 has been modified to 
demonstrate this new functionality. 

To ensure consistent results in example 21 between different platforms and 
language bindings PLplot now includes a small random number generator within
the library. plrandd will return a PLFLT random number in the range 0.0-1.0. 
plseed will allow the random number generator to be seeded.

2.9 External libLASi library improvements affecting our psttf device.

Our psttf device depends on the libLASi library. libLASi-1.1.0 has just been
released at http://sourceforge.net/svn/?group_id=187113 .  We recommend
using this latest version of libLASi for building PLplot and the psttf
device since this version of libLASi is more robust against glyph
information returned by pango/cairo/fontconfig that on rare occasions is not
suitable for use by libLASi.

2.10 Improvements to the cairo driver family.

Jonathan Woithe improved the xcairo driver so that it can optionally be 
used with an external user supplied X Drawable. This enables a nice 
separation of graphing (PLplot) and window management (Gtk, etc..). Doug 
Hunt fixed the bugs that broke the memcairo driver and it is now fully
functional. Additionally, a new extcairo driver was added that will plot
into a user supplied cairo context.

2.11 wxWidgets driver improvements

Complete reorganization of the driver code. A new backend was added, based
on the wxGraphicsContext class, which is available for wxWidgets 2.8.4
and later. This backend produces antialized output similar to the
AGG backend but has no dependency on the AGG library. The basic wxDC
backend and the wxGraphicsContext backend process the text output
on their own, which results in much nicer plots than with the standard
Hershey fonts and is much faster than using the freetype library. New
options were introduced in the wxWidgets driver:
 - backend: Choose backend: (0) standard, (1) using AGG library,
                            (2) using wxGraphicsContext
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - text: Use own text routines (text=0|1)
 - freetype: Use FreeType library (freetype=0|1)
The option "text" changed its meaning, since it enabled the FreeType library
support, while now the option enables the driver's own text routines.

Some other features were added:
 * the wxWidgets driver now correctly clears the background (or parts of it)
 * transparency support was added
 * the "locate mode" (already availale in the xwin and tk driver) was
   implemented, where graphics input events are processed and translated
   to world coordinates

2.12 pdf driver improvements

The pdf driver (which is based on the haru library http://www.libharu.org)
processes the text output now on its own. So far only the Adobe Type1
fonts are supported. TrueType font support will follow. Full unicode
support will follow after the haru library will support unicode strings. The
driver is now able to produce A4, letter, A5 and A3 pages. The Hershey font
may be used only for symbols. Output can now be compressed, resulting in 
much smaller file sizes.
Added new options:
 - text: Use own text routines (text=0|1)
 - compress: Compress pdf output (compress=0|1)
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - pagesize: Set page size (pagesize=A4|letter|A3|A5)
 
2.13 svg driver improvements

This device driver has had the following improvements: schema for generated
file now validates properly at http://validator.w3.org/ for the
automatically detected document type of SVG 1.1; -geometry option now works;
alpha channel transparency has been implemented; file familying for
multipage examples has been implemented; coordinate scaling has been
implemented so that full internal PLplot resolution is used; extraneous
whitespace and line endings that were being injected into text in error have
now been removed; and differential correction to string justification is now
applied.  

The result of these improvements is that our SVG device now gives the
best-looking results of all our devices.  However, currently you must be
careful of which SVG viewer or editor you try because a number of them have
some bugs that need to be resolved.  For example, there is a librsvg bug in
text placement (http://bugzilla.gnome.org/show_bug.cgi?id=525023) that
affects all svg use within GNOME as well as the ImageMagick "display"
application.  However, at least the latest konqueror and firefox as well as
inkscape and scribus-ng (but not scribus!) give outstanding looking results
for files generated by our svg device driver.

2.14 Ada language support

We now have a complete Ada bindings implemented for PLplot. We also have a
complete set of our standard examples implemented in Ada which give results
that are identical with corresponding results for the C standard examples.
This is an excellent test of a large subset of the Ada bindings. We now
enable Ada by default for our users and request widespread testing of this
new feature.

2.15 OCaml language support

Thanks primarily to Hezekiah M. Carty's efforts we now have a complete OCaml
bindings implemented for PLplot. We also have a complete set of our standard
examples implemented in OCaml which give results that are identical with
corresponding results for the C standard examples. This is an excellent test
of a large subset of the OCaml bindings. We now enable OCaml by default for
our users and request widespread testing of this new feature.

2.16 Perl/PDL language support

Thanks to Doug Hunt's efforts the external Perl/PDL module,
PDL::Graphics::PLplot version 0.46 available at
http://search.cpan.org/dist/PDL-Graphics-PLplot has been brought up to date
to give access to recently added PLplot API.  The instructions for how to
install this module on top of an offical PDL release are given in
examples/perl/README.perldemos. Doug has also finished implementing a
complete set of standard examples in Perl/PDL which are part of PLplot and
which produce identical results to their C counterparts if the above updated
module has been installed.  Our build system tests the version of
PDL::Graphics::PLplot that is available, and if it is not 0.46 or later, the
list of Perl/PDL examples that are run as part of our standard tests is
substantially reduced to avoid examples that use the new functionality.  In
sum, if you use PDL::Graphics::PLplot version 0.46 or later the full
complement of PLplot commands is available to you from Perl/PDL, but
otherwise not.

2.17 Updates to various language bindings

A concerted effort has been made to bring all the language bindings up to
date with recently added functions. Ada, C++, f77, f95, Java, OCaml, Octave, 
Perl/PDL, Python, and Tcl now all support the common PLplot API (with the 
exception of the mapping functions which are not yet implemented for all 
bindings due to technical issues.) This is a significant step forward for 
those using languages other than C.

2.18 Updates to various examples

To help test the updates to the language bindings the examples have been 
thoroughly checked. Ada, C, C++, f77, f95, and OCaml now contain a full set
of non-interactive tests (examples 1-31 excluding 14 and 17). Java, Octave,
Python and Tcl are missing example 19 because of the issue with the mapping
functions. The examples have also been checked to ensure consistent results
between different language bindings. Currently there are still some minor
differences in the results for the tcl examples, probably due to rounding
errors.  Some of the Tcl examples (example 21) require Tcl version 8.5 for
proper support for NaNs.

Also new is an option for the plplot_test.sh script to run the examples 
using a debugging command. This is enabled using the --debug option. The
default it to use the valgrind memory checker. This has highlighted at 
least one memory leaks in plplot which have been fixed. It is not part 
of the standard ctest tests because it can be _very_ slow for a complete
set of language bindings and device drivers.

2.19 Extension of our test framework

The standard test suite for PLplot now carries out a comparison of the
stdout output (especially important for example 31 which tests most of our
set and get functions) and PostScript output for different languages as a
check.  Thanks to the addition of example 31, the inclusion of examples 14
and 17 in the test suite and other recent extensions of the other 
examples we now have rigourous testing in place for almost the entirety 
of our common API.  This extensive testing framework has already helped 
us track down a number of bugs, and it should make it much easier for us 
to maintain high quality for our ongoing PLplot releases.

2.20 Rename test subdirectory to plplot_test

This change was necessary to quit clashing with the "make test" target which
now works for the first time ever (by executing ctest).

2.21 Website support files updated

Our new website content is generated with PHP and uses CSS (cascaded style
sheets) to implement a consistent style.  This new approach demanded lots of
changes in the website support files that are used to generate and upload
our website and which are automatically included with the release.

2.22 Internal changes to function visibility

The internal definitions of functions in plplot have been significantly 
tidied up to allow the use of the -fvisibility=hidden option with newer
versions of gcc. This prevents internal functions from being exported
to the user where possible. This extends the existing support for this
on windows.

2.23 Dynamic driver support in Windows

An interface based on the ltdl library function calls was established
which allows to open and close dynamic link libraries (DLL) during
run-time and call functions from these libraries. As a consequence
drivers can now be compiled into single DLLs separate from the core
plplot DLL also in Windows. The cmake option ENABLE_DYNDRIVERS is now
ON by default for Windows if a shared plplot library is built.

2.24 Documentation updates

The docbook documentation has been updated to include many of the 
C-specific functions (for example plAlloc2dGrid) which are not part 
of the common API, but are used in the examples and may be helpful 
for plplot users.

2.25 libnistcd (a.k.a. libcd) now built internally for -dev cgm

CGM format is a long-established (since 1987) open standard for vector
graphics that is supported by w3c (see http://www.w3.org/Graphics/WebCGM/).
PLplot has long had a cgm device driver which depended on the (mostly) 
public domain libcd library that was distributed in the mid 90's by National
Institute of Standards and Technology (NIST) and which is still available
from http://www.pa.msu.edu/ftp/pub/unix/cd1.3.tar.gz.  As a convenience
to our -dev cgm users, we have brought that
source code in house under lib/nistcd and now build libnistcd routinely
as part of our ordinary builds.  The only changes we have made to the
cd1.3 source code is visibility changes in cd.h and swapping the sense of
the return codes for the test executables so that 0 is returned on success
and 1 on failure.  If you want to test libnistcd on your platform,
please run

make test_nistcd

in the top-level build tree.  (That tests runs all the test executables
that are built as part of cd1.3 and compares the results that are generated
with the *.cgm files that are supplied as part of cd1.3.)

Two applications that convert and/or display CGM results on Linux are
ralcgm (which is called by the ImageMagick convert and display applications)
and uniconvertor.

Some additional work on -dev cgm is required to implement antialiasing and
non-Hershey fonts, but both those should be possible using libnistcd according
to the text that is shown by lib/nistcd/cdtext.cgm and lib/nistcd/cdexp1.cgm.

2.26 get-drv-info now changed to test-drv-info

To make cross-building much easier for PLplot we now configure the *.rc
files that are used to describe our various dynamic devices rather than
generating the required *.rc files with get-drv-info.  We have changed the
name of get-drv-info to test-drv-info.  That name is more appropriate
because that executable has always tested dynamic loading of the driver
plug-ins as well as generating the *.rc files from the information gleaned
from that dynamic loading.  Now, we simply run test-drv-info as an option
(defaults to ON unless cross-building is enabled) and compare the resulting
*.rc file with the one configured by cmake to be sure the dynamic device
has been built correctly.

2.27 Text clipping now enabled by default for the cairo devices

When correct text clipping was first implemented for cairo devices, it was
discovered that the libcairo library of that era (2007-08) did that clipping
quite inefficiently so text clipping was disabled by default.  Recent tests
of text clipping for the cairo devices using libcairo 1.6.4 (released in
2008-04) shows text clipping is quite efficient now.  Therefore, it is now
enabled by default.  If you notice a significant slowdown for some libcairo
version prior to 1.6.4 you can use the option -drvopt text_clipping=0 for
your cairo device plots (and accept the improperly clipped text results that
might occur with that option).  Better yet, use libcairo 1.6.4 or later.

2.28 A powerful qt device driver has been implemented

Thanks to the efforts of Alban Rochel of the QSAS team, we now have a qt
device driver which delivers the following 9 (!) devices: qtwidget, bmpqt,
jpgqt, pngqt, ppmqt, tiffqt, epsqt, pdfqt, and svgqt. qtwidget is an
elementary interactive device where, for now, the possible interactions
consist of resizing the window and right clicking with the mouse to control
paging.  The qtwidget overall size is expressed in pixels. bmpqt, jpgqt,
pngqt, ppmqt, and tiffqt are file devices whose overal sizes are specified
in pixels and whose output is BMP (Windows bitmap), JPEG, PNG, PPM (portable
pixmap), and TIFF (tagged image file format) formatted files. epsqt, pdfqt,
svgqt are file devices whose overall sizes are specified in points (1/72 of
an inch) and whose output is EPS (encapsulated PostScript), PDF, and SVG
formatted files.  The qt device driver is based on the powerful facilities
of Qt4 so all qt devices implement variable opacity (alpha channel) effects
(see example 30).  The qt devices also use system unicode fonts, and deal
with CTL (complex text layout) languages automatically without any
intervention required by the user.  (To show this, try qt device results
from examples 23 [mathematical symbols] and 24 [CTL languages].)

Our exhaustive Linux testing of the qt devices (which consisted of detailed
comparisons for all our standard examples between qt device results and the
corresponding cairo device results) indicates this device driver is mature,
but testing on other platforms is requested to confirm that maturity.
Qt-4.5 has some essential SVG functionality so we recommend that
version (downloadable from http://www.qtsoftware.com/downloads for Linux,
Mac OS X, and Windows) for svgqt.  Qt-4.5 is the version we have used for
most of our testing, but limited testing for Qt-4.4 indicates that version
should be fine for qt devices other than svgqt.

2.29 The PLplot API is now accessible from Qt GUI applications

This important new feature has been implemented by Alban Rochel of the QSAS
team as a spin-off of the qt device driver project using the extqt device
(which constitutes the tenth qt device).  See examples/c++/README.qt_example
for a brief description of a simple Qt example which accesses the PLplot API
and which is built in the installed examples tree using the pkg-config
approach. Our build system has been enhanced to configure the necessary
plplotd-qt.pc file.

2.30 NaN / Inf support for some PLplot functions

Some PLplot now correctly handle Nan or Inf values in the data to be plotted.
Line plotting (plline etc) and image plotting (plimage, plimagefr) will 
now ignore NaN / Inf values. Currently some of the contour plotting / 3-d 
routines do not handle NaN / Inf values. This functionality will 
depend on whether the language binding used supports NaN / Inf values.


PLplot Release 5.9.2
~~~~~~~~~~~~~~~~~~~~
This is a development release of PLplot. It represents the ongoing efforts
of the community to improve the PLplot plotting package. Development 
releases in the 5.9.x series will be available every few months. The next 
stable release will be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.


Notices for Users.

I. This is the official notice that our deprecated autotools-based build
system has been removed as of release 5.9.1.  Instead, use the CMake-based
build system following the directions in the INSTALL file.

II. This is official notice that the tk, itk, and itcl components of PLplot
have been disabled by default as of 5.9.1.  We reluctantly took this step
for these venerable PLplot components because we found segfaults with most
of our Tk-related interactive tests for this release which we have been, as
yet, unable to address. For now, if you want to try these components of
PLplot to help us debug the problem, you must specifically use the cmake
options -DENABLE_tk=ON -DENABLE_itk=ON -DENABLE_itcl=ON to build and install
these components.

III. This is official notice that we (as of 5.9.1) no longer support
Octave-2.1.73 which has a variety of run-time issues in our tests of the
Octave examples on different platforms.  In contrast our tests show we get
good run-time results with all our Octave examples for Octave-3.0.1. Also,
that is the recommended stable version of Octave at
http://www.gnu.org/software/octave/download.html so that is the only version
of Octave we support at this time.

IV.  This is official notice that the PLplot team have decided (as of
release 5.9.1) for consistency sake to change the PLplot stream variables
plsc->vpwxmi, plsc->vpwxma, plsc->vpwymi, and plsc->vpwyma and the results
returned by plgvpw to reflect the exact window limit values input by users
using plwind. Previously to this change, the stream variables and the values
returned by plgvpw reflected the internal slightly expanded range of window
limits used by PLplot so that the user's specified limits would be on the
graph.  Two users noted this slight difference, and we agree with them it
should not be there. Note that internally, PLplot still uses the expanded
ranges so most users results will be identical.  However, you may notice
some small changes to your plot results if you use these stream variables
directly (only possible in C/C++) or use plgvpw.

INDEX

1. Changes relative to PLplot 5.9.1 (the previous development release)

1.1 Extension of our test framework

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed
2.2 Build system bug fixes
2.3 Build system improvements
2.4 Implement build-system infrastructure for installed Ada bindings and 
examples
2.5 Code cleanup 
2.6 Date / time labels for axes
2.7 Alpha value support
2.8 New PLplot functions
2.9 External libLASi library improvements affecting our psttf device.
2.10 Improvements to the cairo driver family.
2.11 wxWidgets driver improvements
2.12 pdf driver improvements
2.13 svg driver improvements
2.14 Ada language support
2.15 OCaml language support
2.16 Perl/PDL language support
2.17 Update to various language bindings
2.18 Update to various examples
2.19 Extension of our test framework
2.20 Rename test subdirectory to plplot_test
2.21 Website support files updated
2.22 Internal changes to function visibility
2.23 Dynamic driver support in Windows
2.24 Documentation updates


1. Changes relative to PLplot 5.9.1 (the previous development release)

1.1 Extension of our test framework

The standard test suite for PLplot now carries out a comparison of the
stdout output (especially important for example 31 which tests most of our
set and get functions) and PostScript output for different languages as a
check.  Thanks to the addition of example 31, the inclusion of examples 14
and 17 in the test suite and other recent extensions of the other 
examples we now have rigourous testing in place for almost the entirety 
of our common API.  This extensive testing framework has already helped 
us track down a number of bugs, and it should make it much easier for us 
to maintain high quality for our ongoing PLplot releases.

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed

CMake (with the exception of a special build script for the DJGPP platform)
is now the only supported build system. It has been tested on Linux / Unix,
Mac OS-X and Windows platforms.

2.2 Build system bug fixes

Various fixes include the following:

Ctest will now work correctly when the build tree path includes symlinks.

Dependencies for swig generated files fixed so they are not rebuilt every 
time make is called.

Various dependency fixes to ensure that parallel builds (using make -j) 
work under unix.

2.3 Build system improvements

We now transform link flag results delivered to the CMake environment by
pkg-config into the preferred CMake form of library information.  The
practical effect of this improvement is that external libraries in
non-standard locations now have their rpath options set correctly for our
build system both for the build tree and the install tree so you don't have
to fiddle with LD_LIBRARY_PATH, etc.

2.4 Implement build-system infrastructure for installed Ada bindings and 
examples

Install source files, library information files, and the plplotada library
associated with the Ada bindings.  Configure and install the pkg-config file
for the plplotada library.  Install the Ada examples and a configured Makefile
to build them in the install tree.

2.5 Code cleanup

The PLplot source code has been cleaned up to make consistent use of 
(const char *) and (char *) throughout. Some API functions have changed 
to use const char * instead of char * to make it clear that the strings 
are not modified by the function. The C and C++ examples have been updated
consistent with this. These changes fix a large number of warnings 
with gcc-4.2. Note: this should not require programs using PLplot to be 
recompiled as it is not a binary API change.

There has also been some cleanup of include files in the C++ examples
so the code will compile with the forthcoming gcc-4.3.

2.6 Date / time labels for axes
  
PLplot now allows date / time labels to be used on axes. A new option 
('d') is available for the xopt and yopt arguments to plbox which 
indicates that the axis should be interpreted as a date / time. Similarly
there is a new range of options for plenv to select date / time labels. 
The time format is seconds since the epoch (usually 1 Jan 1970). This 
format is commonly used on most systems. The C gmtime routine can be 
used to calculate this for a given date and time. The format for the 
labels is controlled using a new pltimefmt function, which takes a 
format string. All formatting is done using the C strftime function. 
See documentation for available options on your platform. Example 29 
demonstrates the new capabilities.

N.B. Our reliance on C library POSIX time routines to (1) convert from
broken-down time to time-epoch, (2) to convert from time-epoch to
broken-down time, and (3) to format results with strftime have proved
problematic for non-C languages which have time routines of variable
quality.  Also, it is not clear that even the POSIX time routines are
available on Windows. So we have plans afoot to implement high-quality
versions of (1), (2), and (3) with additional functions to get/set the epoch
in the PLplot core library itself.  These routines should work on all C
platforms and should also be uniformly accessible for all our language
bindings. 

WARNING.....  Therefore, assuming these plans are implemented, the present
part of our date/time PLplot API that uses POSIX time routines will be
changed.

2.7 Alpha value support

PLplot core has been modified to support a transparency or alpha value
channel for each color in color map 0 and 1. In addition a number of new
functions were added the PLplot API so that the user can both set and query
alpha values for color in the two color maps. These functions have the same
name as their non-alpha value equivalents, but with a an "a" added to the
end. Example 30 demonstrates some different ways to use these functions
and the effects of alpha values, at least for those drivers that support alpha
values. This change should have no effect on the device drivers that do not 
currently support alpha values. Currently only the cairo, gd, wxwidgets and
aquaterm drivers support alpha values. There are some limitations with the gd 
driver due to transparency support in the underlying libgd library.

2.8 New PLplot functions

An enhanced version of plimage, plimagefr has been added. This allows images
to be plotted using coordinate transformation, and also for the dynamic range
of the plotted values to be altered. Example 20 has been modified to 
demonstrate this new functionality. 

To ensure consistent results in example 21 between different platforms and 
language bindings PLplot now includes a small random number generator within
the library. plrandd will return a PLFLT random number in the range 0.0-1.0. 
plseed will allow the random number generator to be seeded.

2.9 External libLASi library improvements affecting our psttf device.

Our psttf device depends on the libLASi library. libLASi-1.1.0 has just been
released at http://sourceforge.net/svn/?group_id=187113 .  We recommend
using this latest version of libLASi for building PLplot and the psttf
device since this version of libLASi is more robust against glyph
information returned by pango/cairo/fontconfig that on rare occasions is not
suitable for use by libLASi.

2.10 Improvements to the cairo driver family.

Jonathan Woithe improved the xcairo driver so that it can optionally be 
used with an external user supplied X Drawable. This enables a nice 
separation of graphing (PLplot) and window management (Gtk, etc..). Doug 
Hunt fixed the bugs that broke the memcairo driver and it is now fully
functional. Additionally, a new extcairo driver was added that will plot
into a user supplied cairo context.

2.11 wxWidgets driver improvements

Complete reorganization of the driver code. A new backend was added, based
on the wxGraphicsContext class, which is available for wxWidgets 2.8.4
and later. This backend produces antialized output similar to the
AGG backend but has no dependency on the AGG library. The basic wxDC
backend and the wxGraphicsContext backend process the text output
on their own, which results in much nicer plots than with the standard
Hershey fonts and is much faster than using the freetype library. New
options were introduced in the wxWidgets driver:
 - backend: Choose backend: (0) standard, (1) using AGG library,
                            (2) using wxGraphicsContext
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - text: Use own text routines (text=0|1)
 - freetype: Use FreeType library (freetype=0|1)
The option "text" changed its meaning, since it enabled the FreeType library
support, while now the option enables the driver's own text routines.

Some other features were added:
 * the wxWidgets driver now correctly clears the background (or parts of it)
 * transparency support was added
 * the "locate mode" (already availale in the xwin and tk driver) was
   implemented, where graphics input events are processed and translated
   to world coordinates

2.12 pdf driver improvements

The pdf driver (which is based on the haru library http://www.libharu.org)
processes the text output now on its own. So far only the Adobe Type1
fonts are supported. TrueType font support will follow. Full unicode
support will follow after the haru library will support unicode strings. The
driver is now able to produce A4, letter, A5 and A3 pages. The Hershey font
may be used only for symbols. Output can now be compressed, resulting in 
much smaller file sizes.
Added new options:
 - text: Use own text routines (text=0|1)
 - compress: Compress pdf output (compress=0|1)
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - pagesize: Set page size (pagesize=A4|letter|A3|A5)
 
2.13 svg driver improvements

This device driver has had the following improvements: schema for generated
file now validates properly at http://validator.w3.org/ for the
automatically detected document type of SVG 1.1; -geometry option now works;
alpha channel transparency has been implemented; file familying for
multipage examples has been implemented; coordinate scaling has been
implemented so that full internal PLplot resolution is used; extraneous
whitespace and line endings that were being injected into text in error have
now been removed; and differential correction to string justification is now
applied.  

The result of these improvements is that our SVG device now gives the
best-looking results of all our devices.  However, currently you must be
careful of which SVG viewer or editor you try because a number of them have
some bugs that need to be resolved.  For example, there is a librsvg bug in
text placement (http://bugzilla.gnome.org/show_bug.cgi?id=525023) that
affects all svg use within GNOME as well as the ImageMagick "display"
application.  However, at least the latest konqueror and firefox as well as
inkscape and scribus-ng (but not scribus!) give outstanding looking results
for files generated by our svg device driver.

2.14 Ada language support

We now have a complete Ada bindings implemented for PLplot. We also have a
complete set of our standard examples implemented in Ada which give results
that are identical with corresponding results for the C standard examples.
This is an excellent test of a large subset of the Ada bindings. We now
enable Ada by default for our users and request widespread testing of this
new feature.

2.15 OCaml language support

Thanks primarily to Hezekiah M. Carty's efforts we now have a complete OCaml
bindings implemented for PLplot. We also have a complete set of our standard
examples implemented in OCaml which give results that are identical with
corresponding results for the C standard examples. This is an excellent test
of a large subset of the OCaml bindings. We now enable OCaml by default for
our users and request widespread testing of this new feature.

2.16 Perl/PDL language support

Thanks to Doug Hunt's efforts the external Perl/PDL module,
PDL::Graphics::PLplot version 0.46 available at
http://search.cpan.org/dist/PDL-Graphics-PLplot has been brought up to date
to give access to recently added PLplot API.  The instructions for how to
install this module on top of an offical PDL release are given in
examples/perl/README.perldemos. Doug has also finished implementing a
complete set of standard examples in Perl/PDL which are part of PLplot and
which produce identical results to their C counterparts if the above updated
module has been installed.  Our build system tests the version of
PDL::Graphics::PLplot that is available, and if it is not 0.46 or later, the
list of Perl/PDL examples that are run as part of our standard tests is
substantially reduced to avoid examples that use the new functionality.  In
sum, if you use PDL::Graphics::PLplot version 0.46 or later the full
complement of PLplot commands is available to you from Perl/PDL, but
otherwise not.

2.17 Updates to various language bindings

A concerted effort has been made to bring all the language bindings up to
date with recently added functions. Ada, C++, f77, f95, Java, OCaml, Octave, 
Perl/PDL, Python, and Tcl now all support the common PLplot API (with the 
exception of the mapping functions which are not yet implemented for all 
bindings due to technical issues.) This is a significant step forward for 
those using languages other than C.

2.18 Updates to various examples

To help test the updates to the language bindings the examples have been 
thoroughly checked. Ada, C, C++, f77, f95, and OCaml now contain a full set
of non-interactive tests (examples 1-31 excluding 14 and 17). Java, Octave,
Python and Tcl are missing example 19 because of the issue with the mapping
functions. The examples have also been checked to ensure consistent results
between different language bindings. Currently there are still some minor
differences in the results for the tcl examples, probably due to rounding
errors.  Some of the Tcl examples (example 21) require Tcl version 8.5 for
proper support for NaNs.

Also new is an option for the plplot_test.sh script to run the examples 
using a debugging command. This is enabled using the --debug option. The
default it to use the valgrind memory checker. This has highlighted at 
least one memory leaks in plplot which have been fixed. It is not part 
of the standard ctest tests because it can be _very_ slow for a complete
set of language bindings and device drivers.

2.19 Extension of our test framework

The standard test suite for PLplot now carries out a comparison of the
stdout output (especially important for example 31 which tests most of our
set and get functions) and PostScript output for different languages as a
check.  Thanks to the addition of example 31, the inclusion of examples 14
and 17 in the test suite and other recent extensions of the other 
examples we now have rigourous testing in place for almost the entirety 
of our common API.  This extensive testing framework has already helped 
us track down a number of bugs, and it should make it much easier for us 
to maintain high quality for our ongoing PLplot releases.

2.20 Rename test subdirectory to plplot_test

This change was necessary to quit clashing with the "make test" target which
now works for the first time ever (by executing ctest).

2.21 Website support files updated

Our new website content is generated with PHP and uses CSS (cascaded style
sheets) to implement a consistent style.  This new approach demanded lots of
changes in the website support files that are used to generate and upload
our website and which are automatically included with the release.

2.22 Internal changes to function visibility

The internal definitions of functions in plplot have been significantly 
tidied up to allow the use of the -fvisibility=hidden option with newer
versions of gcc. This prevents internal functions from being exported
to the user where possible. This extends the existing support for this
on windows.

2.23 Dynamic driver support in Windows

An interface based on the ltdl library function calls was established
which allows to open and close dynamic link libraries (DLL) during
run-time and call functions from these libraries. As a consequence
drivers can now be compiled into single DLLs separate from the core
plplot DLL also in Windows. The cmake option ENABLE_DYNDRIVERS is now
ON by default for Windows if a shared plplot library is built.

2.24 Documentation updates

The docbook documentation has been updated to include many of the 
C-specific functions (for example plAlloc2dGrid) which are not part 
of the common API, but are used in the examples and may be helpful 
for plplot users.


PLplot Release 5.9.1
~~~~~~~~~~~~~~~~~~~~
This is a development release of PLplot. It represents the ongoing efforts
of the community to improve the PLplot plotting package. Development 
releases in the 5.9.x series will be available every few months. The next 
stable release will be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.

Notices for Users.

I. This is the official notice that our deprecated autotools-based build
system has now been removed.  Instead, use the CMake-based build system
following the directions in the INSTALL file.

II. This is official notice that the tk, itk, and itcl components of PLplot
have been disabled by default for this release.  We reluctantly take this
step for these venerable PLplot components because we found segfaults with
most of our Tk-related interactive tests for this release.  We hope these
issues are addressed before our next release so that the tk, itk, and itcl
components of PLplot can be enabled by default again.  For now, if you want
to try these components of PLplot to help us debug the problem, you must
specifically use the cmake options -DENABLE_tk=ON -DENABLE_itk=ON
-DENABLE_itcl=ON to build and install these components.

III. This is official notice that the python version of gnome2 has been
temporarily disabled by default until we can figure out a

RuntimeError: maximum recursion depth exceeded

error that has been introduced for it (e.g., when running
plplotcanvas_animation.py in the installed examples/python directory).  If
you wish to experiment with this component of PLplot use the
-DENABLE_pygcw=ON option.  

examples/c/plplotcanvas_animation (when built in the install tree for the
default ENABLE_gnome2=ON case) works fine.  So do all the standard examples
in the installed examples/python tree.  So this issue appears to be confined
just to the python version of gnome2.

IV. This is official notice that we no longer support Octave-2.1.73 which
has a variety of run-time issues in our tests of the Octave examples on
different platforms.  In contrast our tests show we get good run-time
results with all our Octave examples for Octave-3.0.1. Also, that is the
recommended stable version of Octave at
http://www.gnu.org/software/octave/download.html so that is the only version
of Octave we support at this time.

V.  This is official notice that the PLplot team have decided for
consistency sake to change the PLplot stream variables plsc->vpwxmi,
plsc->vpwxma, plsc->vpwymi, and plsc->vpwyma and the results returned by
plgvpw to reflect the exact window limit values input by users using plwind.
Previously to this change, the stream variables and the values returned by
plgvpw reflected the internal slightly expanded range of window limits used
by PLplot so that the user's specified limits would be on the graph.  Two
users noted this slight difference, and we agree with them it should not be
there. Note that internally, PLplot still uses the expanded ranges so most
users results will be identical.  However, you may notice some small changes
to your plot results if you use these stream variables directly (only
possible in C/C++) or use plgvpw.

INDEX

1. Changes relative to PLplot 5.9.0 (the previous development release)
1.1 New PLplot functions
1.2 Improvements to the cairo driver family.
1.3 wxWidgets driver improvements
1.4 pdf driver improvements
1.5 svg driver improvements
1.6 Ada language support
1.7 OCaml language support
1.8 Perl/PDL language support
1.9 Update to various language bindings
1.10 Update to various examples
1.11 Rename test subdirectory to plplot_test
1.12 Website support files updated
1.13 Internal changes to function visibility
1.14 Dynamic driver support in Windows
1.15 Documentation updates

2. Changes relative to PLplot 5.8.0 (the previous stable release)
2.1 All autotools-related files have now been removed
2.2 Build system bug fixes
2.3 Build system improvements
2.4 Implement build-system infrastructure for installed Ada bindings and 
examples
2.5 Code cleanup 
2.6 Date / time labels for axes
2.7 Alpha value support
2.8 New PLplot functions
2.9 External libLASi library improvements affecting our psttf device.
2.10 Improvements to the cairo driver family.
2.11 wxWidgets driver improvements
2.12 pdf driver improvements
2.13 svg driver improvements
2.14 Ada language support
2.15 OCaml language support
2.16 Perl/PDL language support
2.17 Update to various language bindings
2.18 Update to various examples
2.19 Rename test subdirectory to plplot_test
2.20 Website support files updated
2.21 Internal changes to function visibility
2.22 Dynamic driver support in Windows
2.23 Documentation updates

1. Changes relative to PLplot 5.9.0 (the previous development release)

1.1 New PLplot functions

An enhanced version of plimage, plimagefr has been added. This allows images
to be plotted using coordinate transformation, and also for the dynamic range
of the plotted values to be altered. Example 20 has been modified to 
demonstrate this new functionality. 

To ensure consistent results in example 21 between different platforms and 
language bindings PLplot now includes a small random number generator (based
on the original Mersenne Twister 1997 code) within the library. plrandd will
return a PLFLT random number in the range 0.0-1.0. plseed will allow the
random number generator to be seeded.

1.2 Improvements to the cairo driver family.

Jonathan Woithe improved the xcairo driver so that it can optionally be 
used with an external user supplied X Drawable. This enables a nice 
separation of graphing (PLplot) and window management (Gtk, etc..). Doug 
Hunt fixed the bugs that broke the memcairo driver and it is now fully
functional. Additionally, a new extcairo driver was added that will plot
into a user supplied cairo context.

1.3 wxWidgets driver improvements

Complete reorganization of the driver code. A new backend was added, based
on the wxGraphicsContext class, which is available for wxWidgets 2.8.4
and later. This backend produces antialized output similar to the
AGG backend but has no dependency on the AGG library. The basic wxDC
backend and the wxGraphicsContext backend process the text output
on their own, which results in much nicer plots than with the standard
Hershey fonts and is much faster than using the freetype library. New
options were introduced in the wxWidgets driver:
 - backend: Choose backend: (0) standard, (1) using AGG library,
                            (2) using wxGraphicsContext
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - text: Use own text routines (text=0|1)
 - freetype: Use FreeType library (freetype=0|1)
The option "text" changed its meaning, since it enabled the FreeType library
support, while now the option enables the driver's own text routines.

Some other features were added:
 * the wxWidgets driver now correctly clears the background (or parts of it)
 * transparency support was added
 * the "locate mode" (already availale in the xwin and tk driver) was
   implemented, where graphics input events are processed and translated
   to world coordinates

1.4 pdf driver improvements

The pdf driver (which is based on the haru library http://www.libharu.org)
processes the text output now on its own. So far only the Adobe Type1
fonts are supported. TrueType font support will follow. Full unicode
support will follow after the haru library will support unicode strings. The
driver is now able to produce A4, letter, A5 and A3 pages. The Hershey font
may be used only for symbols. Output can now be compressed, resulting in 
much smaller file sizes.
Added new options:
 - text: Use own text routines (text=0|1)
 - compress: Compress pdf output (compress=0|1)
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - pagesize: Set page size (pagesize=A4|letter|A3|A5)
 
1.5 svg driver improvements

This device driver has had the following improvements: schema for generated
file now validates properly at http://validator.w3.org/ for the
automatically detected document type of SVG 1.1; -geometry option now works;
alpha channel transparency has been implemented; file familying for
multipage examples has been implemented; coordinate scaling has been
implemented so that full internal PLplot resolution is used; extraneous
whitespace and line endings that were being injected into text in error have
now been removed; and differential correction to string justification is now
applied.  

The result of these improvements is that our SVG device now gives the
best-looking results of all our devices.  However, currently you must be
careful of which SVG viewer or editor you try because a number of them have
some bugs that need to be resolved.  For example, there is a librsvg bug in
text placement (http://bugzilla.gnome.org/show_bug.cgi?id=525023) that
affects all svg use within GNOME as well as the ImageMagick "display"
application.  However, at least the latest konqueror and firefox as well as
inkscape and scribus-ng (but not scribus!) give outstanding looking results
for files generated by our svg device driver.

1.6 Ada language support

We now have a complete Ada bindings implemented for PLplot. We also have a
complete set of our standard examples implemented in Ada which give results
that are identical with corresponding results for the C standard examples.
This is an excellent test of a large subset of the Ada bindings. We now
enable Ada by default for our users and request widespread testing of this
new feature.

1.7 OCaml language support

Thanks primarily to Hezekiah M. Carty's efforts we now have a complete OCaml
bindings implemented for PLplot. We also have a complete set of our standard
examples implemented in OCaml which give results that are identical with
corresponding results for the C standard examples. This is an excellent test
of a large subset of the OCaml bindings. We now enable OCaml by default for
our users and request widespread testing of this new feature.

1.8 Perl/PDL language support

Thanks to Doug Hunt's efforts the external Perl/PDL module,
PDL::Graphics::PLplot version 0.46 available at
http://search.cpan.org/dist/PDL-Graphics-PLplot has been brought up to date
to give access to recently added PLplot API.  The instructions for how to
install this module on top of an offical PDL release are given in
examples/perl/README.perldemos. Doug has also finished implementing a
complete set of standard examples in Perl/PDL which are part of PLplot and
which produce identical results to their C counterparts if the above updated
module has been installed.  Our build system tests the version of
PDL::Graphics::PLplot that is available, and if it is not 0.46 or later, the
list of Perl/PDL examples that are run as part of our standard tests is
substantially reduced to avoid examples that use the new functionality.  In
sum, if you use PDL::Graphics::PLplot version 0.46 or later the full
complement of PLplot commands is available to you from Perl/PDL, but
otherwise not.

1.9 Updates to various language bindings

A concerted effort has been made to bring all the language bindings up to
date with recently added functions. Ada, C++, f77, f95, Java, OCaml, Octave, 
Perl/PDL, Python, and Tcl now all support the common PLplot API (with the 
exception of the mapping functions which are not yet implemented for all 
bindings due to technical issues.) This is a significant step forward for 
those using languages other than C.

1.10 Updates to various examples

To help test the updates to the language bindings the examples have been 
thoroughly checked. Ada, C, C++, f77, f95, and OCaml now contain a full set
of non-interactive tests (example 1-30 excluding 14 and 17). Java, Octave,
Python and Tcl are missing example 19 because of the issue with the mapping
functions. The examples have also been checked to ensure consistent results
between different language bindings. Currently there are still some minor
differences in the results for the tcl examples, probably due to rounding
errors. The standard test suite for PLplot using ctest now carries out a
comparison of the postscript output for different languages as a check. Some
of the Tcl examples (example 21) require Tcl version 8.5 for proper support
for NaNs.

Also new is an option for the plplot_test.sh script to run the examples 
using a debugging command. This is enabled using the --debug option. The
default it to use the valgrind memory checker. This has highlighted at 
least one memory leaks in plplot which have been fixed. It is not part 
of the standard ctest tests because it can be _very_ slow for a complete
set of language bindings and device drivers.

1.11 Rename test subdirectory to plplot_test

This change was necessary to quit clashing with the "make test" target which
now works for the first time ever (by executing ctest).

1.12 Website support files updated

Our new website content is generated with PHP and uses CSS (cascaded style
sheets) to implement a consistent style.  This new approach demanded lots of
changes in the website support files that are used to generate and upload
our website and which are automatically included with the release.

1.13 Internal changes to function visibility

The internal definitions of functions in plplot have been significantly 
tidied up to allow the use of the -fvisibility=hidden option with newer
versions of gcc. This prevents internal functions from being exported
to the user where possible. This extends the existing support for this
on windows.

1.14 Dynamic driver support in Windows

An interface based on the ltdl library function calls was established
which allows to open and close dynamic link libraries (DLL) during
run-time and call functions from these libraries. As a consequence
drivers can now be compiled into single DLLs separate from the core
plplot DLL also in Windows. The cmake option ENABLE_DYNDRIVERS is now
ON by default for Windows if a shared plplot library is built.

1.15 Documentation updates

The docbook documentation has been updated to include many of the 
C-specific functions (for example plAlloc2dGrid) which are not part 
of the common API, but are used in the examples and may be helpful 
for plplot users.

2. Changes relative to PLplot 5.8.0 (the previous stable release)

2.1 All autotools-related files have now been removed

CMake (with the exception of a special build script for the DJGPP platform)
is now the only supported build system. It has been tested on Linux / Unix,
Mac OS-X and Windows platforms.

2.2 Build system bug fixes

Various fixes include the following:

Ctest will now work correctly when the build tree path includes symlinks.

Dependencies for swig generated files fixed so they are not rebuilt every 
time make is called.

Various dependency fixes to ensure that parallel builds (using make -j) 
work under unix.

2.3 Build system improvements

We now transform link flag results delivered to the CMake environment by
pkg-config into the preferred CMake form of library information.  The
practical effect of this improvement is that external libraries in
non-standard locations now have their rpath options set correctly for our
build system both for the build tree and the install tree so you don't have
to fiddle with LD_LIBRARY_PATH, etc.

2.4 Implement build-system infrastructure for installed Ada bindings and 
examples

Install source files, library information files, and the plplotada library
associated with the Ada bindings.  Configure and install the pkg-config file
for the plplotada library.  Install the Ada examples and a configured Makefile
to build them in the install tree.

2.5 Code cleanup

The PLplot source code has been cleaned up to make consistent use of 
(const char *) and (char *) throughout. Some API functions have changed 
to use const char * instead of char * to make it clear that the strings 
are not modified by the function. The C and C++ examples have been updated
consistent with this. These changes fix a large number of warnings 
with gcc-4.2. Note: this should not require programs using PLplot to be 
recompiled as it is not a binary API change.

There has also been some cleanup of include files in the C++ examples
so the code will compile with the forthcoming gcc-4.3.

2.6 Date / time labels for axes
  
PLplot now allows date / time labels to be used on axes. A new option 
('d') is available for the xopt and yopt arguments to plbox which 
indicates that the axis should be interpreted as a date / time. Similarly
there is a new range of options for plenv to select date / time labels. 
The time format is seconds since the epoch (usually 1 Jan 1970). This 
format is commonly used on most systems. The C gmtime routine can be 
used to calculate this for a given date and time. The format for the 
labels is controlled using a new pltimefmt function, which takes a 
format string. All formatting is done using the C strftime function. 
See documentation for available options on your platform. Example 29 
demonstrates the new capabilities.

N.B. Our reliance on C library POSIX time routines to (1) convert from
broken-down time to time-epoch, (2) to convert from time-epoch to
broken-down time, and (3) to format results with strftime have proved
problematic for non-C languages which have time routines of variable
quality.  Also, it is not clear that even the POSIX time routines are
available on Windows. So we have plans afoot to implement high-quality
versions of (1), (2), and (3) with additional functions to get/set the epoch
in the PLplot core library itself.  These routines should work on all C
platforms and should also be uniformly accessible for all our language
bindings. 

WARNING.....  Therefore, assuming these plans are implemented, the present
part of our date/time PLplot API that uses POSIX time routines will be
changed.

2.7 Alpha value support

PLplot core has been modified to support a transparency or alpha value
channel for each color in color map 0 and 1. In addition a number of new
functions were added the PLplot API so that the user can both set and query
alpha values for color in the two color maps. These functions have the same
name as their non-alpha value equivalents, but with a an "a" added to the
end. Example 30 demonstrates some different ways to use these functions
and the effects of alpha values, at least for those drivers that support alpha
values. This change should have no effect on the device drivers that do not 
currently support alpha values. Currently only the cairo, gd, wxwidgets and
aquaterm drivers support alpha values. There are some limitations with the gd 
driver due to transparency support in the underlying libgd library.

2.8 New PLplot functions

An enhanced version of plimage, plimagefr has been added. This allows images
to be plotted using coordinate transformation, and also for the dynamic range
of the plotted values to be altered. Example 20 has been modified to 
demonstrate this new functionality. 

To ensure consistent results in example 21 between different platforms and 
language bindings PLplot now includes a small random number generator within
the library. plrandd will return a PLFLT random number in the range 0.0-1.0. 
plseed will allow the random number generator to be seeded.

2.9 External libLASi library improvements affecting our psttf device.

Our psttf device depends on the libLASi library. libLASi-1.1.0 has just been
released at http://sourceforge.net/svn/?group_id=187113 .  We recommend
using this latest version of libLASi for building PLplot and the psttf
device since this version of libLASi is more robust against glyph
information returned by pango/cairo/fontconfig that on rare occasions is not
suitable for use by libLASi.

2.10 Improvements to the cairo driver family.

Jonathan Woithe improved the xcairo driver so that it can optionally be 
used with an external user supplied X Drawable. This enables a nice 
separation of graphing (PLplot) and window management (Gtk, etc..). Doug 
Hunt fixed the bugs that broke the memcairo driver and it is now fully
functional. Additionally, a new extcairo driver was added that will plot
into a user supplied cairo context.

2.11 wxWidgets driver improvements

Complete reorganization of the driver code. A new backend was added, based
on the wxGraphicsContext class, which is available for wxWidgets 2.8.4
and later. This backend produces antialized output similar to the
AGG backend but has no dependency on the AGG library. The basic wxDC
backend and the wxGraphicsContext backend process the text output
on their own, which results in much nicer plots than with the standard
Hershey fonts and is much faster than using the freetype library. New
options were introduced in the wxWidgets driver:
 - backend: Choose backend: (0) standard, (1) using AGG library,
                            (2) using wxGraphicsContext
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - text: Use own text routines (text=0|1)
 - freetype: Use FreeType library (freetype=0|1)
The option "text" changed its meaning, since it enabled the FreeType library
support, while now the option enables the driver's own text routines.

Some other features were added:
 * the wxWidgets driver now correctly clears the background (or parts of it)
 * transparency support was added
 * the "locate mode" (already availale in the xwin and tk driver) was
   implemented, where graphics input events are processed and translated
   to world coordinates

2.12 pdf driver improvements

The pdf driver (which is based on the haru library http://www.libharu.org)
processes the text output now on its own. So far only the Adobe Type1
fonts are supported. TrueType font support will follow. Full unicode
support will follow after the haru library will support unicode strings. The
driver is now able to produce A4, letter, A5 and A3 pages. The Hershey font
may be used only for symbols. Output can now be compressed, resulting in 
much smaller file sizes.
Added new options:
 - text: Use own text routines (text=0|1)
 - compress: Compress pdf output (compress=0|1)
 - hrshsym: Use Hershey symbol set (hrshsym=0|1)
 - pagesize: Set page size (pagesize=A4|letter|A3|A5)
 
2.13 svg driver improvements

This device driver has had the following improvements: schema for generated
file now validates properly at http://validator.w3.org/ for the
automatically detected document type of SVG 1.1; -geometry option now works;
alpha channel transparency has been implemented; file familying for
multipage examples has been implemented; coordinate scaling has been
implemented so that full internal PLplot resolution is used; extraneous
whitespace and line endings that were being injected into text in error have
now been removed; and differential correction to string justification is now
applied.  

The result of these improvements is that our SVG device now gives the
best-looking results of all our devices.  However, currently you must be
careful of which SVG viewer or editor you try because a number of them have
some bugs that need to be resolved.  For example, there is a librsvg bug in
text placement (http://bugzilla.gnome.org/show_bug.cgi?id=525023) that
affects all svg use within GNOME as well as the ImageMagick "display"
application.  However, at least the latest konqueror and firefox as well as
inkscape and scribus-ng (but not scribus!) give outstanding looking results
for files generated by our svg device driver.

2.14 Ada language support

We now have a complete Ada bindings implemented for PLplot. We also have a
complete set of our standard examples implemented in Ada which give results
that are identical with corresponding results for the C standard examples.
This is an excellent test of a large subset of the Ada bindings. We now
enable Ada by default for our users and request widespread testing of this
new feature.

2.15 OCaml language support

Thanks primarily to Hezekiah M. Carty's efforts we now have a complete OCaml
bindings implemented for PLplot. We also have a complete set of our standard
examples implemented in OCaml which give results that are identical with
corresponding results for the C standard examples. This is an excellent test
of a large subset of the OCaml bindings. We now enable OCaml by default for
our users and request widespread testing of this new feature.

2.16 Perl/PDL language support

Thanks to Doug Hunt's efforts the external Perl/PDL module,
PDL::Graphics::PLplot version 0.46 available at
http://search.cpan.org/dist/PDL-Graphics-PLplot has been brought up to date
to give access to recently added PLplot API.  The instructions for how to
install this module on top of an offical PDL release are given in
examples/perl/README.perldemos. Doug has also finished implementing a
complete set of standard examples in Perl/PDL which are part of PLplot and
which produce identical results to their C counterparts if the above updated
module has been installed.  Our build system tests the version of
PDL::Graphics::PLplot that is available, and if it is not 0.46 or later, the
list of Perl/PDL examples that are run as part of our standard tests is
substantially reduced to avoid examples that use the new functionality.  In
sum, if you use PDL::Graphics::PLplot version 0.46 or later the full
complement of PLplot commands is available to you from Perl/PDL, but
otherwise not.

2.17 Updates to various language bindings

A concerted effort has been made to bring all the language bindings up to
date with recently added functions. Ada, C++, f77, f95, Java, OCaml, Octave, 
Perl/PDL, Python, and Tcl now all support the common PLplot API (with the 
exception of the mapping functions which are not yet implemented for all 
bindings due to technical issues.) This is a significant step forward for 
those using languages other than C.

2.18 Updates to various examples

To help test the updates to the language bindings the examples have been 
thoroughly checked. Ada, C, C++, f77, f95, and OCaml now contain a full set
of non-interactive tests (example 1-30 excluding 14 and 17). Java, Octave,
Python and Tcl are missing example 19 because of the issue with the mapping
functions. The examples have also been checked to ensure consistent results
between different language bindings. Currently there are still some minor
differences in the results for the tcl examples, probably due to rounding
errors. The standard test suite for PLplot using ctest now carries out a
comparison of the postscript output for different languages as a check. Some
of the Tcl examples (example 21) require Tcl version 8.5 for proper support
for NaNs.

Also new is an option for the plplot_test.sh script to run the examples 
using a debugging command. This is enabled using the --debug option. The
default it to use the valgrind memory checker. This has highlighted at 
least one memory leaks in plplot which have been fixed. It is not part 
of the standard ctest tests because it can be _very_ slow for a complete
set of language bindings and device drivers.

2.19 Rename test subdirectory to plplot_test

This change was necessary to quit clashing with the "make test" target which
now works for the first time ever (by executing ctest).

2.20 Website support files updated

Our new website content is generated with PHP and uses CSS (cascaded style
sheets) to implement a consistent style.  This new approach demanded lots of
changes in the website support files that are used to generate and upload
our website and which are automatically included with the release.

2.21 Internal changes to function visibility

The internal definitions of functions in plplot have been significantly 
tidied up to allow the use of the -fvisibility=hidden option with newer
versions of gcc. This prevents internal functions from being exported
to the user where possible. This extends the existing support for this
on windows.

2.22 Dynamic driver support in Windows

An interface based on the ltdl library function calls was established
which allows to open and close dynamic link libraries (DLL) during
run-time and call functions from these libraries. As a consequence
drivers can now be compiled into single DLLs separate from the core
plplot DLL also in Windows. The cmake option ENABLE_DYNDRIVERS is now
ON by default for Windows if a shared plplot library is built.

2.23 Documentation updates

The docbook documentation has been updated to include many of the 
C-specific functions (for example plAlloc2dGrid) which are not part 
of the common API, but are used in the examples and may be helpful 
for plplot users.



PLplot Release 5.9.0
~~~~~~~~~~~~~~~~~~~~
This is a development release of PLplot. It represents the ongoing efforts
of the community to improve the PLplot plotting package. Development 
releases in the 5.9.x series will be available every few months. The next 
stable release will be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.

N.B. This is the official notice that our deprecated autotools-based build
system has now been removed.  Instead, use the CMake-based build system
following the directions in the INSTALL file.

INDEX

1. Changes relative to PLplot 5.8.0 (the previous stable release)

1.1 All autotools-related files have now been removed
1.2 Date / time labels for axes
1.3 Code cleanup 
1.4 Bug fixes
1.5 Alpha value support
1.6 Build system improvements
1.7 Implement build-system infrastructure for installed Ada bindings and 
examples
1.8 WxWidgets driver improvements
1.9 External libLASi library improvements affecting our psttf device.


1.1 All autotools-related files have now been removed

CMake (with the exception of a special build script for the DJGPP platform)
is now the only supported build system. It has been tested on Linux / Unix,
Mac OS-X and Windows platforms.

1.2 Date / time labels for axes
  
Plplot now allows date / time labels to be used on axes. A new option 
('d') is available for the xopt and yopt arguments to plbox which 
indicates that the axis should be interpreted as a date / time. Similarly
there is a new range of options for plenv to select date / time labels. 
The time format is seconds since the epoch (usually 1 Jan 1970). This 
format is commonly used on most systems. The C gmtime routine can be 
used to calculate this for a given date and time. The format for the 
labels is controlled using a new pltimefmt function, which takes a 
format string. All formatting is done using the C strftime function. 
See documentation for available options on your platform. Example 29 
demonstrates the new capabilities.  

1.3 Code cleanup

The plplot source code has been cleaned up to make consistent use of 
(const char *) and (char *) throughout. Some API functions have changed 
to use const char * instead of char * to make it clear that the strings 
are not modified by the function. The C and C++ examples have been updated
consistent with this. These changes fix a large number of warnings 
with gcc-4.2. Note: this should not require programs using plplot to be 
recompiled as it is not a binary API change.

There has also been some cleanup of include files in the C++ examples
so the code will compile with the forthcoming gcc-4.3.

1.4 Bug fixes

Various fixes including:

Ctest will now work correctly when the build tree path includes symlinks.

Dependencies for swig generated files fixed so they are not rebuilt every 
time make is called.

Various dependency fixes to ensure that parallel builds (using make -j) 
work under unix.

1.5 Alpha value support

PLplot core has been modified to support a transparency or alpha value
channel for each color in color map 0 and 1. In addition a number of new
functions were added the PLplot API so that the user can both set and query
alpha values for color in the two color maps. These functions have the same
name as their non-alpha value equivalents, but with a an "a" added to the
end. Example 30 demonstrates some different ways to use these functions
and the effects of alpha values, at least for those drivers that support alpha
values. This change should have no effect on the device drivers that do not 
currently support alpha values. Currently only the cairo, gd, wxwidgets and
aquaterm drivers support alpha values. There are some limitations with the gd 
driver due to transparency support in the underlying libgd library.

1.6 Build system improvements

We now transform link flag results delivered to the CMake environment by
pkg-config into the preferred CMake form of library information.  The
practical effect of this improvement is that external libraries in
non-standard locations now have their rpath options set correctly for our
build system both for the build tree and the install tree so you don't have
to fiddle with LD_LIBRARY_PATH, etc.

1.7 Implement build-system infrastructure for installed Ada bindings and 
examples

Install source files, library information files, and the plplotada library
associated with the Ada bindings.  Configure and install the pkg-config file
for the plplotada library.  Install the Ada examples and a configured Makefile
to build them in the install tree.

1.8 WxWidgets driver improvements

A number of small bug fixes. New functionality includes menu options to 
save the current plot in different formats.

1.9 External libLASi library improvements affecting our psttf device.

Our psttf device depends on the libLASi library. libLASi-1.1.0 has just been
released at http://sourceforge.net/svn/?group_id=187113 .  We recommend
using this latest version of libLASi for building PLplot and the psttf
device since this version of libLASi is more robust against glyph
information returned by pango/cairo/fontconfig that on rare occasions is not
suitable for use by libLASi.


PLplot Release 5.8.0
~~~~~~~~~~~~~~~~~~~~

This is a stable release of PLplot. It represents the ongoing efforts of the
community to improve the PLplot plotting package. Development releases in the
5.9.x series will be available every few months. The next stable release will
be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.

N.B. This is the official notice that our deprecated autotools-based build
system is scheduled for removal starting with the 5.9.0 release.  The reason
for this decision is the PLplot developers and users are happy with our
CMake-based build system (see below), and nobody has been willing to spend
time maintaining our old autotools-based build system.

Note for Windows users:
The same holds for the old Windows build system in sys/win32/msdev. This
build system is much less flexible than the CMake-based system. It also
lacks a larger number of important features - freetype text, language
bindings and so on. With the 5.9.0 release the source distribution will
no longer contain this directory. Hence you should switch to the new
build system described below.

Note for gfortran users of our f95 bindings: gfortran version 4.2.1 or later
is a requirement, see fortran 95 bindings remarks below.

Note for OS-X users:
The Octave bindings no longer work for Octave 2.1.73. Work is ongoing to
try and solve this problem.


INDEX

1. Changes relative to PLplot 5.7.4
  1.1 Drivers
    1.1.1 cairo devices
    1.1.2 plmeta/plrender
  1.2 Fortran 95 bindings
  1.3 plmtex3/plptex3
  1.4 Octave 2.9
  
2. Changes relative to PLplot 5.6.1
  2.1 CVS to Subversion conversion
  2.2 CMake build system
  2.3 Plot Buffering
  2.4 Updated INSTALL/README
  2.5 malloc/calloc clean up
  2.6 Documentation
  2.7 Additions to the PLplot API
  2.8 Language bindings
    2.8.1 ADA language binding
    2.8.2 wxwidgets applications bindings
    2.8.3 Python bindings
    2.8.4 Fortran 95 bindings
    2.8.5 Octave 2.9
  2.9 Updated examples
  2.10 Drivers
    2.10.1 psttf
    2.10.2 svg
    2.10.3 wxwidgets
    2.10.4 pdf
    2.10.5 gd, wingcc (freetype)
    2.10.6 cairo
    2.10.7 pstex
    2.10.8 plmeta (and plrender application to render plmeta results).


1. Changes relative to PLplot 5.7.4 (the previous development release)

1.1 Drivers
   1.1.1 cairo devices
     The xwinttf driver has been renamed xcairo. In addition most of the
     other devices that are theoretically possible with Cairo have been
     implemented. These are a PostScript device (pscairo), a PNG device
     (pngcairo), a PDF device (pdfcairo), an SVG device (svgcairo), and a
     memory device (memcairo). The cairo device driver is still considered
     experimental as a whole. Known issues include improper text rendering
     with svgcairo and memcairo not working at all so those two devices are
     disabled by default.  The pngcairo, pscairo, and xcairo devices appear
     to work without problems and also give outstanding-looking antialiased
     and hinted results so are enabled by default. The pdfcairo device
     appears to work reasonably well so is enabled by default although it is
     not as mature as the other Cairo devices that are enabled.

   1.1.2 plmeta/plrender
     The combination of the plmeta device and the plrender application
     that renders plmeta results is unmaintained and has some known issues
     with strings, aspect ratio changes, and fonts.  Therefore, the plmeta
     device is now not enabled by default, and must be specifically enabled
     by the user using the -DPLD_plmeta=ON cmake option.  Furthermore,
     plrender is not built or installed and the plrender man page is not
     installed unless the plmeta device is specifically enabled.

1.2 Fortran 95 bindings

    Equivalance statements in our F95 bindings were causing problems for
    one fortran 95 compiler so we have dropped those equivalence statements
    and use the transfer intrinsic instead.  However, for gfortran that
    intrinsic was only implemented for version 4.2.1 so that is the
    minimum version requirement for gfortran now if you attempt to build
    the f95 bindings.  Note, earlier versions of gfortran build the f77
    bindings with no problems.

1.3  plmtex3/plptex3

    These two functions, which were added in release 5.7.3, had a number
    of bugs. These have hopefully been cleaned up. Example 28 demonstrates
    how to use these functions. The functions and the example have now been
    implemented for most language bindings.

1.4 Octave 2.9
  
    Octave 2.9 has a number of significant differences from version 2.1. 
    The octave language bindings have been updated to work with this new 
    version since the latest 2.9.x release is now the "recommended" choice 
    by the octave developers. Note that all the low-level plplot functions 
    work as expected. The higher level functions which replace the default
    octave / gnuplot plotting commands mostly work as for version 2.1. They 
    do not (yet) replicate the new and more Matlab-like functionality in 
    the latest 2.9.x releases of Octave.

    Note: As a result of the compatibilty code for octave 2.1 and lower the
    octave bindings will generate spurious warnings about obsolete built-in 
    variables when using octave 2.9. These can be silenced using the command
        warning("off","Octave:built-in-variable-assignment");
    before using the plplot bindings. This is not enabled by default as it 
    would also turn off genuine warnings in your own code which you might 
    want to fix. 


2. Changes relative to PLplot 5.6.1 (the previous stable release)

2.1 CVS to Subversion conversion

   PLplot now uses the Subversion (svn) version control system. Records of
all the changes and release tags have been preserved from the CVS repository.

2.2 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated and is scheduled for removal as
of the 5.9.0 release. The switch to CMake was made due its superior support
for Windows platforms and its relative simplicity compared to autotools on
Unix. To use CMake to configure and build PLplot follow the directions at
http://www.miscdebris.net/plplot_wiki/.

2.3 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem
with some windows platforms where the temporary files were not getting deleted.

2.4 Updated INSTALL/README

   The INSTALL and README files have been updated. They now include detailed
instructions for building plplot using the new CMake build system on Linux
and Windows.

2.5 malloc/calloc clean up

   Checks have been added to many (all?) of the calls to calloc and malloc in
the PLplot core. The purpose of the check is to verify that the memory
requested was actually allocated prior to attempting to use it.

2.6 Documentation

   The API section has been expanded to include information about how to call
the functions from Fortran95, Java, Perl/PDL and Python. Since array dimension
information is typically redundant in these languages it is dropped in many
of the relevant function. Additionally, some of the Perl/PDL function calls
have a different argument order than their C equivalent. This section has also
been expanded to include a list of which examples each function is used in
(if any).

   The Fortran95 documentation has been updated.

2.7 Additions to the PLplot API

   The functions plptex3 and plmtex3 have been added to the PLplot API. These
allow the user to draw text in "3D" on the 3D plots. plptex3 is the 3D
equivalent of plptex and plmtex3 is the 3D equivalent of plmtex. Their
use is demonstrated by example 28.

2.8 Language bindings
  2.8.1 ADA
       Jerry Bauck has donated bindings to the ADA programming language.
    These bindings have been included into the CMake build system,
    and should be generated automatically if you have an ADA compiler and
    you specify the cmake option -DENABLE_ada=ON. The ADA bindings are now
    considered complete and the current focus is on implementing all of the
    examples in ADA to help test the bindings.  Until that work is completed
    these bindings should be considered experimental.

  2.8.2 wxwidgets applications bindings
       The wxWidgets bindings provide an interface to the PLplot API and a
    simple widget to be used in a wxWidgets application. The class
    'wxPLplotstream' inherited from the PLplot class 'plstream' allows access
    to the complete PLplot API. 'wxPLplotWindow' is a simple wxWidget which
    takes care of some preparatory work for convenient use of the PLplot
    Library within a wxWidgets application.

  2.8.3 Python bindings
    The Python bindings have been updated to use numpy rather than the now
    deprecated Numeric python numeric library.

  2.8.4 Fortran 95 bindings
    Equivalance statements in our F95 bindings were causing problems for
    one fortran 95 compiler so we have dropped those equivalence statements
    and use the transfer intrinsic instead.  However, for gfortran that
    intrinsic was only implemented for version 4.1.2 so that is the
    minimum version requirement for gfortran now if you attempt to build
    the f95 bindings.  Note, earlier versions of gfortran build the f77
    bindings with no problems.
  
  2.8.5 Octave 2.9
    Octave 2.9 has a number of significant differences from version 2.1. 
    The octave language bindings have been updated to work with this new 
    version since the latest 2.9.x release is now the "recommended" choice 
    by the octave developers. Note that all the low-level plplot functions 
    work as expected. The higher level functions which replace the default
    octave / gnuplot plotting commands mostly work as for version 2.1. They 
    do not (yet) replicate the new and more Matlab-like functionality in 
    the latest 2.9.x releases of Octave.

    Note: As a result of the compatibilty code for octave 2.1 and lower the
    octave bindings will generate spurious warnings about obsolete built-in 
    variables when using octave 2.9. These can be silenced using the command
        warning("off","Octave:built-in-variable-assignment");
    before using the plplot bindings. This is not enabled by default as it 
    would also turn off genuine warnings in your own code which you might 
    want to fix. 

2.9 Updated examples

   The examples have been checked over to make sure that they all work
and to make them more consistent across different programming languages.

2.10 Drivers
  2.10.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  2.10.2 svg
    This is a new device driver that creates Scalable Vector Graphics files
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  2.10.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antialiasing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antialiasing turned off. In addition the antialiasing code can
    now handle filled polygons and window resizing.

  2.10.4 pdf
    A basic version of a pdf driver was added to the latest PLplot release.
    This driver is based on the libharu library
    (http://libharu.sourceforge.net/). At present only the Hershey fonts are
    used and there is no support for pdf or TrueType fonts. Compression of the 
    pdf output is not enabled and the paper size can't be chosen. All these 
    issues will be addressed in later releases.

  2.10.5 gd, wingcc (freetype)
    Improved anti-aliasing routines have been added to PLplot's freetype
    font rendering engine. The gd and wingcc drivers have been modified in
    turn to take advantage of these new routines, leading to improved text
    rendering.

  2.10.6 cairo
    This is a family of drivers that use the Cairo graphics library to
    render text and graphics. The graphics and the text are both
    anti-aliased which yields some outstanding-looking results. This driver
    is unicode enabled, and Truetype fonts are used by default. Most of the
    devices that are theoretically possible with Cairo have been
    implemented. These are an X device (xcairo), a PostScript device
    (pscairo), a PNG device (pngcairo, a PDF device (pdfcairo), an SVG
    device (svgcairo), and a memory device (memcairo). The cairo device
    driver is still considered experimental as a whole. Known issues include
    improper text rendering with svgcairo and memcairo not working at all so
    those two devices are disabled by default.  The pngcairo, pscairo, and
    xcairo devices appear to work without problems and also give
    outstanding-looking antialiased and hinted results so are enabled by
    default. The pdfcairo device appears to work reasonable well so is
    enabled by default although it is not as mature as the other three cairo
    devices that are enabled.

  2.10.7 pstex driver
       This Latex driver has now been resurrected from years of neglect and
    aside from bounding box issues seems to be working well.  Should be
    useful for Latex enthusiasts.

  2.10.8 plmeta driver
    The combination of the plmeta device and the plrender application that
    renders plmeta results is unmaintained and has some known issues with
    strings, aspect ratio changes, and fonts.  Therefore, the plmeta device
    is now not enabled by default, and must be specifically enabled by the
    user using the -DPLD_plmeta=ON cmake option. Furthermore, plrender is
    not built or installed and the plrender man page is not installed unless
    the plmeta device is specifically enabled.


PLplot Release 5.8.0-RC1
~~~~~~~~~~~~~~~~~~~~~~~~

This is a stable release of PLplot. It represents the ongoing efforts of the
community to improve the PLplot plotting package. Development releases in the
5.9.x series will be available every few months. The next stable release will
be 5.10.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.

N.B. This is the official notice that our deprecated autotools-based build
system is scheduled for removal starting with the 5.9.0 release.  The reason
for this decision is the PLplot developers and users are happy with our
CMake-based build system (see below), and nobody has been willing to spend
time maintaining our old autotools-based build system.

Note for Windows users:
The same holds for the old Windows build system in sys/win32/msdev. This
build system is much less flexible than the CMake-based system. It also
lacks a larger number of important features - freetype text, language
bindings and so on. With the 5.9.0 release the source distribution will
no longer contain this directory. Hence you should switch to the new
build system described below.

Note for gfortran users of our f95 bindings: gfortran version 4.1.2 or later
is a requirement, see fortran 95 bindings remarks below.

INDEX

1. Changes relative to PLplot 5.7.4
  1.1 Drivers
    1.1.1 cairo devices
    1.1.2 plmeta/plrender
  1.2 Fortran 95 bindings
  1.3 plmtex3/plptex3
  1.4 Octave 2.9
  
2. Changes relative to PLplot 5.6.1
  2.1 CVS to Subversion conversion
  2.2 CMake build system
  2.3 Plot Buffering
  2.4 Updated INSTALL/README
  2.5 malloc/calloc clean up
  2.6 Documentation
  2.7 Additions to the PLplot API
  2.8 Language bindings
    2.8.1 ADA language binding
    2.8.2 wxwidgets applications bindings
    2.8.3 Python bindings
    2.8.4 Fortran 95 bindings
    2.8.5 Octave 2.9
  2.9 Updated examples
  2.10 Drivers
    2.10.1 psttf
    2.10.2 svg
    2.10.3 wxwidgets
    2.10.4 pdf
    2.10.5 gd, wingcc (freetype)
    2.10.6 cairo
    2.10.7 pstex
    2.10.8 plmeta (and plrender application to render plmeta results).


1. Changes relative to PLplot 5.7.4 (the previous development release)

1.1 Drivers
   1.1.1 cairo devices
     The xwinttf driver has been renamed xcairo. In addition most of the
     other devices that are theoretically possible with Cairo have been
     implemented. These are a PostScript device (pscairo), a PNG device
     (pngcairo), a PDF device (pdfcairo), an SVG device (svgcairo), and a
     memory device (memcairo). The cairo device driver is still considered
     experimental as a whole. Known issues include improper text rendering
     with svgcairo and memcairo not working at all so those two devices are
     disabled by default.  The pngcairo, pscairo, and xcairo devices appear
     to work without problems and also give outstanding-looking antialiased
     and hinted results so are enabled by default. The pdfcairo device
     appears to work reasonably well so is enabled by default although it is
     not as mature as the other Cairo devices that are enabled.

   1.1.2 plmeta/plrender
     The combination of the plmeta device and the plrender application
     that renders plmeta results is unmaintained and has some known issues
     with strings, aspect ratio changes, and fonts.  Therefore, the plmeta
     device is now not enabled by default, and must be specifically enabled
     by the user using the -DPLD_plmeta=ON cmake option.  Furthermore,
     plrender is not built or installed and the plrender man page is not
     installed unless the plmeta device is specifically enabled.

1.2 Fortran 95 bindings

    Equivalance statements in our F95 bindings were causing problems for
    one fortran 95 compiler so we have dropped those equivalence statements
    and use the transfer intrinsic instead.  However, for gfortran that
    intrinsic was only implemented for version 4.1.2 so that is the
    minimum version requirement for gfortran now if you attempt to build
    the f95 bindings.  Note, earlier versions of gfortran build the f77
    bindings with no problems.

1.3  plmtex3/plptex3

    These two functions, which were added in release 5.7.3, had a number
    of bugs. These have hopefully been cleaned up. Example 28 demonstrates
    how to use these functions. The functions and the example have now been
    implemented for most language bindings.

1.4 Octave 2.9
  
    Octave 2.9 has a number of significant differences from version 2.1. 
    The octave language bindings have been updated to work with this new 
    version since the latest 2.9.x release is now the "recommended" choice 
    by the octave developers. Note that all the low-level plplot functions 
    work as expected. The higher level functions which replace the default
    octave / gnuplot plotting commands mostly work as for version 2.1. They 
    do not (yet) replicate the new and more Matlab-like functionality in 
    the latest 2.9.x releases of Octave.

    Note: As a result of the compatibilty code for octave 2.1 and lower the
    octave bindings will generate spurious warnings about obsolete built-in 
    variables when using octave 2.9. These can be silenced using the command
        warning("off","Octave:built-in-variable-assignment");
    before using the plplot bindings. This is not enabled by default as it 
    would also turn off genuine warnings in your own code which you might 
    want to fix. 


2. Changes relative to PLplot 5.6.1 (the previous stable release)

2.1 CVS to Subversion conversion

   PLplot now uses the Subversion (svn) version control system. Records of
all the changes and release tags have been preserved from the CVS repository.

2.2 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated and is scheduled for removal as
of the 5.9.0 release. The switch to CMake was made due its superior support
for Windows platforms and its relative simplicity compared to autotools on
Unix. To use CMake to configure and build PLplot follow the directions at
http://www.miscdebris.net/plplot_wiki/.

2.3 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem
with some windows platforms where the temporary files were not getting deleted.

2.4 Updated INSTALL/README

   The INSTALL and README files have been updated. They now include detailed
instructions for building plplot using the new CMake build system on Linux
and Windows.

2.5 malloc/calloc clean up

   Checks have been added to many (all?) of the calls to calloc and malloc in
the PLplot core. The purpose of the check is to verify that the memory
requested was actually allocated prior to attempting to use it.

2.6 Documentation

   The API section has been expanded to include information about how to call
the functions from Fortran95, Java, Perl/PDL and Python. Since array dimension
information is typically redundant in these languages it is dropped in many
of the relevant function. Additionally, some of the Perl/PDL function calls
have a different argument order than their C equivalent. This section has also
been expanded to include a list of which examples each function is used in
(if any).

   The Fortran95 documentation has been updated.

2.7 Additions to the PLplot API

   The functions plptex3 and plmtex3 have been added to the PLplot API. These
allow the user to draw text in "3D" on the 3D plots. plptex3 is the 3D
equivalent of plptex and plmtex3 is the 3D equivalent of plmtex. Their
use is demonstrated by example 28.

2.8 Language bindings
  2.8.1 ADA
       Jerry Bauck has donated bindings to the ADA programming language.
    These bindings have been included into the CMake build system,
    and should be generated automatically if you have an ADA compiler and
    you specify the cmake option -DENABLE_ada=ON. The ADA bindings are now
    considered complete and the current focus is on implementing all of the
    examples in ADA to help test the bindings.  Until that work is completed
    these bindings should be considered experimental.

  2.8.2 wxwidgets applications bindings
       The wxWidgets bindings provide an interface to the PLplot API and a
    simple widget to be used in a wxWidgets application. The class
    'wxPLplotstream' inherited from the PLplot class 'plstream' allows access
    to the complete PLplot API. 'wxPLplotWindow' is a simple wxWidget which
    takes care of some preparatory work for convenient use of the PLplot
    Library within a wxWidgets application.

  2.8.3 Python bindings
    The Python bindings have been updated to use numpy rather than the now
    deprecated Numeric python numeric library.

  2.8.4 Fortran 95 bindings
    Equivalance statements in our F95 bindings were causing problems for
    one fortran 95 compiler so we have dropped those equivalence statements
    and use the transfer intrinsic instead.  However, for gfortran that
    intrinsic was only implemented for version 4.1.2 so that is the
    minimum version requirement for gfortran now if you attempt to build
    the f95 bindings.  Note, earlier versions of gfortran build the f77
    bindings with no problems.
  
  2.8.5 Octave 2.9
    Octave 2.9 has a number of significant differences from version 2.1. 
    The octave language bindings have been updated to work with this new 
    version since the latest 2.9.x release is now the "recommended" choice 
    by the octave developers. Note that all the low-level plplot functions 
    work as expected. The higher level functions which replace the default
    octave / gnuplot plotting commands mostly work as for version 2.1. They 
    do not (yet) replicate the new and more Matlab-like functionality in 
    the latest 2.9.x releases of Octave.

    Note: As a result of the compatibilty code for octave 2.1 and lower the
    octave bindings will generate spurious warnings about obsolete built-in 
    variables when using octave 2.9. These can be silenced using the command
        warning("off","Octave:built-in-variable-assignment");
    before using the plplot bindings. This is not enabled by default as it 
    would also turn off genuine warnings in your own code which you might 
    want to fix. 

2.9 Updated examples

   The examples have been checked over to make sure that they all work
and to make them more consistent across different programming languages.

2.10 Drivers
  2.10.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  2.10.2 svg
    This is a new device driver that creates Scalable Vector Graphics files
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  2.10.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antialiasing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antialiasing turned off. In addition the antialiasing code can
    now handle filled polygons and window resizing.

  2.10.4 pdf
    A basic version of a pdf driver was added to the latest PLplot release.
    This driver is based on the libharu library
    (http://libharu.sourceforge.net/). At present only the Hershey fonts are
    used and there is no support for pdf or TrueType fonts. Compression of the 
    pdf output is not enabled and the paper size can't be chosen. All these 
    issues will be addressed in later releases.

  2.10.5 gd, wingcc (freetype)
    Improved anti-aliasing routines have been added to PLplot's freetype
    font rendering engine. The gd and wingcc drivers have been modified in
    turn to take advantage of these new routines, leading to improved text
    rendering.

  2.10.6 cairo
    This is a family of drivers that use the Cairo graphics library to
    render text and graphics. The graphics and the text are both
    anti-aliased which yields some outstanding-looking results. This driver
    is unicode enabled, and Truetype fonts are used by default. Most of the
    devices that are theoretically possible with Cairo have been
    implemented. These are an X device (xcairo), a PostScript device
    (pscairo), a PNG device (pngcairo, a PDF device (pdfcairo), an SVG
    device (svgcairo), and a memory device (memcairo). The cairo device
    driver is still considered experimental as a whole. Known issues include
    improper text rendering with svgcairo and memcairo not working at all so
    those two devices are disabled by default.  The pngcairo, pscairo, and
    xcairo devices appear to work without problems and also give
    outstanding-looking antialiased and hinted results so are enabled by
    default. The pdfcairo device appears to work reasonable well so is
    enabled by default although it is not as mature as the other three cairo
    devices that are enabled.

  2.10.7 pstex driver
       This Latex driver has now been resurrected from years of neglect and
    aside from bounding box issues seems to be working well.  Should be
    useful for Latex enthusiasts.

  2.10.8 plmeta driver
    The combination of the plmeta device and the plrender application that
    renders plmeta results is unmaintained and has some known issues with
    strings, aspect ratio changes, and fonts.  Therefore, the plmeta device
    is now not enabled by default, and must be specifically enabled by the
    user using the -DPLD_plmeta=ON cmake option. Furthermore, plrender is
    not built or installed and the plrender man page is not installed unless
    the plmeta device is specifically enabled.


PLplot Release 5.7.4
~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot. It represents the ongoing 
efforts of the community to improve the PLplot plotting package. Development 
releases in the 5.7.x series will be available every few months. The next 
stable release will be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Changes relative to PLplot 5.7.3
  1.1 CVS to Subversion conversion
  1.2 Drivers
    1.2.1 xwinttf -> xcairo
  1.3 Ada bindings
  1.4 Python bindings
  1.5 Fortran95 Documentation
  
2. Changes relative to PLplot 5.6.1
  2.1 CVS to Subversion conversion
  2.2 CMake build system
  2.3 Plot Buffering
  2.4 Updated INSTALL/README
  2.5 malloc/calloc clean up
  2.6 Documentation
  2.7 Additions to the PLplot API
  2.8 Language bindings
    2.8.1 Experimental ADA language binding
    2.8.2 wxwidgets applications bindings
  2.9 Updated examples
  2.10 Drivers
    2.10.1 psttf
    2.10.2 svg
    2.10.3 wxwidgets
    2.10.4 pdf
    2.10.5 gd, wingcc (freetype)
    2.10.6 cairo
    2.10.7 pstex
  2.11 Python bindings
  2.12 Fortran95 Documentation


1. Changes relative to PLplot 5.7.3 (the previous development release)

1.1 CVS to Subversion conversion

   PLplot now uses the Subversion (svn) version control system. Records of
all the changes and release tags have been preserved from the CVS repository.

1.2 Drivers
   1.2.1 xwinttf -> xcairo
        The xwinttf driver has been renamed xcairo. In addition most of the
     the other output devices that Cairo supports are now supported. These
     include a postscript driver (pscairo), a PDF driver (pdfcairo), a
     SVG driver (svgcairo), a PNG driver (pngcairo) and a memory driver
     (memcairo). This driver is still considered experimental. Known issues 
     include improper text rendering with the SVG driver and the memory 
     driver does not work at all.

1.3 Ada bindings

    The ADA bindings are now considered complete and the current focus is on
implementing all of the examples in ADA.

1.4 Python bindings

    The Python bindings have been updated to use numpy rather than the now
deprecated Numeric python numeric library. If you need to revert to the old
Numeric support, then you should specify the cmake option -DHAVE_NUMPY=OFF.

1.5 Fortran95 documentation

    The Fortran95 documentation has been updated.


2. Changes relative to PLplot 5.6.1 (the previous stable release)

2.1 CVS to Subversion conversion

   PLplot now uses the Subversion (svn) version control system. Records of
all the changes and release tags have been preserved from the CVS repository.

2.2 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated. The switch to CMake was made due
its superior support for Windows platforms and its relative simplicity
compared to autotools. CMake 2.4.5 is the minimum required version of cmake.
Finding swig has been improved such that it should now be found as long as
it is in your path.

2.3 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem 
with some windows platforms where the temporary files were not getting deleted.

2.4 Updated INSTALL/README

   The INSTALL and README files have been updated. They now include detailed
instructions for building plplot using the new CMake build system on linux
and windows.

2.5 malloc/calloc clean up

   Checks have been added to many (all?) of the calls to calloc and malloc in
the PLplot core. The purpose of the check is to verify that the memory 
requested was actually allocated prior to attempting to use it.

2.6 Documentation

   The API section has been expanded to include information about how to call
the functions from Fortran95, Java, Perl/PDL and Python. Since array dimension
information is typically redundant in these languages it is dropped in many
of the relevant function. Additionally, some of the Perl/PDL function calls 
have a different argument order than their C equivalent. This section has also 
been expanded to include a list of which examples each function is used in 
(if any).

2.7 Additions to the PLplot API

   The functions plptex3 and plmtex3 have been added to the PLplot API. These
allow the user to draw text in "3D" on the 3D plots. plptex3 is the 3D
equivalent of plptex and plmtex3 is the 3D equivalent of plmtex.
 
2.8 Language bindings
  2.8.1 ADA
       Jerry Bauck has donated bindings to the ADA programming language. 
    These are considered experimental in nature and the API is subject to
    change.  These bindings have been included into the CMake build system,
    and should be generated automatically if you have an ADA compiler and
    you specify the cmake option -DENABLE_ada=ON.  Four standard examples
    have been completed and work on a complete set of examples is ongoing.

  2.8.2 wxwidgets applications bindings
       The wxWidgets bindings provide an interface to the PLplot API and a 
    simple widget to be used in a wxWidgets application. The class 
    'wxPLplotstream' inherited from the PLplot class 'plstream' allows access
    to the complete PLplot API. 'wxPLplotWindow' is a simple wxWidget which
    takes care of some preparational work for convenient use of the PLplot
    Library within a wxWidgets application.
 
2.9 Updated examples

   The examples have been checked over to make sure that they all work
and to make them more consistent across different programming languages.   

2.10 Drivers
  2.10.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  2.10.2 svg
    This is a new device driver that creates Scalable Vector Graphics files 
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  2.10.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antializing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antializing turned off. In addition the antializing code can
    now handle filled polygons and window resizing.

  2.10.4 pdf
    A basic version of a pdf driver was added to the latest PLplot release. 
    This driver is based on the libharu library 
    (http://libharu.sourceforge.net/). At present only the hershey fonts are 
    used and there is no support for pdf or ttf fonts. Compression of the pdf 
    output is not enabled and the paper size can't be chosen. All these issues 
    will be addressed in later releases.

  2.10.5 gd, wingcc (freetype)
    Improved anti-aliasing routines have been added to plplot's freetype
    font rendering engine. The gd and wingcc drivers have been modified in 
    turn to take advantage of these new routines, leading to improved text
    rendering.

  2.10.6 cairo 
       This is a family of drivers that use the Cairo graphics library to
    render text and graphics. The graphics and the text are both
    anti-aliased. It is unicode enabled and Truetype fonts are used by 
    default. Most of the the output devices that Cairo supports are 
    supported. These include a X windows driver (xcairo), a postscript 
    driver (pscairo), a PDF driver (pdfcairo), a SVG driver (svgcairo), a 
    PNG driver (pngcairo) and a memory driver (memcairo). This driver is 
    still considered experimental. Known issues include improper text 
    rendering with the SVG driver and the memory driver does not work at 
    all.

  2.10.7 pstex driver
       This Latex driver has now been resurrected from years of neglect and
    aside from bounding box issues seems to be working well.  Should be
    useful for Latex enthusiasts.

1.4 Python bindings

    The Python bindings have been updated to use numpy rather than the now
deprecated Numeric python numeric library.

1.5 Fortran95 documentation

    The Fortran95 documentation has been updated.


PLplot Release 5.7.3
~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot. It represents the ongoing 
efforts of the community to improve the PLplot plotting package. Development 
releases in the 5.7.x series will be available every few months. The next 
stable release will be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Changes relative to PLplot 5.7.2
  1.1 CMake build system
  1.2 malloc/calloc clean up
  1.3 Documentation
  1.4 Additions to the PLplot API
  1.5 Language bindings
    1.5.1 Experimental ADA language binding
    1.5.2 wxwidgets applications bindings
  1.6 Drivers
    1.6.1 xwinttf
    1.6.2 pstex

2. Changes relative to PLplot 5.6.1
  2.1 CMake build system
  2.2 Plot Buffering
  2.3 Updated INSTALL/README
  2.4 malloc/calloc clean up
  2.5 Documentation
  2.6 Additions to the PLplot API
  2.7 Language bindings
    2.7.1 Experimental ADA language binding
    2.7.2 wxwidgets applications bindings
  2.8 Updated examples
  2.9 Drivers
    2.9.1 psttf
    2.9.2 svg
    2.9.3 wxwidgets
    2.9.4 pdf
    2.9.5 gd, wingcc (freetype)
    2.9.6 xwinttf
    2.9.7 pstex


1. Changes relative to PLplot 5.7.2 (the previous development release)

1.1 CMake build system

   Finding swig has been improved such that it should now be found as long
as it is in your path.

1.2 malloc/calloc clean up

   Checks have been added to many (all?) of the calls to calloc and malloc in
the PLplot core. The purpose of the check is to verify that the memory 
requested was actually allocated prior to attempting to use it.

1.3 Documentation

   The API section has been expanded to include information about how to call
the functions from Fortran95, Java, Perl/PDL and Python. Since array dimension
information is typically redundant in these languages it is dropped in many
of the relevant function. Additionally, some of the Perl/PDL function calls 
have a different argument order than their C equivalent. This section has also 
been expanded to include a list of which examples each function is used in 
(if any).

1.4 Additions to the PLplot API

   The functions plptex3 and plmtex3 have been added to the PLplot API. These
allow the user to draw text in "3D" on the 3D plots. plptex3 is the 3D
equivalent of plptex and plmtex3 is the 3D equivalent of plmtex.
 
1.5 Language bindings
  1.5.1 ADA
       Jerry Bauck has donated bindings to the ADA programming language. 
    These are considered experimental in nature and the API is subject to
    change.  These bindings have been included into the CMake build system,
    and should be generated automatically if you have an ADA compiler and
    you specify the cmake option -DENABLE_ada=ON.  Four standard examples
    have been completed and work on a complete set of examples is ongoing.

  1.5.2 wxwidgets applications bindings
       The wxWidgets bindings provide an interface to the PLplot API and a 
    simple widget to be used in a wxWidgets application. The class 
    'wxPLplotstream' inherited from the PLplot class 'plstream' allows access
    to the complete PLplot API. 'wxPLplotWindow' is a simple wxWidget which
    takes care of some preparational work for convenient use of the PLplot
    Library within a wxWidgets application.
 
1.6 Drivers
 
  1.6.1 xwinttf driver
       This is a new driver for X Windows that uses Cairo for rendering
    graphics and Pango for rendering text. The graphics and the text are both
    anti-aliased. It is unicode enabled and Truetype fonts are used by 
    default.

  1.6.2 pstex driver
       This Latex driver has now been resurrected from years of neglect and
    aside from bounding box issues seems to be working well.  Should be
    useful for Latex enthusiasts.

2. Changes relative to PLplot 5.6.1 (the previous stable release)

2.1 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated. The switch to CMake was made due
its superior support for Windows platforms and its relative simplicity
compared to autotools. CMake 2.4.5 is the minimum required version of cmake.
Finding swig has been improved such that it should now be found as long as
it is in your path.

2.2 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem 
with some windows platforms where the temporary files were not getting deleted.

2.3 Updated INSTALL/README

   The INSTALL and README files have been updated. They now include detailed
instructions for building plplot using the new CMake build system on linux
and windows.

2.4 malloc/calloc clean up

   Checks have been added to many (all?) of the calls to calloc and malloc in
the PLplot core. The purpose of the check is to verify that the memory 
requested was actually allocated prior to attempting to use it.

2.5 Documentation

   The API section has been expanded to include information about how to call
the functions from Fortran95, Java, Perl/PDL and Python. Since array dimension
information is typically redundant in these languages it is dropped in many
of the relevant function. Additionally, some of the Perl/PDL function calls 
have a different argument order than their C equivalent. This section has also 
been expanded to include a list of which examples each function is used in 
(if any).

2.6 Additions to the PLplot API

   The functions plptex3 and plmtex3 have been added to the PLplot API. These
allow the user to draw text in "3D" on the 3D plots. plptex3 is the 3D
equivalent of plptex and plmtex3 is the 3D equivalent of plmtex.
 
2.7 Language bindings
  2.7.1 ADA
       Jerry Bauck has donated bindings to the ADA programming language. 
    These are considered experimental in nature and the API is subject to
    change.  These bindings have been included into the CMake build system,
    and should be generated automatically if you have an ADA compiler and
    you specify the cmake option -DENABLE_ada=ON.  Four standard examples
    have been completed and work on a complete set of examples is ongoing.

  2.7.2 wxwidgets applications bindings
       The wxWidgets bindings provide an interface to the PLplot API and a 
    simple widget to be used in a wxWidgets application. The class 
    'wxPLplotstream' inherited from the PLplot class 'plstream' allows access
    to the complete PLplot API. 'wxPLplotWindow' is a simple wxWidget which
    takes care of some preparational work for convenient use of the PLplot
    Library within a wxWidgets application.
 
2.8 Updated examples

   The examples have been checked over to make sure that they all work
and to make them more consistent across different programming languages.   

2.9 Drivers
  2.9.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  2.9.2 svg
    This is a new device driver that creates Scalable Vector Graphics files 
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  2.9.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antializing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antializing turned off. In addition the antializing code can
    now handle filled polygons and window resizing.

  2.9.4 pdf
    A basic version of a pdf driver was added to the latest PLplot release. 
    This driver is based on the libharu library 
    (http://libharu.sourceforge.net/). At present only the hershey fonts are 
    used and there is no support for pdf or ttf fonts. Compression of the pdf 
    output is not enabled and the paper size can't be chosen. All these issues 
    will be addressed in later releases.

  2.9.5 gd, wingcc (freetype)
    Improved anti-aliasing routines have been added to plplot's freetype
    font rendering engine. The gd and wingcc drivers have been modified in 
    turn to take advantage of these new routines, leading to improved text
    rendering.

  2.9.6 xwinttf driver
       This is a new driver for X Windows that uses Cairo for rendering
    graphics and Pango for rendering text. The graphics and the text are both
    anti-aliased. It is unicode enabled and Truetype fonts are used by 
    default.

  2.9.7 pstex driver
       This Latex driver has now been resurrected from years of neglect and
    aside from bounding box issues seems to be working well.  Should be
    useful for Latex enthusiasts.


PLplot Release 5.7.2
~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot. It represents the ongoing 
efforts of the community to improve the PLplot plotting package. Development 
releases in the 5.7.x series will be available every few months. The next full 
release will be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Changes relative to PLplot 5.7.1
  1.1 CMake build system
  1.2 Updated INSTALL/README
  1.3 Updated examples
  1.4 Drivers
    1.4.1 pdf
    1.4.2 gd, wingcc (freetype)

2. Changes relative to PLplot 5.6.1
  2.1 CMake build system
  2.2 Plot Buffering 
  2.3 Drivers
    2.3.1 psttf
    2.3.2 svg
    2.3.3 wxwidgets

1. Changes relative to PLplot 5.7.1 (the previous development release)

1.1 CMake build system

   CMake 2.4.5 is the now minimum required version of cmake. A lot of work
has been done to improve this build system, particularly for Windows 
platforms.  

1.2 Updated INSTALL/README

   The INSTALL and README files have been updated. They now include detailed
instructions for building plplot using the new CMake build system on linux
and windows.

1.3 Updated examples

   The examples have been checked over to make sure that they all work
and to make them more consistent across different programming languages.   

1.4 Drivers
  1.4.1 pdf
    A basic version of a pdf driver was added to the latest PLplot release. 
    This driver is based on the libharu library 
    (http://libharu.sourceforge.net/). At present only the hershey fonts are 
    used and there is no support for pdf or ttf fonts. Compression of the pdf 
    output is not enabled and the paper size can't be chosen. All these issues 
    will be addressed in later releases.

  1.4.2 gd, wingcc (freetype)
    Improved anti-aliasing routines have been added to plplot's freetype
    font rendering engine. The gd and wingcc drivers have been modified in 
    turn to take advantage of these new routines, leading to improved text
    rendering.


2. Changes relative to PLplot 5.6.1 (the previous stable release)

2.1 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated. The switch to CMake was made due
its superior support for Windows platforms and its relative simplicity
compared to autotools. 

2.2 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem 
with some windows platforms where the temporary files were not getting deleted.

2.3 Drivers
  2.3.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  2.3.2 svg
    This is a new device driver that creates Scalable Vector Graphics files 
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  2.3.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antializing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antializing turned off. In addition the antializing code can
    now handle filled polygons and window resizing.


PLplot Release 5.7.1
~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot. It represents the ongoing 
efforts of the community to improve the PLplot plotting package. Development 
releases in the 5.7.x series will be available every few months. The next full 
release will be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Changes relative to PLplot 5.6.1
  1.1 CMake build system
  1.2 Plot Buffering 
  1.3 Drivers
    1.3.1 psttf
    1.3.2 svg
    1.3.3 wxwidgets


1. Changes relative to PLplot 5.6.1 (the previous stable release)

1.1 CMake build system

   PLplot now uses the CMake build system (www.cmake.org) and the older
autotools build system has been deprecated. The switch to CMake was made due
its superior support for Windows platforms and its relative simplicity
compared to autotools. 

1.2 Plot Buffering

   PLplot core has been modified to buffer plot commands in memory rather than
via a unix pipe or temporary file. Testing has shown that there is 20-30%
improvement in plotting performance (i.e. speed). This is likely to be system
dependent and some may see a much larger benefit. This also resolves a problem 
with some windows platforms where the temporary files were not getting deleted.

1.3 Drivers
  1.3.1 psttf
    This device driver now requires LASi version 1.0.6 or 1.0.5pl.  See
    http://www.unifont.org/lasi/ for instructions (depending on installed
    version of FreeType library) on which to choose.

  1.3.2 svg
    This is a new device driver that creates Scalable Vector Graphics files 
    (http://www.w3.org/Graphics/SVG/). SVG is a XML language describing
    graphics that is supported directly or via plug-ins in most modern web
    browsers. The driver is off by default as its text handling has not been
    perfected.

  1.3.3 wxwidgets
    This driver has been updated a great deal. The most important improvements
    have been to the antializing part of the driver. It is now about 4 times
    faster than it was, and is nearly comparable in speed to the driver
    with the antializing turned off. In addition the antializing code can
    now handle filled polygons and window resizing.



PLplot Bug Fix Release 5.6.1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This release corrects a number of outstanding issues with plplot that were
discovered subsequent to the 5.6.0 release. It represents the ongoing efforts 
of the community to improve the PLplot plotting package. Development releases 
in the 5.7.x series will be available every few months. The next full release 
will be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Changes relative to PLplot 5.6.0
  1.1 API
    1.1.1 f95
  1.2 Drivers
    1.2.1 psttf
    1.2.2 pstex


1. Changes relative to PLplot 5.6.0 (the previous stable release)

1.1 Fortran 95

A lot of work was done to correct a number of outstanding issues with
Fortran 95 interface. All of plplot API is now available to f95 users and
a complete set of examples was created to demonstrate how to use plplot with 
a f95. In its current form it is known to work with gfortran compiler. Due
to limitations in the current version of libtool it not possible to use both
a f77 and a f95 compiler to build plplot. If you desire both interfaces the
recommended approach is to compile the f77 interface with your f95 compiler,
which can be done by setting the FC and F77 environment variables at the
configuration stage.

- The API is defined via a module, so that the compiler can now check
  the argument types.
- It is now possible to pass arrays as assumed-shape arrays. This
  means: less arguments and less chances for interface errors.
- The module also defines specific parameters to describe PLplot
  options. This way, you can use symbolic names instead of
  numbers.
- The floating-point type PLFLT is now available as a KIND parameter,
  making it possible to use the same code for single and double
  precision applications - simply declare all real variables
  using the KIND facility and link with the corresponding version of
  the PLplot library.

More information is found in bindings/f95/readme_f95.txt


1.2 Drivers

1.2.1 psttf

This is a postscript driver that supports TrueType fonts. This allows access 
to a far greater range of fonts and characters than is possible using Type 1
postscript fonts. 

The driver requires the LASi (v1.0.5), pango and pangoft2 libraries to work.
The pango and pangoft2 libraries are widely distributed with most Linux
distributions and give the psttf driver full complex text layout (CTL)
capability (see http://plplot.sourceforge.net/examples/demo24.php for an
example of this capability).  The LASi library is not part of most
distributions at this time. The source code can be downloaded from
http://www.unifont.org/lasi/. The library is small and easy to build and
install.  Make sure you use LASi-1.0.5.  The psttf device driver uses new
capabilities in this version of LASi and no longer works with LASi-1.0.4.

This driver is now enabled by default. 

1.2.2 pstex

Permanently disable the autotools build of pstex.  Other PostScript devices
(either ps or psttf) appear to give better solutions so there doesn't seem
to be much purpose in maintaining this currently broken device.



PLplot Development Release 5.6.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a stable release of PLplot. It represents the ongoing efforts of the
community to improve the PLplot plotting package. Development releases in the
5.7.x series will be available every few months. The next full release will
be 5.8.0.

     If you encounter a problem that is not already documented in the
PROBLEMS file, then please send bug reports to PLplot developers via the
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB
file.


INDEX

1. Build Instructions
2. Changes relative to PLplot 5.5.3
  2.1 API
    2.1.1 PLBOOL
  2.2 Drivers
    2.2.1 psttf
    2.2.2 wingcc
    2.2.3 wxwidgets
3. Changes relative to PLplot 5.3.1
  3.1 API
    3.1.1 Deprecated functions
    3.1.2 Unicode
    3.1.3 Extended cmap0 support
    3.1.4 The PlplotCanvas Widget for Gnome/GTK Applications
  3.2 Drivers
    3.2.1 PostScript
    3.2.2 psttf
    3.2.3 GD (png, jpeg, gif)
    3.2.4 GCW (Gnome 2)
    3.2.5 AquaTerm (Mac OS X)
    3.2.6 Tk
    3.2.7 wxwidgets
4. Notes on Autotools
  4.1 Autotools versions
  4.2 cf/bootstrap.sh output

1. Build Instructions

For detailed instructions on how to build and install PLplot from this
tarball, please read the INSTALL file.  The basic procedure is to execute
the following commands:

  ./configure
  make
  make install

     There are a variety of configuration options, and these are explained
in the INSTALL document, and below as required.  In particular, if you
want to install the PLplot Programmer's Reference Manual, please use:

  ./configure --with-prebuiltdoc

Note that it is often helpful to use the --with-pkg-config option if your
system has the pkg-config program (typically *nix systems).


2. Changes relative to PLplot 5.5.3 (the previous development release)


2.1 API


2.1.1 PLBOOL

The java interface was reworked to use the PLBOOL type.

2.1.2 Fortran 95

The language bindings have been extended to Fortran 95. While it is
possible to use the F77 bindings in a program that uses the Fortran 95
features (as Fortran 95 is almost 100% compatible with FORTRAN 77),
there are a few aspects specific to this newer standard that made
it worthwhile to support Fortran 95 explicitly:

- The API is defined via a module, so that the compiler can now check
  the argument types.
- It is now possible to pass arrays as assumed-shape arrays. This
  means: less arguments and less chances for interface errors.
- The module also defines specific parameters to describe PLplot
  options. This way, you can use symbolic names instead of
  numbers.
- The floating-point type PLFLT is now available as a KIND parameter,
  making it possible to use the same code for single and double
  precision applications - simply declare all real variables
  using the KIND facility and link with the corresponding version of
  the PLplot library.

More information is found in bindings/f95/readme_f95.txt


2.2 Drivers


2.2.1 psttf

Initial version of a postscript driver that supports TrueType fonts. 
This allows access to a far greater range of fonts and characters than 
is possible using purely postscript fonts. 

The driver requires the LASi, pango and pangoft2 libraries to work. 
The pango and pangoft2 libraries are widely distributed with most 
Linux distributions at least. The LASi library is not part of most 
distributions at this time. The source code can be downloaded from 
http://eyegene.ophthy.med.umich.edu/lasi/. The library is small and 
easy to build and install.

This driver is disabled by default. To try it you will need to add 
the --enable-psttf --enable-psttfc options when running configure.

2.2.2 wingcc

Performance improvements have been implemented.

2.2.3 wxwidgets

Major upgrade that eliminated a number of bugs and added support for unicode
fonts.

2.2.4 win32

Support for UNICODE and anti-aliasing fonts added


3. Changes Relative to PLplot 5.3.1 (the previous stable release)


3.1 API


3.1.1 Deprecated functions

plParseOpts, plHLS_RGB, and plRGB_HLS are now deprecated and will eventually
be removed from the API.  Use plparseopts, plhlsrgb, and plrgbhls instead
for all language interfaces.


3.1.2 Unicode

PLplot now supports unicode text.  The escape sequence for unicode
characters is

     #[nnn]

where nnn can be decimal or hexadecimal.  Escape sequences are also defined
to change fonts mid-string.

     There are known bugs for our unicode font implementation that are
listed in a special section of the PROBLEMS file, but the current
implementation is good enough so we turn on unicode support by default
for the psc, ps, png, gif, jpeg, and gcw devices.  Although all examples
look better with unicode fonts, the new PLplot unicode capabilities are
especially demonstrated in examples x23 and x24.  (The latter example
requires special fonts to be installed and at run time environment
variables have to be set to access them;  see the self-documentation of
the example 24 source code).


3.1.3 Extended cmap0 support.

There have been many updates to cmap0 handling in the effort to wipe away
all vestiges of the old 16 color limit.  The theoretical limit should now
be 2^15 colors, since the metafile and tk drivers use a short for
communication of the cmap0 index.  Should be *plenty* for the given
application, i.e. fixing colors for lines, points, labels, and such.

     Since both the metafile & tk data stream formats have changed due to
the change from U_CHAR -> short for cmap0 index representation, the format
versions have been upgraded.  If you see something like this:

  $ x02c -dev tk
  Error: incapable of reading output of version 2005a.
  plr_init: Please obtain a newer copy of plserver.
  Command code: 1, byte count: 14
  plr_process1: Unrecognized command code 0
  ...

then you know it's using the wrong version of plserver (in which case
either you didn't install or your path is wrong).

     The second example program (multiple bindings available) contains
a demo of the expanded cmap0 capability.


3.1.4 The PlplotCanvas Widget for Gnome/GTK Applications

PlplotCanvas is a widget for use in Gnome/GTK applications, and
is contained in the libplplotgnome2d library.  A specialzed API is
provided, and bindings are included for the C and Python programming
languages.  Special example programs that demonstrate the use of
PlplotCanvas in Gnome/GTK applications are given for each language
binding.


3.2 Drivers

Some of the drivers have undergone important revisions in order to provide
unicode support.  Several now present TrueType or PostScript fonts by
default, which produces higher-quality output than in the past: see the
examples from the GD (png) driver on the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html .


3.2.1 PostScript

The PostScript driver produces "publication quality" output files.  It
is unicode-enabled, and Type 1 PostScript fonts are used by default.
Although the Type 1 symbol fonts have a significant number of
mathemetical symbols available, some key special symbols (squares,
triangles) are missing.  Thus, by default, Hershey fonts are used to
produce the symbols generated by calls to "plpoin" and "plsym", while
PostScript fonts are used for calls to PLplot routines that plot text
strings (e.g., "plmtex").  If you prefer a pure Hershey font environment,
specify -drvopt text=0, and if you prefer a pure Postscript font
environment, specify -drvopt hrshsym=0.


3.2.2 psttf

An initial version of a new PostScript driver that has all the functionality
of the current postscript driver and also handles TrueType fonts.


3.2.2 GD (png, jpeg, gif)

The GD driver is used to produce png, jpeg, and gif files.  It is
unicode-enabled, and uses TrueType fonts by default.  The examples on
the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html were produced using
this driver.


3.2.3 GCW (Gnome 2)

GCW is a new driver for Gnome 2 that displays plots in a tabbed window.
The driver is unicode-enabled, and uses TrueType fonts.  The GCW user
interface supports zooming, and saves to a variety of output file
formats (ps, psc, png, jpg, gif).  All of the relevant command-line
options for PLplot are supported.

     A specialized API, which allows interaction with the driver,
is provided in libplplotgnome2d.  Bindings are provided for the C and
Python programming languages.


3.2.4 AquaTerm (Mac OS X)

AquaTerm is a new driver for Mac OS X that provides PLplot output in
the AquaTerm graphics terminal program.  Aquaterm is a native Cocoa
graphics terminal program for Mac OS X that provides a familiar look and
feel to Mac users.  More details about AquaTerm and how to install it can
be found at http://aquaterm.sourceforge.net/. The driver is unicode-enabled
and uses default OS X fonts.


3.2.5 Tk

The plframe widget (and by extension, the Tk driver) now saves a plot using
the correct aspect ratio, as represented by the actual window size.  For
complicit output drivers only, e.g. png.


3.2.6 wxwidgets

This is a device driver that runs on the wxWidgets cross-platform GUI (see
http://www.wxwidgets.org/) that has been donated by Werner Smekal. The driver
is unicode-enabled. It currently provides a limited GUI but additional
capabilities are being developed.


4. Note on the Autotools that were used for this release

4.1 Autotools versions

autoconf (GNU Autoconf) 2.59
Written by David J. MacKenzie and Akim Demaille.

automake (GNU automake) 1.9.6
Written by Tom Tromey <tromey@redhat.com>.

ltmain.sh (GNU libtool) 1.5.22 (1.1220.2.365 2005/12/18 22:14:06)

4.2 cf/bootstrap.sh output

Running aclocal (GNU automake) 1.9.6... done
Running autoheader (GNU Autoconf) 2.59... done
Running libtoolize (GNU libtool) 1.5.22... done
Running automake (GNU automake) 1.9.6... done
Running autoconf (GNU Autoconf) 2.59... done
Regenerating libltdl/aclocal+configure... done



PLplot Development Release 5.5.4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot, and represents the 
ongoing efforts of the community to improve the PLplot plotting 
package.  Development releases represent a "work in progress", and 
we expect to provide installments in the 5.5.x series every few weeks.  
The next full release will be 5.6.0.

     If you encounter a problem that is not already documented in the 
PROBLEMS file, then please send bug reports to PLplot developers via the 
mailing lists at http://sourceforge.net/mail/?group_id=2915 .

     Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warrantees, given in the COPYING.LIB 
file.


INDEX

1. Build Instructions
2. Changes relative to PLplot 5.5.3
  2.1 API
    2.1.1 PlplotCanvas
    2.1.2 FCI
  2.2 Drivers
    2.2.1 GCW (Gnome 2)
    2.2.2 wxwidgets
3. Changes relative to PLplot 5.3.1
  3.1 API
    3.1.1 Deprecated functions
    3.1.2 Unicode
    3.1.3 Extended cmap0 support
    3.1.4 The PlplotCanvas Widget for Gnome/GTK Applications
  3.2 Drivers
    3.2.1 PostScript
    3.2.2 GD (png, jpeg, gif)
    3.2.3 GCW (Gnome 2)
    3.2.4 AquaTerm (Mac OS X)
    3.2.5 Tk
    3.2.6 wxwidgets


1. Build Instructions

For detailed instructions on how to build and install PLplot from this
tarball, please read the INSTALL file.  The basic procedure is to execute
the following commands:

  ./configure
  make
  make install

     There are a variety of configuration options, and these are explained 
in the INSTALL document, and below as required.  In particular, if you 
want to install the PLplot Programmer's Reference Manual, please use:

  ./configure --with-prebuiltdoc

Note that it is often helpful to use the --with-pkg-config option if your
system has the pkg-config program (typically *nix systems).


2. Changes relative to PLplot 5.5.3 (the previous development release)


2.1 API


2.1.1 PlplotCanvas

PlplotCanvas method wrappers for PLplot functions have dropped
the prefix "pl" from the function name.  For example, the
method plplot_canvas_plline is now plplot_canvas_line.


2.1.2 FCI

Backwards incompatible API change (with respect to 5.5.3, but not with
respect to 5.3.1 since this involves a new feature within the 5.5.x
development releases).  PL_FCI_MARK changed from 0x10000000 to 0x80000000.
This should only affect users who have been inserting absolute FCI (font
characterization integer) changes within their strings to change the font in
mid-string.

2.2 Drivers


2.2.1 GCW (Gnome 2)

Performance improvements have been implemented.

2.2.2 wxwidgets

Initial version of a device to run on the wxWidgets cross-platform GUI (see
http://www.wxwidgets.org/) has been donated by Werner Smekal.  Most examples
work out of the box, but some (e.g., a segfault for example 8) currently
have problems.  More development of this immature device driver is planned.

3. Changes Relative to PLplot 5.3.1 (the previous stable release)


3.1 API


3.1.1 Deprecated functions

plParseOpts, plHLS_RGB, and plRGB_HLS are now deprecated and will eventually
be removed from the API.  Use plparseopts, plhlsrgb, and plrgbhls instead
for all language interfaces.


3.1.2 Unicode

PLplot now supports unicode text.  The escape sequence for unicode
characters is

     #[nnn]

where nnn can be decimal or hexadecimal.  Escape sequences are also defined
to change fonts mid-string.

     There are known bugs for our unicode font implementation that are 
listed in a special section of the PROBLEMS file, but the current 
implementation is good enough so we turn on unicode support by default 
for the psc, ps, png, gif, jpeg, and gcw devices.  Although all examples 
look better with unicode fonts, the new PLplot unicode capabilities are 
especially demonstrated in examples x23 and x24.  (The latter example 
requires special fonts to be installed and at run time environment 
variables have to be set to access them;  see the self-documentation of 
the example 24 source code).  


3.1.3 Extended cmap0 support.

There have been many updates to cmap0 handling in the effort to wipe away 
all vestiges of the old 16 color limit.  The theoretical limit should now 
be 2^15 colors, since the metafile and tk drivers use a short for 
communication of the cmap0 index.  Should be *plenty* for the given 
application, i.e. fixing colors for lines, points, labels, and such.
 
     Since both the metafile & tk data stream formats have changed due to 
the change from U_CHAR -> short for cmap0 index representation, the format
versions have been upgraded.  If you see something like this:
 
  $ x02c -dev tk 
  Error: incapable of reading output of version 2005a. 
  plr_init: Please obtain a newer copy of plserver. 
  Command code: 1, byte count: 14 
  plr_process1: Unrecognized command code 0 
  ... 
 
then you know it's using the wrong version of plserver (in which case 
either you didn't install or your path is wrong). 

     The second example program (multiple bindings available) contains 
a demo of the expanded cmap0 capability.


3.1.4 The PlplotCanvas Widget for Gnome/GTK Applications

PlplotCanvas is a widget for use in Gnome/GTK applications, and
is contained in the libplplotgnome2d library.  A specialzed API is
provided, and bindings are included for the C and Python programming 
languages.  Special example programs that demonstrate the use of 
PlplotCanvas in Gnome/GTK applications are given for each language 
binding.


3.2 Drivers

Some of the drivers have undergone important revisions in order to provide
unicode support.  Several now present TrueType or PostScript fonts by
default, which produces higher-quality output than in the past: see the
examples from the GD (png) driver on the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html .


3.2.1 PostScript

The PostScript driver produces "publication quality" output files.  It
is unicode-enabled, and Type 1 PostScript fonts are used by default.  
Although the Type 1 symbol fonts have a significant number of 
mathemetical symbols available, some key special symbols (squares,
triangles) are missing.  Thus, by default, Hershey fonts are used to 
produce the symbols generated by calls to "plpoin" and "plsym", while 
PostScript fonts are used for calls to PLplot routines that plot text 
strings (e.g., "plmtex").  If you prefer a pure Hershey font environment, 
specify -drvopt text=0, and if you prefer a pure Postscript font 
environment, specify -drvopt hrshsym=0.


3.2.2 GD (png, jpeg, gif)

The GD driver is used to produce png, jpeg, and gif files.  It is 
unicode-enabled, and uses TrueType fonts by default.  The examples on 
the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html were produced using 
this driver.


3.2.3 GCW (Gnome 2)

GCW is a new driver for Gnome 2 that displays plots in a tabbed window.  
The driver is unicode-enabled, and uses TrueType fonts.  The GCW user 
interface supports zooming, and saves to a variety of output file 
formats (ps, psc, png, jpg, gif).  All of the relevant command-line 
options for PLplot are supported.

     A specialized API, which allows interaction with the driver,
is provided in libplplotgnome2d.  Bindings are provided for the C and 
Python programming languages.


3.2.4 AquaTerm (Mac OS X)

AquaTerm is a new driver for Mac OS X that provides PLplot output in 
the AquaTerm graphics terminal program.  Aquaterm is a native Cocoa 
graphics terminal program for Mac OS X that provides a familiar look and 
feel to Mac users.  More details about AquaTerm and how to install it can 
be found at http://aquaterm.sourceforge.net/.

     The driver is unicode-enabled and uses default OS X fonts.

     To install the AquaTerm driver, use the options "--disable-dyndrivers" 
and "--disable-f77" during the configure step of the install process.
 

3.2.5 Tk

The plframe widget (and by extension, the Tk driver) now saves a plot using 
the correct aspect ratio, as represented by the actual window size.  For 
complicit output drivers only, e.g. png.

3.2.6 wxwidgets

Initial version of a device to run on the wxWidgets cross-platform GUI (see
http://www.wxwidgets.org/) has been donated by Werner Smekal.  Most examples
work out of the box, but some (e.g., a segfault for example 8) currently
have problems.  More development of this immature device driver is planned.




PLplot Development Release 5.5.2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot, and represents the 
ongoing efforts of the community to improve the PLplot plotting 
package.  Development releases represent a "work in progress", and 
we expect to provide installments in the 5.5.x series every few weeks.  
The next full release will be 5.6.0.

If you encounter a problem that is not already documented in the PROBLEMS
file then please send bug reports to PLplot developers via the mailing lists
at http://sourceforge.net/mail/?group_id=2915 .

Please see the license under which this software is distributed, and the
disclaimer of all warrantees, given in the COPYING.LIB file.


INDEX

1. Build Instructions
2. Changes Relative to PLplot 5.5.1
  2.1 API
  2.2 Drivers
3. Changes Relative to PLplot 5.3.1
  3.1 API
    3.1.1 Unicode
    3.1.2 Extended cmap0 support
  3.2 Drivers
    3.2.1 PostScript
    3.2.2 GD (png, jpeg, gif)
    3.2.3 GCW "Gnome Canvas Widget"
    3.2.4 AquaTerm (Mac OS X)
    3.2.5 Tk


1. Build Instructions

For detailed instructions on how to build and install PLplot from this
tarball, please read the INSTALL file.  The basic procedure is to execute
the following commands:

     ./configure
     make
     make install

There are a variety of configuration options, and these are explained in the
INSTALL document, and below as required.  In particular, if you want to
install the PLplot Programmer's Reference Manual (which is required for
documentation on any new feature since PLplot 5.3.1), you must use:

     ./configure --with-prebuiltdoc

Note that it is often helpful to use the --with-pkg-config option if your
system has the pkg-config program (typically *nix systems).


2. Changes Relative to our last development release, PLplot 5.5.1

Progress toward our next major release with documentation improvements and a
substantial number of minor tweaks and bug fixes.

2.1 API

No change.


2.2 Drivers

No change.


3. Changes Relative to our last stable release, PLplot 5.3.1


3.1 API


3.1.1 Unicode

PLplot now allows unicode text, and this is detailed in the PLplot
Programmers Reference Manual in the section on "Setting Character
Attributes".  The escape sequence for unicode characters is

     #[nnn]

where nnn can be decimal or hexadecimal.  Escape sequences are also defined
to change fonts mid-string.

There are known bugs for our unicode font implementation that are listed in
a special section of the PROBLEMS file, but the current implementation is
good enough so we turn on unicode support by default for the psc, ps, png,
gif, jpeg, and gcw devices. Although all examples look better with unicode
fonts, the new PLplot unicode capabilities are especially demonstrated in
examples x23 and x24.  (The latter example requires special fonts to be
installed and at run time environment variables have to be set to access
them, see the self-documentation of the example 24 source code).  


3.1.2 Extended cmap0 support.

There have been many updates to cmap0 handling in the effort to wipe away all
vestiges of the old 16 color limit.  The theoretical limit should now be 2^15
colors, since the metafile and tk drivers use a short for communication of the
cmap0 index.  Should be *plenty* for the given application, i.e. fixing colors
for lines, points, labels, and such.
 
Since both the metafile & tk data stream formats have changed due to the
change from U_CHAR -> short for cmap0 index representation, the format
versions have been upgraded.  If you see something like this:
 
$ x02c -dev tk 
Error: incapable of reading output of version 2005a. 
plr_init: Please obtain a newer copy of plserver. 
Command code: 1, byte count: 14 
plr_process1: Unrecognized command code 0 
... 
 
then you know it's using the wrong version of plserver (in which case either 
you didn't install or your path is wrong). 

The second example program (multiple bindings available) contains a demo of
the expanded cmap0 capability.


3.2 Drivers

Some of the drivers have undergone important revisions in order to provide
unicode support.  Several now present TrueType or PostScript fonts by
default, which produces higher-quality output than in the past: see the
examples from the GD (png) driver on the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html .


3.2.1 PostScript

The PostScript driver is unicode-enabled, and Type 1 PostScript fonts are
used by default.  Although the Type 1 symbol fonts do have a significant
number of mathemetical symbols available some key special symbols (squares,
triangles) are missing so that by default Hershey fonts are used to produce
the symbols generated by calls to "plpoin" and "plsym" while PostScript
fonts are used for calls to PLplot routines that plot text strings (e.g.,
"plmtex").  If you prefer a pure Hershey font environment, specify -drvopt
text=0, and if you prefer a pure Postscript font environment, specify
-drvopt hrshsym=0.

Tranforms to the text (i.e., rotations, shears)
have been dramatically improved, and the PostScript driver now produces
"publication quality" output with the default PostScript fonts for text
and Hershey fonts for special symbols.


3.2.2 GD (png, jpeg, gif)

The GD driver is unicode-enabled, and uses TrueType fonts by default.  The
examples on the PLplot Web site at
http://plplot.sourceforge.net/examples/index.html were produced using this
driver.


3.2.3 GCW "Gnome Canvas Widget"

The GCW "Gnome Canvas Widget" is a new driver that provides PLplot output in
a tabbed Gnome window.  It can alternatively be used to drive a special
widget called the PlplotCanvas that can be embedded in Gnome applications.
The driver, associated widget, and specialized API are fully documented in
the PLplot Programmer's Reference Manual in the sections titled "The GCW
Driver" and "Embedding Plots in Gnome/GTK Applications", respectively.

The GCW driver is unicode-enabled, and uses TrueType fonts by default.

Special examples that demonstrate the use of the PlplotCanvas are provided
for both the C and Python programming languages.

To install the GCW driver, use the "--enable-gcw" option during the
configure step of the install process.

For more information on GTK, see http://www.gtk.org/ .


3.2.4 AquaTerm (Mac OS X)

AquaTerm is a new driver that provides PLplot output in the AquaTerm
graphics terminal program. Aquaterm is a native Cocoa graphics terminal 
program for Mac OS X that provides a familiar look and feel to Mac users. 
More details about AquaTerm and how to install it can be found at 
http://aquaterm.sourceforge.net/.

The driver is unicode-enabled, however it currently only supports the 
default OS X fonts which are not TrueType.

To install the AquaTerm driver, use the options "--disable-dyndrivers" and
"--disable-f77" during the configure step of the install process.
 

3.2.5 Tk

The plframe widget (and by extension, the Tk driver) now saves a plot using the
correct aspect ratio, as represented by the actual window size.  For complicit
output drivers only, e.g. png.




PLplot Development Release 5.5.1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot, and represents the 
ongoing efforts of the community to improve the PLplot plotting 
package.  Development releases represent a "work in progress", and 
we expect to provide installments in the 5.5.x series every few weeks.  
The next full release will be 5.6.0.

Feedback on this development release can be communicated to PLplot
developers via the mailing lists at 
http://sourceforge.net/mail/?group_id=2915 .

Please see the license under which this software is distributed, and the
disclaimer of all warrantees, given in the COPYING.LIB file.


INDEX

1. Build Instructions
  1.1 Tcl
2. Changes
  2.1 API
  2.2 Drivers


1. Build Instructions

For detailed instructions on how to build and install PLplot from this
tarball, please read the INSTALL file.  The basic procedure is to execute
the following commands:

     ./configure
     make
     make install

There are a variety of configuration options, and these are explained in the
INSTALL document, and below as required.  In particular, if you want to
install the PLplot Programmer's Reference Manual (which is required for
documentation on any new feature since PLplot 5.3.1), you must use:

     ./configure --with-prebuiltdoc

Note that it is often helpful to use the --with-pkg-config option if your
system has the pkg-config program (typically *nix).


1.1 Tcl

Due to unresolved problems in the build process, tcl has been temporarily
disabled for this release.

If you must have tcl, here are the instrutions.  DO NOT ATTEMPT THIS
UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING.

  1) Move all plplot files in /usr/lib and /usr/local/lib into a
     temporary directory.

  2) Use the --enable-tcl and --enable-itcl options during configure.


2. Changes


2.1 API


2.2 Drivers




PLplot Development Release 5.5.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a routine development release of PLplot, and represents the ongoing efforts of the community to improve the PLplot plotting package.  The next full release will be 5.6.0.


INDEX

1. Build Instructions
2. Changes
  2.1 API
    2.1.1 Unicode
  2.2 Drivers
    2.2.1 Postscript
    2.2.2 GD (png, jpeg, gif)
    2.2.3 GCW "Gnome Canvas Widget"


1. Build Instructions

For detailed instructions on how to build and install PLplot from this tarball, please read the INSTALL file.  The basic procedure is to execute the following commands:

     ./configure
     make
     make install

There are a variety of configuration options, and these are explained in the INSTALL document, and below as required.  In particular, if you want to build and install the PLplot Programmer's Reference Manual (which is required for documentation on any new feature since PLplot 5.3.1), you must use:

     ./configure --enable-builddoc

Detailed instructions on building the documentation, including the packages that you will need for a successful build, are provided in this tarball under doc/docbook/README.developers.


2. Changes


2.1 API


2.1.1 Unicode

PLplot now allows unicode text, and this is detailed in the PLplot Programmers Reference Manual in the section on "Setting Character Attributes".  The escape sequence for unicode characters is

     #[nnn]

where nnn can be decimal or hexdecimal.  Escape sequences are also defined to change fonts mid-string.

The new unicode capabilities are demonstrated in example x23.


2.2 Drivers

Some of the drivers have undergone important revisions in order to provide unicode support.  Several now present truetype or postscript fonts by default, which produces higher-quality output than in the past: see the examples from the GD (png) driver on the PLplot Web site at http://plplot.sourceforge.net/examples/index.html.


2.2.1 PostScript

The PostScript driver is unicode-enabled, and Type 1 PostScript fonts are used by default.  Because many symbols are missing from the Type 1 PostScript fonts, Hershey fonts are used for calls to "plpoin".  Tranforms to the text (i.e., rotations, shears) have been dramatically improved, and the PostScript driver now produces "publication quality" output.


2.2.2 GD (png, jpeg, gif)

The GD driver is unicode-enabled, and uses truetype fonts by default.  The examples on the PLplot Web site at http://plplot.sourceforge.net/examples/index.html were produced using this driver.


2.2.3 GCW "Gnome Canvas Widget"

The GCW "Gnome Canvas Widget" is a new driver that provides PLplot output in a tabbed Gnome window.  It can alternatively be used to drive a special widget called the PlplotCanvas that can be embedded in Gnome applications.  The driver, associated widget, and specialized API are fully documented in the PLplot Programmer's Reference Manual in the sections titled "The GCW Driver" and "Embedding Plots in Gnome/GTK Applications", respectively.

The GCW driver is unicode-enabled, and uses truetype fonts by default.

Special examples that demonstrate the use of the PlplotCanvas are provided for both the C and Python programming languages.

To install the GCW driver, use the "--enable-gcw" option during the configure step of the install process.

