INDEX
(1) Prepare documentation
(2) Check and potentially fix internal consistency
(3) Update website-related files
(4) Preliminary install and test of a local copy of the PLplot website
(5) Prepare a preliminary version of the ChangeLog file for this release
(6) Prepare the README.release file or press those who have made
(7) Version changes.
(8) Install and test a local copy of the PLplot website
(9) Comprehensive test of PLplot.
(10) Upload the local website to SourceForge:
(5) Prepare a file release:
(4) Publicity for the release announcement.
(5) Immediate preparation for next release cycle


(A1) GNU Privacy Guard (gpg)
(A2) Creating a test tarball from trunk
(A3) Correct computer time

N.B. the order of steps below is important because of the
dependencies between the steps.

(1) Prepare documentation

This step does not depend on other steps.

The steps below entitled 

"Check and potentially fix internal consistency" and
"Install and test a local copy of the PLplot website"

depend on this step.

Update the doxygen documentation (in our source code) and DocBook
documentation (in doc/docbook/src) to reflect any changes (new drivers
or new PLplot functionality) in the current release cycle.  Or
alternatively, press those who made the changes to update the
documentation.

Generate and test our doxygen form of documentation following the
instructions in doc/README.doxygen.  Generate and test our Docbook
documentation following the instructions in
doc/docbook/README.developers.

(2) Check and potentially fix internal consistency

This step depends on the step above entitled 

"Prepare documentation".

This step potentially affects the swig-generated bindings and
the f95, tcl, and ocaml bindings.  Thus, the steps below entitled

""

may depend on this step.

Some of the files in the source tree are generated from other files
in the source tree using build-system targets.  All targets that
have "check" in the name prefix are these kind of targets.  So to get
a complete list of such targets, execute

make help |grep '... check'

in the build tree.  The current such list of targets is

... check_swig_documentation
... check_f95_parameters
... check_tcl_parameters
... check_plplot_h.inc

Note, one of these targets (check_plplot_h.inc) only exists if the
-DGENERATE_PLPLOT_H_INC=ON cmake option is used which in turn requires
that at least the OCaml version of the Perl regular expression library
be installed.  (On debian the associated package name is
libpcre-ocaml-dev.)  Normally, GENERATE_PLPLOT_H_INC is OFF by default
to reduce build dependencies, but to make the complete list of such
targets available you should run the cmake command with the
-DGENERATE_PLPLOT_H_INC=ON option and make sure there are no
OCaml-related warnings in the results.

To actually do the internal consistency checks, run each of the above
targets which typically generate a file in the build tree which is
then compared (using the Unix cmp command) with the file that is being
checked in the source tree.  If the two files are inconsistent (which
can be caused by documentation updates, for example), the cmp command
complains, and you should follow up by doing a diff between the two
files to confirm that the changes are reasonable followed by copying
the build-tree version of the file on top of the source-tree version
and committing the source-tree version.  When this process is completed,
all the above targets should run with no cmp or other errors/warnings
at all, e.g.,

software@raven> make check_swig_documentation check_f95_parameters check_tcl_parameters check_plplot_h.inc
Check that swig_documentation.i is consistent with doc/docbook/src/api.xml
Built target check_swig_documentation
Check that plplot_parameters.h is consistent with the #defines in bindings/swig-support/plplotcapi.i
Built target check_f95_parameters
Check that plplot_parameters.h is consistent with the #defines in bindings/swig-support/plplotcapi.i
Built target check_tcl_parameters
Check that plplot_h.inc is consistent with touchup.ml and plplot_h
Built target check_plplot_h.inc

(3) Update website-related files

This step does not depend on other steps.

The step below entitled

"Install and test a local copy of the PLplot website"

depends on this step.

If necessary, update the examples list in
scripts/htdocs-gen_plot-examples.sh. That list is used to generate the
website example-related files and copy the results to the website. The
list automatically controls what example source code is configured
(for source code that needs that), as well as what example plots and
example thumbnails are generated.  The list also automatically
controls what examples-related files are copied to the website.

Update the project web page, including the examples: edit
www/examples.php to reflect the forthcoming release version number and
any changes to the examples themselves (i.e. pages added or removed
from an existing example or entirely new examples).

Note, the xmlto package that must be installed in order to generate
the DocBook documentation (see doc/docbook/README.developers referred
to above) is also used to generate some of our older release
announcements for the website, and could also be used to generate
present release announcements for the website if desired.  See
www/announce/README for just how easy this step would be.

(4) Preliminary install and test of a local copy of the PLplot website

This step depends on the steps above entitled

"Prepare documentation" and
"Update website-related files"

but does not depend on any steps below.

Follow the directions in the step below entitled

"Install and test a local copy of the PLplot website"

exactly which should produce a final tested local version of the
website except that the RELEASE_DATE might be wrong.

(5) Prepare a preliminary version of the ChangeLog file for this release

# This makes the BASE used below correct.
svn update

svn log --revision BASE:<LAST_RELEASE_REVISION> --verbose  >| ChangeLog.release_preliminary

where <LAST_RELEASE_REVISION> stands for the last revision number of
the previous release which can be determined e.g., by viewing the
ChangeLog.release file from the previous release.  Note the "_preliminary"
suffix to distinguish this from the final result below.


(6) Prepare the README.release file or press those who have made
changes in this release cycle to update that file.

To double-check that file is complete with regards to all major
developments during this release cycle, skim all the commit messages in
ChangeLog.release_preliminary determined above.

(7) Version changes.

Version of PLplot updated above in www/examples.php.  In addition,
update cmake/modules/plplot_version.cmake to reflect the current
RELEASE_DATE (which affects the documentation build) and
version. Also, follow the instructions in that file for updating the
SOVERSION, the minor number and the patch number for each versioned
library created by the PLplot build.

(8) Install and test a local copy of the PLplot website

This step depends on the steps above entitled

"Prepare documentation",
"Update website-related files", and
"Version changes" (since the documentation build depends on the
release date).

The step below entitled

""

depends on this one.

To build the local form of the website (including both the doxygen and
DocBook forms of our documentation) run (on a Linux host that is
capable of building the documentation for the source tree that has all
local changes)

scripts/generate_website.sh

with no arguments.  The script asks you four questions, gives you a chance
to verify your answers, then does all the rest of it (downloading a
throwaway copy of the PLplot source code, building the doxygen and DocBook documentation,
generating the announcements that are part of the base website, uploading
the base website, uploading the documentation, building the examples,
running the examples, uploading the example source code and example results)
automatically.  I (AWI) tested this script using the four answers

Summary:
USERNAME = irwin
GROUPNAME = irwin
HOSTNAME = raven
WEBSITE_PREFIX = /home/irwin/public_html/plplot

(raven is my local computer name, and /home/irwin/public_html is a location
where I can put various websites).  You can check for errors (e.g., due
to missing commands that need to be installed) by running

find /tmp/plplotdoc -name '*.out' |xargs grep -i error

You should install both apache and PHP on your computer.  For Debian stable
(a.k.a. wheezy) that is done (as root) by installing libapache2-mod-php5
and enabling user directories using the command

a2enmod userdir

and editing /etc/apache2/mods-available/php5.conf as indicated in that
file to allow user directories for php.  I am not sure, but I believe
from some google results I found that editing of that file is also
necessary on modern versions of Ubuntu in order to allow php-based websites
like that of PLplot to work when installed in local user directories.

After the above changes, you must restart the apache server.  On
Debian this is done with

service apache2 restart

(When user directories are enabled this way, for the above case
/home/irwin/public_html/plplot/htdocs, browses as
http://raven/~irwin/plplot/htdocs/.)

I test http://raven/~irwin/plplot/htdocs/ by clicking on most links,
checking the documentation looks good, checking the examples are
complete and look good and the source code for each language for
examples is accessible, etc.  Some iterations with the
steps above entitled

"Prepare documentation" and
"Update website-related files"

will likely be required.

N.B. scripts/generate_website.sh uses the local source tree where that
script resides (including all local changes) as the source tree for
generating the local website.  So there is no need to commit every
documentation, example, and version change until you are completely satisfied
with the local website.  But after you _are_ satisfied with the
local website you should commit all your changes so they are available
for generating the tarball and ChangeLog (see below) for this release.

(9) Comprehensive test of PLplot.

Do comprehensive test of the interactive results then the noninteractive
results.

scripts/comprehensive_test.sh --do_ctest no --do_test_noninteractive no
scripts/comprehensive_test.sh  --do_test_interactive no

Enter results of these and all other tests of this release into
README.release.

(10) Create ChangeLog.release

N.B. commit all local changes to the repository so they will be
reflected in the ChangeLog, tagged version of the release, and release
tarball.  And if there are committed changes after this one (except
possibly for commits of this file, README.Release_Manager_Cookbook),
repeat this step so the ChangeLog.release commit is the last trunk
commit for this release cycle (with the exception of the current
file).

Prepare the ChangeLog.release file to keep track of all changes
made for the release.  Use the following commands:

# This makes the BASE used below correct.
svn update

svn log --revision BASE:<LAST_RELEASE_REVISION> --verbose  >| ChangeLog.release

(This destroys the ChangeLog.release file
from the previous release.)  LAST_REVISION should be the same as in
the generation of the preliminary version of this file above.

Check that ChangeLog.release is in the appropriate date range (i.e. only the
changes that were made since the last release should be included) then
(IMPORTANT) commit it so it will also be available for the tagged
release version, the release tarball, etc.  This should be the
last commit for the trunk version of PLplot (see remarks above
about when it is necessary to repeat this step).

(11) Creating a PLplot Release:
Based on suggestions in the svn manual, the PLplot svn archive is configured
as follows:

/trunk/plplot
/tags/older_plplot_versions
/branches/??

For the release, you will be creating (and eventually committing) what is
essentially a branch of PLplot that is a record of the project at the time
of the release. This branch will be located in the /tags directory and
should follow the current naming convention, vX_Y_Z (v5_7_0 for example).

The easiest way to get started is to make a directory on your computer
called, for example plplot_releases. Then in this directory enter the
following command:

svn co https://plplot.svn.sourceforge.net/svnroot/plplot plplot

This will check out the *entire* plplot project, including all the old
versions. Strictly speaking this is not necessary, all you really need
are the trunk and the tags directories, but you'll only have to do this
once and hard drives are pretty big these days.

If you already have this directory, you will need to make sure that
trunk is up to date. In the trunk directory, type:

svn update

Now to create the branch for the new PLplot release, type the following
command in the root plplot directory:

svn copy trunk/ tags/vX_Y_Z

The commit the new tag:

cd tags/vX_Y_Z
svn commit -m "Adding a tag for the X.Y.Z release."

cd to tags/ and enter the following commands: 

export WWW_USER=your_sf_user_name
../trunk/scripts/make_tarball.sh -c -i /tmp/vX_Y_Z -t vX_Y_Z 2>&1 | tee build.log

This script will take a several minutes to execute and does not otherwise
provide a lot of feedback so it will appear as if it is doing nothing for
long periods of time (at least on a slower computer). Be patient. When the
script is finished, the release tarball will be available in the directory
/tmp/plplot-dist-prep/

The "-c" option says to unpack the created tarball, build it with "cmake" and
"make", then test that result with ctest.

The "-i /tmp/vX_Y_Z" specifies the install prefix for the tarball
test configure and runs "make install" after cmake, make and ctest. When the
above command finishes executing you should go to this directory and verify
that the examples build and that plplot_test.sh executes without errors.

The build will fail (without any warning messages on the console) if you 
do not have the necessary tools to build the documentation. It is a good 
idea to verify that you can build the documentation (-DBUILD_DOC=ON).

In the event that problems are found in PLplot during the release
process, corrections should be made to trunk/, the ChangeLog.release
file recreated and committed (see instructions above).  Then merge the
trunk version into the tags/vX_Y_Z branch as follows:

cd tags/vX_Y_Z
svn merge -r A:B /path/to/trunk

Where A and B specify the range of revisions in trunk to be applied
to tags/vX_Y_Z in the merge process. These can be determined by commit
messages.

Sign the release with your plplot Release Manager gpg key:
gpg --default-key YYYYYYYY --detach-sign --armor /tmp/plplot-dist-prep/plplot-X.X.X.tar.gz

A list of your GPG keys can be obtained using the command "gpg --list-keys".

(2) Upload the local website to SourceForge:

Once you are satisfied with the local website, you should upload it to
SourceForge with rsync.

For the above WEBSITE_PREFIX, here is what worked for me from my computer
with the hostname of raven where that WEBSITE_PREFIX directory was
created.

rsync -av --delete \
/home/irwin/public_html/plplot/htdocs/ \
airwin,plplot@web.sourceforge.net:htdocs 

Adjust for your username and WEBSITE_PREFIX.  The ",plplot" part of the
username makes sure you have the right group permissions and default website
directory location for PLplot.  

N.B. the trailing slash on the source directory is essential and means rsync
the contents of this directory with the contents of the destination htdocs
directory.  Without the trailing slash you would rsync the the contents of
the source directory with the contents of the htdocs/htdocs destination
directory which is not what you want to do.  

N.B. the --dry-run option for rsync is a god-send and tells you exactly what
will happen without actually doing it.

(5) Prepare a file release:

Login to sf.net.
Go to the PLplot SourceForge project page.

Upload the Release:
Select Files.
Click on the plplot folder & select "Add folder".
Enter the release name as the "New folder name:", e.g. X.Y.Z Source.
Click on the release folder pop-up menu & select "upload", upload the
release and the gpg signature file from /tmp/plplot-dist-prep/. This can
take a few minutes without much feedback.
Concatenate the README.release and ChangeLog.release files into a single 
README.release file.
Upload the concatenated README.release file.
Click on the "i" or "info" button to mark the tar.gz file as the default 
file to download for all platforms.


Create a news item for the Release:
Select Develop / News
Click "Admin", select any older News Item and copy the test.
Click "Submit"
  Enter "PLplot Release X.Y.Z" as the subject.
  Paste in the text from the older release as the Details.
    Be sure to update the text as appropriate, particularly
    the release numbers.


(4) Publicity for the release announcement.

Jerry: macresearch.org

Barbara Irwin: linuxtoday.com, lwn.net, lxer.com

(5) Immediate preparation for next release cycle

  a. Append the README.release file from the current release onto the front of
     the OLD-README.release file. This is done to preserve a record of the
     significant changes between versions of PLplot.
  b. Update README.release file to reflect significant changes made between
     the current release and the last release.



--- Appendix ---

(A1) GNU Privacy Guard (gpg)
A brief summary of developer relevant gpg commands, see also:
http://dewinter.com/gnupg_howto/english/GPGMiniHowto.html
man gpg

create a new key:
gpg --gen-key

list keys so that you can find the ID of the key you created:
gpg --list-keys

upload your (public) key to GPG key server so that others can obtain it to
verify your signature on the release tarball.
gpg --send-keys 6C58D1AC
(where 6C58D1AC is replaced with the appropriate value from the list-keys
command)


(A2) (Optional) Creating a test tarball from trunk

This step is only required if you have some concerns about how
recent changes may have affected the generated source tarball, and you want
to generate that tarball and test it _before_ you create a tag for the
release.  (The release process for the tag below also generates a tarball
from the tag directory and tests it which is why this trunk version of the
same is optional.)

cd /tmp
/path-to-trunk-source/scripts/make_tarball.sh \
-w https://plplot.svn.sourceforge.net/svnroot/plplot
-c -i /tmp/trunk_install -t trunk 2>&1 | tee build.log

The above exports the current trunk
and uses 

/tmp/plplot-dist-prep/build_dir

to build the distribution source tarball

and uses

/tmp/plplot-dist-prep/ctest_build_dir

to configure and build PLplot from the unpacked tarball, ctest the build
tree, and install the built PLplot in /tmp/trunk_install

Here are the *.out files generated by this process which should be checked.

/tmp/plplot-dist-prep/build_dir/cmake.out
/tmp/plplot-dist-prep/build_dir/make_prebuild_dist.out
/tmp/plplot-dist-prep/build_dir/make_package_source.out
/tmp/plplot-dist-prep/ctest_build_dir/cmake.out
/tmp/plplot-dist-prep/ctest_build_dir/make.out
/tmp/plplot-dist-prep/ctest_build_dir/ctest.out
/tmp/plplot-dist-prep/ctest_build_dir/make_install.out

Here is how the install location should be checked:

cd /tmp/trunk_install/share/plplotX.Y.Z/examples
make >& make_examples.out
./plplot-test.sh --help  #to see what kinds of tests can be run
./plplot-test.sh --device=psc
./plplot-test.sh --device=pscairo
./plplot-test.sh --device=pngcairo
./plplot-test.sh --device=png

etc.  Check the results with, e.g.,

display x01c.pngcairo.01
display x08c.pscairo

where "display" is the general image viewer from the imagemagick suite
of programmes.

(A3) Correct computer time

(While it is useful to have the correct time on your computer, this is no 
longer strictly necessary).
Verify that your computer has the right date and time using the command date.
The easiest way to make sure the time and date are correct is to do the 
following:
1. Install the debian ntpdate package.
2. Execute the command "/usr/sbin/ntpdate pool.ntp.org", which you will
   have to do as root.
This will immediately change your system clock. It is not recommended if you
have other apps running on your system that expect time to increase in a
smooth and linear fashion.

If you would like your computer to always have the correct time and date, you 
can install the debian ntp package, which must be properly configured to work.
Some notes about how to do this can be found in the PLplot mailing list 
archive. Look for the thread titled "PLplot 5.7.2 is now available" dated 
Jan 22/23 2007.

