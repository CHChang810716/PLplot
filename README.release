PLplot Release 5.11.0
~~~~~~~~~~~~~~~~~~~~
This is a release of the PLplot plotting package. It represents the
ongoing best efforts of the PLplot community to improve this
package, and it is the only version of PLplot that we attempt
to support.  Releases in the 5.x.0 series should be available several
times per year.

If you encounter a problem that is not already documented in the
PROBLEMS file or on our bug tracker, then please send bug reports to
PLplot developers via the mailing lists at
<http://sourceforge.net/p/plplot/mailman/> (preferred for initial
discussion of issues) and, if no quick resolution is possible, then the
issue should be placed on our
bug tracker at <http://sourceforge.net/p/plplot/bugs/>.

Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.

INDEX

1. OFFICIAL NOTICES FOR USERS

2. Changes relative to the previous release

3. Tests made for the current release

1. OFFICIAL NOTICES FOR USERS

1.1 Backwards incompatible change.

We have completely removed the CMake variable LIB_TAG from our build
system.  The effect of this change is the "d" suffix has been dropped
from our library names that had this suffix before (e.g, libplplotd
==> libplplot), dropped from the plplot pkg-config *.pc files used to
produce pkg-config results (e.g., plplotd.pc ==> plplot.pc), and
dropped from the directory name where the device driver dll's are
installed (i.e., $INSTALL_PREFIX/lib/plplot$PLPLOT_VERSION/driversd
==> $INSTALL_PREFIX/lib/plplot$PLPLOT_VERSION/drivers).  This "d"
suffix was a leftover from the days when we routinely built both
single-precision and double-precision forms of the PLplot library,
where the double-precision form was assigned the "d" suffix.  This
suffix was confusing (many users assumed it meant "debug" rather than
its actual meaning of "double precision"), did not normally
distinguish from the single-precision case since that case was rarely
built or tested, and was not uniformly applied to all our libraries
(because we produced single- and double-precision variants for only a
subset of our libraries).  Also, the single- or double-precision
variants of our library builds are only a small subset of the possible
build variations that can be produced with our build system so the
only safe and reliable way we can recommend for users to explore these
many different possible build variations is for them to use
independent build trees and install prefixes for each of the
variations rather than imposing a variety of easy-to-misinterpret
library, pkg-config, and driver install location suffixes.

1.2 Backwards-incompatible API change for our f95 bindings

We have renamed the following Fortran modules

plplot_types ==> plplot_graphics
plplot_flt ==> plplot_types

These name changes make sense since the new plplot_graphics module
defines just a graphics type and the new plplot_types module defines
fundamental real and integer types used by the PLplot API.

We highly recommend that users employ only the "use plplot" statement
in their fortran codes. Future name changes for the plplot module are
extremely unlikely (to say the least). Also, the plplot module "uses"
every other Fortran module we define and therefore makes all modules
for PLplot available to the user regardless of their name.  Thus, this
recommended "use" strategy should avoid any repercussions from the
above or future name changes for the modules that are "used" by the
plplot module.

1.3 Backwards Incompatible change to C++ API

The plstream methods fill, tr0, tr1, tr2, and tr2p have been changed,
fixing a bug where the correct stream was not selected. This means
these functions are no longer static and can no longer be used as
callbacks in the shades method and its variants, the cont method, the
imagefr method, and the vect method. Instead a plcallback namespace
has been created which includes these methods as C-style
functions. Code which previously used the plstream methods above will
need to be recompiled and rebuilt using the plcallback versions (i.e.,
replace all plstream::fill callback use by plcallback::fill and
similarly for tr0, tr1, tr2, and tr2p).  Please see the documentation
for a full description.

2. Changes relative to the previous release

2.1 Update the parts of the build system that find Tcl-related software.

The build system now checks extensively for the consistency of the
Tcl/Tk/Itcl/Itk/Iwidgets components that are found.

2.2 Update the Tcl-related epa_build configurations.

The epa_build subproject of PLplot design goal is to make it easy to
build PLplot dependencies on all platforms.

Previously version 8.6 of Tcl/Tk and version 3 of Itcl/Itk, version 4
of Itcl/Itk, and versions 4.0 and 4.1 of Iwidgets could be epa_built
on Linux, but now the epa_build configuration files have been updated
so these builds also succeed on MinGW/MSYS.

2.3 Update the PLplot build system so that the Tcl/Tk/Itcl/Itk/Iwidgets
bindings and examples work on MinGW/MSYS.

2.4 Make many minor build-system fixes so that comprehensive tests
finally work almost completely on MinGW/MSYS.

2.5 Update api.xml to be consistent with our public API defined by plplot.h.

This substantial improvement to our DocBook documentation for our
public API has been made possible by the "check" application written
by Hǎiliàng Wáng (see
https://github.com/hailiang/go-plplot/tree/master/c/check) which uses
gccxml to convert the API information in plplot.h into XML and
compares those results (names of functions in our public API, and for
each of those functions, number of arguments, names of arguments, and
types of arguments) with the corresponding information in api.xml.
The original report from the check_api_xml_consistency target (which
runs the check programme) showed ~150 inconsistencies between api.xml
and our public API including several functions in our public API that
were not documented at all in api.xml.  That number of inconsistencies
has now been reduced to zero which constitutes a substantial upgrade
in the quality of our API documentation.

2.6 Many plbuf improvements

We removed the disabled temporary file buffer code in plbuf.c to
improve code readability. (The temporary file buffer was superseded in
2006 when the much more efficient memory buffer approach was
implemented.) We improved plbuf efficiency in two additional ways; (1)
the rd_data_no_copy() internal function was implemented to avoid
needless memory allocation and copying in plbuf.c; and, (2), a
two-byte alignment is maintained in the plot buffer as most
architectures have better memory access performance with an even byte
alignment.  We implemented an experimental plot buffer import as a
PLESC operation to support wxwidget development.  We improved the plot
state save at the beginning of plot (BOP) in order to fix rendering
artifacts when plots were resized. We have improved the
text handling operations in the buffer; however, the cairo driver does
not correctly handle resizes, and it uses an alternate text
processing method that is currently disabled in the plot buffer.  We
corrected a bug in pattern fills, and the plot buffer now will only
contain the PLSTATE_FILL operation rather than both PLSTATE_FILL and
the individual LINE commands of the fill.  This was causing a line
doubling effect when plots were resized.

2.7 plmeta/plrender now under active development

The plmeta device driver is a useful idea which allows users to save
plots in a meta format which can then be read back in by plrender and
plotted with any PLplot device.  

The plmeta/plrender code fell into disrepair many years ago, but now
it is being actively developed again.  We classify the new version of
this code as experimental so that we continue to disable it by default
(i.e., the user has to use the -DPLD_plmeta=ON cmake option in order
to try plmeta/plrender.) 

So far we have implemented an experimental plot metafile input
function, plreadmetafile(), to provide an integrated read/write
capability into the core of PLplot.  In conjunction, we updated the
plmeta driver to support a transition to a new format.  A key change
is storing the raw string data used to represent text and plot symbols
into the metafile instead of the rendered characters.  We have
disabled the new features for this release in order to prevent
breaking compatibility with the existing format, but that should
change as development continues.

3. Tests made for the current release.

The most recent test results for PLplot are publicly available at
<http://sourceforge.net/p/plplot/wiki/Testing_PLplot#Testing%20Reports>