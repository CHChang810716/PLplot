PLplot Release 5.11.2

This is a release of the PLplot plotting package. It represents the
ongoing best efforts of the PLplot community to improve this package,
and it is the only version of PLplot that we attempt to support.
Releases in the 5.x.y series should be available several times per
year.

If you encounter a problem with this release that is not already
documented on our bug tracker, then please send bug reports to PLplot
developers via our mailing lists (preferred for initial discussion of
issues) at <http://sourceforge.net/p/plplot/mailman/>. If it turns out
no quick resolution is possible via mailing-list discussion, then the
issue should be placed on our bug tracker at
<http://sourceforge.net/p/plplot/bugs/>.

Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.
________________________________________________________________

CONTENTS

1. OFFICIAL NOTICES FOR USERS

1.1 Octal interpretation removed from numerical escape sequences in text
1.2 Backwards incompatibilities in Fortran

2. Improvements relative to the previous release

2.1 Bug fixes
2.2 Rewrite the CMake Ada language support
2.3 Rewrite the Fortran binding
2.4 Supply old Fortran binding and examples option
2.5 Backwards incompatibilites introduced by the new Fortran binding
2.6 Remove "c_" prefix from our C API

3. PLplot testing

________________________________________________________________

1. OFFICIAL NOTICES FOR USERS

1.1 Octal interpretation removed from numerical escape sequences in text

The undocumented feature where leading 0's in numerical escape
sequences meant the whole number was interpreted as octal rather than
decimal has been removed, i.e., if the number string starts with 0x or
0X then the interpretation of the number is hexadecimal (as before),
but all other number strings starting with 0 are interpreted as
decimal rather than octal.  Thus, the decimal interpretation of
"#(0123)" and "#(123)" is now identical, and there are no errors
introduced by leading-zero decimal escape sequences such as "#(0855)".

1.2 Backwards incompatibilities in Fortran

The new implementation of the Fortran binding has introduced a
significant number of backwards incompatibilities.  See 2.5 below for
the details.

________________________________________________________________

2. Improvements relative to the previous release

2.1 Bug fixes

The bug fixes in this release are noted in the commit messages
collected in ChangeLog.release.

2.2 Rewrite the CMake Ada language support

The CMake-based Ada language support has been totally rewritten
based on the official CMake-3.4.0 language support that is used for
C++.  This rewrite should make the Ada language support much easier to
understand since the diff results comparing Ada and CMake-3.4 C++
language support are quite small if some Ada to CXX translations are
done with sed.  Also, it is considered to be a major advantage that
the new Ada language support is based on modern CMake language support
principles and infrastructure as opposed to whatever was available for
language support a decade ago when the old Ada language support was
implemented.

2.3 Rewrite the Fortran binding

The Fortran binding has been completely rewritten using the powerful
capabilities of the iso_c_binding module that is available for modern
Fortran.  There are several advantages to this rewritten binding.

(i) It is implemented using much more compact code with none
of the interfacing done in C (i.e., the plplotf95c library has
now been removed completely).  

(ii) It is much easier to understand and maintain than the previous
effort.

(iii) Linking issues are simplified.  (nm --undefined-only shows that
the Fortran examples only need to be linked to libplplotf95 and not
libplplotf95c or libplplot)

(iv) The "c_" prefixes on our C API that were required to avoid
nameclashes with the Fortran versions of the routines can be dropped.
See 2.4 for more details about this simplification.

(v) The Fortran user will no longer be forced to use one particular
Fortran real precision that agrees with however PLFLT was configured
(which can be double or single precision depending on how the PLplot
library build was configured). Instead, they can conveniently use
single precision or double precision (even mixed in the same code so
long as a given PLplot call has consistent real precision), and our
new Fortran binding does the appropriate conversions to PLFLT using
modern Fortran's overloading mechanism.

N.B. support for kind=plflt Fortran real type corresponding to the
PLFLT C type remains for backwards compatibility, but this
is strongly deprecated and will be removed eventually so users are currently encouraged not
to use kind=plflt and instead use whatever single or double precision
is best for their needs.

FIXME.  Replace all use of plflt by example_flt in
the examples and set this type in the demolib code to be kind(1.0d0)
with commentary it could be kind(1.0) instead.

2.4 Supply old Fortran binding and examples option

Because the new Fortran binding is not completely compatible with the
old one (see 2.5 below for the list of incompatibilities) we have
supplied a -DPL_DEPRECATED_f95=ON CMake option (which defaults to
OFF) that uses a snapshot of the old Fortran binding and associated
Fortran examples rather than the new versions.

We have tested the new Fortran bindings and examples on several
different Fortran platforms accessible to us so it should normally
work well, but this option should be suitable for emergency conditions
where you just cannot get the new Fortran binding to work properly.
But in this case please let us know about those issues so we can fix
them.  Also, this -DPL_DEPRECATED_f95=ON option should extend the
length of time that the old Fortran 95 binding is available, but that
old binding will not be available indefinitely so at some point (after
discussions on the plplot-general list concerning how many users are
still using this option) the -DPL_DEPRECATED_f95=ON option will be
removed and user choices will be reduced to either using an old PLplot
version or adjusting your software for the incompatibilities mentioned
below for the new Fortran binding.  And if you start that process
immediately, you will likely get better help with it since we have
just gone through that process for the Fortran examples (which should
be your first guide concerning how to use the new Fortran binding).

2.5 Backwards incompatibilites introduced by the new Fortran binding

The rewritten Fortran binding does have a significant number of
backwards-incompatible API changes we have decided to introduce at
this time to improve consistency and simplicity as much as possible.
As always, the examples are your best documentation on how to
use this new Fortran API.  But for those experienced with the
old API, here is the list of changes.

(i) The new Fortran binding only maps C routines that have return
values to Fortran functions and C routines with no return values to
Fortran subroutines.  The strict application of this rule means that
plparseopts, plsetopt, and (FIXME) plGetCursor have been changed from
Fortran subroutines to Fortran functions.  This requires changes to
users' code similar to the following:

call plparseopts(...)

changed to 

integer :: plplarseopts_rc
[...]
plparseopts_rc = plparseopts(...)

which will now allow our Fortran users to respond to error conditions
for plparseopts, plsetopt, and plGetCursor.

(ii) Only the redacted form of API (with all redundant dimension
arguments removed) is supported.  In order to comply strictly with
this rule the list of functions that have been changed from
non-redacted to redacted form is the following:

pllegend (drop redundant nlegend argument), and
plpat (drop redundant nlin argument).

(iii) Multiple arrays in a redacted argument list should have
identical sizes for dimensions that are designed for the same purpose.
This rule is automatically enforced for our 4 languages (Python, Java,
Lua, and Octave) where the binding has been created by swig, and now
we enforce this same rule for the Fortran case.  For example, pllegend
has 14 arrays in its argument list, and we now calculate nlegend from
one of them, and check the remainder of those arrays all have that
identical size.  (The old Fortran binding was much sloppier about
this.)  For those cases where you are using static or allocatable
arrays of too large a size, it is straightforward to comply with this
consistency rule by taking the appropriate array slice in the argument
list, e.g., "text_colors(1:nlegend), text(1:nlegend)" in the pllegend
argument list.

FIXME.  Still haven't looked systematically at this following
what is done in bindings/swig-support/plplotcapi.i.  Ultimately, there
should be a complete list of functions here where the API has
been changed because of this.

(iv) Fortran logical arguments are strictly used for all cases where
the corresponding C argument is PLBOOL.  In order to comply strictly
with this rule, the list of functions whose arguments have changed
from integer to logical or functions where an extra signature with
integer argument rather than correct logical argument has been removed
is the following:

plarc (last argument),
plspal1 (last argument), and
plconfigtime (fifth argument).

(v) For those rare cases where the actual real precision
cannot be automatically specified by the user via the precision of the
real arguments which are used for a call to a subroutine or function,
then the only choice we supply is the double precision one regardless
of the underlying precision of the C plplot library.

The instances of this issue are the real return value of the function
plrandd, real elements of the defined type PLGraphicsIn, real arguments
of Fortran callback functions that are used as arguments
for plstransform and pllabelfunc, and the
pre-defined real parameters PL_NOTSET, PL_PI, and PL_TWOPI.

(vi) The experimental and far from uniform support for the kind=plint and
kind=plunicode Fortran integer types has now been removed.  Instead,
ordinary default kind integers are used for the Fortran types
corresponding to the PLINT and PLUNICODE C types.

(vii) Support for a single integer argument for plstransform that is
unused is dropped because calling plstransform with no arguments
has exactly the same effect.

(viii) A rectangular logical argument for all variants of plshade and
plshades has been added to give the same control of this argument to
Fortran users that is currently available to C users.

(ix) The old support for translating any "\n" characters in Fortran
character string arguments to "char(10)" has now been removed.
Instead, a user should use achar(10) (not char(10) which may not give
you the desired line feed character on certain platforms) to do this
job instead. So if the old character string argument was

"Heale\nDown"

that should be replaced by

"Heale"//achar(10)//"Down"

(Compare examples/old_f95/x19f.f90 with examples/f95/x19f.f90.)  The
net result of the achar(10) method is that the Fortran character
string is reliably on all platforms translated at the C level to
"Heale\nDown" (where in this case "\n" has a special character meaning
of linefeed unlike the Fortran case.  After that, how our device
drivers currently interpret that special C character for linefeed is
idiosyncratic to each of our device drivers.)

2.5 Remove "c_" prefix from our C API

See 2.3 for why this simplification is possible.

FIXME. This change has not been done yet, but if/when it is done more
details should be added here such as, for example replacing

#define    plcol0                   c_plcol0

with

#define c_plcol0 plcol0

where the latter is only there to assure backwards compatibility
for those who are still using the prefixed names for our C API.

________________________________________________________________

3. PLplot testing

Comprehensive tests of this release are documented in
<http://sourceforge.net/p/plplot/wiki/Testing_PLplot#Testing%20Reports>.
In addition, developers and users who have used the git master tip
version for all their plotting needs during this release cycle have
provided additional important testing of this release of PLplot.
________________________________________________________________
