PLplot Release 5.11.2

This is a release of the PLplot plotting package. It represents the
ongoing best efforts of the PLplot community to improve this package,
and it is the only version of PLplot that we attempt to support.
Releases in the 5.x.y series should be available several times per
year.

If you encounter a problem with this release that is not already
documented on our bug tracker, then please send bug reports to PLplot
developers via our mailing lists (preferred for initial discussion of
issues) at <http://sourceforge.net/p/plplot/mailman/>. If it turns out
no quick resolution is possible via mailing-list discussion, then the
issue should be placed on our bug tracker at
<http://sourceforge.net/p/plplot/bugs/>.

Please see the license under which this software is distributed
(LGPL), and the disclaimer of all warranties, given in the COPYING.LIB
file.
________________________________________________________________

CONTENTS

1. OFFICIAL NOTICES FOR USERS

1.1 Octal interpretation removed from numerical escape sequences in text
1.2 Backwards incompatibilities in Fortran

2. Improvements relative to the previous release

2.1 Bug fixes
2.2 Rewrite the CMake Ada language support
2.3 Rewrite the Fortran binding
2.4 Remove "c_" prefix from our C API

3. PLplot testing

________________________________________________________________

1. OFFICIAL NOTICES FOR USERS

1.1 Octal interpretation removed from numerical escape sequences in text

The undocumented feature where leading 0's in numerical escape
sequences meant the whole number was interpreted as octal rather than
decimal has been removed, i.e., if the number string starts with 0x or
0X then the interpretation of the number is hexadecimal (as before),
but all other number strings starting with 0 are interpreted as
decimal rather than octal.  Thus, the decimal interpretation of
"#(0123)" and "#(123)" is now identical, and there are no errors
introduced by leading-zero decimal escape sequences such as "#(0855)".

1.2 Backwards incompatibilities in Fortran

The new implementation of the Fortran binding has introduced some
backwards incompatibilities.  See 2.3 below for the details.

________________________________________________________________

2. Improvements relative to the previous release

2.1 Bug fixes

The bug fixes in this release are noted in the commit messages
collected in ChangeLog.release.

2.2 Rewrite the CMake Ada language support

The CMake-based Ada language support has been totally rewritten
based on the official CMake-3.4.0 language support that is used for
C++.  This rewrite should make the Ada language support much easier to
understand since the diff results comparing Ada and CMake-3.4 C++
language support are quite small if some Ada to CXX translations are
done with sed.  Also, it is considered to be a major advantage that
the new Ada language support is based on modern CMake language support
principles and infrastructure as opposed to whatever was available for
language support a decade ago when the old Ada language support was
implemented.

2.3 Rewrite the Fortran binding

The Fortran binding has been completely rewritten using the powerful
capabilities of the iso_c_binding module that is available for modern
Fortran.  There are several advantages to this rewritten binding.

(i) It is implemented using much more compact code with virtually none
of the interfacing done in C (i.e., the plplotf95c library has shrunk
to a tiny fraction of its previous size).

(ii) It is much easier to understand and maintain than the previous
effort.

(iii) Linking issues are simplified.  (nm --undefined-only shows that
the Fortran examples only need to be linked to libplplotf95 and not
libplplotf95c or libplplot)

(iv) The "c_" prefixes on our C API that were required to avoid
nameclashes with the Fortran versions of the routines can be dropped.
See 2.4 for more details about this simplification.

(v) The Fortran user will no longer be forced to use one particular
Fortran real precision that agrees with however PLFLT was configured
(which can be double or single precision depending on how the PLplot
library build was configured). Instead, they can conveniently use
single precision or double precision (even mixed in the same code so
long as a given PLplot call has consistent real precision), and our
new Fortran binding does the appropriate conversions to PLFLT using
modern Fortran's overloading mechanism.

The rewritten Fortran binding does have some backwards incompatible
API changes we have decided to introduce at this time to improve
consistency.

(i) In general, only the redacted form of API (with all redundant
dimension arguments removed) is supported.  This was largely true of
the old Fortran binding as well, but in particular the non-redacted
form of pllegend call that includes the redundant nlegend argument
that was present (by accident) in the old Fortran API has now been
deliberately removed to be consistent with the rest of the Fortran API
in this regard.

(ii) In general, multiple arrays in a redacted argument list should
have identical sizes for dimensions that are designed for the same
purpose.  This rule is automatically enforced for our 4 languages
(Python, Java, Lua, and Octave) where the binding has been created by
swig, and now we enforce this same rule for the Fortran case.  For
example, pllegend has 14 arrays in its argument list, and we now
calculate nlegend from one of them, and check the remainder of those
arrays all have that identical size.  (The old Fortran binding was
much sloppier about this.)

(iii) In general, Fortran logical arguments are used for all cases
where the corresponding C argument is PLBOOL.  For example, the last
plspal1 argument type has been changed from integer to logical to be
consistent with this rule.

(iv) In general, for those rare cases where there are defined types or
predetermined parameters that involve real types, we supply both
*_single and *_double varieties, and the user must pick one of those
to use.  The (rare) cases of this issue we are aware of are the
defined types PlGraphicsIn_single and PlGraphicsIn_double, and the
predetermined real parameters PL_NOTSET_SINGLE, PL_PI_SINGLE, and
PL_TWOPI_SINGLE and PL_NOTSET_DOUBLE, PL_PI_DOUBLE, and
PL_TWOPI_DOUBLE.  These replace the (double precision) instances that
were used before,

FIXME.  This is our current plan (already implemented for
PlGraphicsIn_single and PlGraphicsIn_single, but not for the rest).
However, on second thought it would be better to preserve the old
double precision definitions (with no _double suffix) for backwards
compatiblity, and also provide *_single versions for the new Fortran
binding.

2.4 Remove "c_" prefix from our C API

See 2.3 for why this simplification is possible.

FIXME. This change has not been done yet, but if/when it is done more
details should be added here such as, for example replacing

#define    plcol0                   c_plcol0

with

#define c_plcol0 plcol0

where the latter is only there to assure backwards compatibility
for those who are still using the prefixed names for our C API.

________________________________________________________________

3. PLplot testing

Comprehensive tests of this release are documented in
<http://sourceforge.net/p/plplot/wiki/Testing_PLplot#Testing%20Reports>.
In addition, developers and users who have used the git master tip
version for all their plotting needs during this release cycle have
provided additional important testing of this release of PLplot.
________________________________________________________________
