/*
Copyright 2007  Hezekiah M. Carty

This file is part of ocaml-plplot.

ocaml-plplot is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Foobar is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ocaml-plplot.  If not, see <http://www.gnu.org/licenses/>.
*/

// This is a simplified and modified version of the plplot.h file.
#include "plplot_h.inc"

// These functions require(d) some manual assistance to get them to work
// properly
#define PLINT int
#define PLFLT double
#define PLBOOL int

[mlname(plcont)] void ml_plcont(
    [size_is(nx,ny)] PLFLT **f, PLINT nx, PLINT ny,
    PLINT kx, PLINT lx, PLINT ky, PLINT ly,
    [size_is(nlevel)] PLFLT *clevel, PLINT nlevel);

[mlname(plshade)] void ml_plshade(
    [size_is(nx,ny)] PLFLT **a, PLINT nx, PLINT ny,
    PLFLT left, PLFLT right, PLFLT bottom, PLFLT top,
    PLFLT shade_min, PLFLT shade_max,
    PLINT sh_cmap, PLFLT sh_color, PLINT sh_width,
    PLINT min_color, PLINT min_width,
    PLINT max_color, PLINT max_width,
    PLBOOL rectangular);

[mlname(plshades)] void ml_plshades(
    [size_is(nx,ny)] PLFLT **a, PLINT nx, PLINT ny,
    PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
    [size_is(nlevel)] PLFLT *clevel, PLINT nlevel, PLINT fill_width,
    PLINT cont_color, PLINT cont_width,
    PLBOOL rectangular);

[mlname(plimagefr)] void ml_plimagefr(
    [size_is(nx, ny)] PLFLT **idata, PLINT nx, PLINT ny,
    PLFLT xmin, PLFLT xmax, PLFLT ymin, PLFLT ymax,
    PLFLT zmin, PLFLT zmax,
    PLFLT valuemin, PLFLT valuemax);

[mlname(plvect)] void ml_plvect(
    [size_is(nx,ny)] PLFLT **u, [size_is(nx,ny)] PLFLT **v,
    PLINT nx, PLINT ny, PLFLT scale);

[mlname(plmap)] void ml_plmap(
    [string] const char *type,
    PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat);

[mlname(plmeridians)] void ml_plmeridians(
    PLFLT dlong, PLFLT dlat,
    PLFLT minlong, PLFLT maxlong, PLFLT minlat, PLFLT maxlat);

// XXX The following are non-standard functions which help retrieve some extra
// information from PLplot.
int plg_current_col0(void);
float plg_current_col1(void);
int plgwid(void);
float plgchrht(void);

#define QUOTEME(x) #x
#define RAW_ML(x) quote(mlmli, QUOTEME(x));

// Setting the translation function for the contouring and plotting functions
quote(ml,
    "let set_pltr (f : float -> float -> (float * float)) =\
     Callback.register \"caml_plplot_plotter\" f");
quote(mli, "val set_pltr : (float -> float -> (float * float)) -> unit");
quote(ml, "let unset_pltr () = Callback.register \"caml_plplot_plotter\" 0");
quote(mli, "val unset_pltr : unit -> unit");

// Setting the translation function for the map drawing functions
quote(ml,
    "let set_mapform (f : float -> float -> (float * float)) =\
     Callback.register \"caml_plplot_mapform\" f");
quote(mli, "val set_mapform : (float -> float -> (float * float)) -> unit");
quote(ml,
    "let unset_mapform () = Callback.register \"caml_plplot_mapform\" 0");
quote(mli, "val unset_mapform : unit -> unit");

// Setting the "defined" function for the shading functions
quote(ml,
"let set_defined (f : float -> float -> int) =\
  Callback.register \"caml_plplot_defined\" f");
quote(mli, "val set_defined : (float -> float -> int) -> unit");
quote(ml,
    "let unset_defined () = Callback.register \"caml_plplot_defined\" 0");
quote(mli, "val unset_defined : unit -> unit");

// Hand-translated GRID_* flags for use with plgriddata
quote(mlmli, "type plplot_grid_method_type = \
                GRID_CSA | \
                GRID_DTLI | \
                GRID_NNI | \
                GRID_NNIDW | \
                GRID_NNLI | \
                GRID_NNAIDW");

// Hand-translated PL_PARSE_* flags for use with plparseopts
quote(mlmli, "type plplot_parse_method_type = \
                PL_PARSE_PARTIAL | \
                PL_PARSE_FULL | \
                PL_PARSE_QUIET | \
                PL_PARSE_NODELETE | \
                PL_PARSE_SHOWALL | \
                PL_PARSE_OVERRIDE | \
                PL_PARSE_NOPROGRAM | \
                PL_PARSE_NODASH | \
                PL_PARSE_SKIP");

RAW_ML(external plgriddata : float array -> float array -> float array -> float array -> float array -> plplot_grid_method_type -> float -> float array array = "ml_plgriddata_bytecode" "ml_plgriddata")
RAW_ML(external plparseopts : string array -> plplot_parse_method_type array -> int = "ml_plparseopts")

// Taken from the plplot.h 3D plot style definitions
// XXX TODO This is currently unused...
/*
enum plot_style_enum { DRAW_LINEX = 1, DRAW_LINEY = 2, DRAW_LINEXY = 3, MAG_COLOR = 4,
                       BASE_CONT = 8, TOP_CONT = 16, SURF_CONT = 32, DRAW_SIDES = 64,
                       FACETED = 128, MESH = 256 };
typedef [set] enum plot_style_enum plot_style;
*/
