How to build yourself a python with PLplot support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

General:

plmodule.c and pyqt_plmodule.c are the two key files used for adding PLplot
API to python.  The first of these adds the core functions while the second
of these implements special routines that help with the pyqt GUI
functionality.  If you need to add more PLplot API to python, edit the
appropriate one of these files following what is done for other PLplot API
that has already been implemented.  It is possible that we might want to
implement other modules as well in the future.  For this case grep through
all the ../../cf/*.in files for anything to do with plmodule in order to see
how to configure this for the ordinary case (see next paragraph) of
dynamically loadable python modules.

There are two possibilities for a python front-end to PLplot.  You can try
to build a dynamically loadable python PLplot modules, or you can modify the
python build to include the PLplot modules.  The former is what configure
will try to do if you use --enable-python (which is the default).  This is
the procedure that is recommended by the Python 2.1 documentation.  It has
been thoroughly tested under Linux (although we have received no reports for
Unix) and works well except for the limitation that we have not yet
implemented a clone of the plframe widget. (And under this approach a clone
is required and not the real thing because apparently there is no way to
hook up our plframe widget with the python tkinter environment without
modifying python.) However, there is a beginnings of a pyqt widget (try
prova.py from examples/python) that does work with the dynamically loadable
approach so that may eventually get generalized to a clone of our plframe
widge (or even something more powerful).

The remainder of this document describes an alternative build approach that
does make the plframe widget available under python by rebuilding python
itself.  Geoffrey Furnish tells us this method is still working, but the
instructions have not been updated since 1996 so there may be some changes
which you should ask him about.

Configure plplot with --disable-python, and follow these steps.  This
will be a little bit of work, and you may have to think on your
feet...

1) First Build python in the usual way.  PLplot has been tested with:
	python 1.4b3
	NumPy-1.0a5
	NumPyLib-1.0a5
	Tcl 7.5
	Tk 4.1

   For least hassle, I suggest duplicating this slection of tool
   versions, and building python with both Numerical extension and Tk
   support. Note in particular that the Numerical Extension
   instructions are not quite fully detailed.  You may have to "help"
   it out a little.  At the end, you should be able to do:

	% python
	>>> from Numeric import *

   If you can do that, you are probably okay.

   Be sure to use the same --prefix when configure Tcl/Tk and Python,
   and any other packages (like maybe BLT, or whatever else you want
   to use) and install them all.  For example, use for all three
   packages: 

	% configure --prefix=$HOME/test
	% make
	% make install

2) Configure PLplot against this toolset.  Use the same --prefix when
   configuring PLplot.  For example, 

	% configure --prefix=$HOME/test --with-double --disable-python
	% make
	% make install

3) Now you are ready to hack PLplot support into python, and rebuild
   it.  Start by copying the PLplot plmodule stuff into the Python
   build tree's Modules directory.  That is the files:

	plplot/bindings/python/plmodule.c
	plplot/bindings/python/plmodule2.c
	plplot/bindings/python/plmodule.h

   And edit Python's Setup file to include plmodule.  For example, you
   could add the liine:

	pl plmodule.c plmodule2.c -DDOUBLE -I$HOME/test/include

   (Replace "$HOME/test" above with whatever prefix you gave when
   configuring python/tcl/tk/plplot).

   In order to get PLplot's plframe support, you'll also have to
   modify the tkinter module, and get PLplot's *.py Tk support files
   installed.  I suggest making a subdirectory Lib/plplot, and putting
   the plplot/bindings/python/*.py files into it.  Then edit Python's
   top level Makefile to include the plplot subdirectory in the list
   of things to install.  Search on "tkinter", and add plplot to that
   line.  If you haven't already, you'll probably want to add
   "Numeric" there as well.  Now you also need edit Setup to add the
   plplot support files to the python path, just as is done for
   Tkinter, and as ought to be done for Numeric.  Look in
   Modules/Setup at how TKPATH is handled, and do the same thing for
   PLPLOTPATH, or suchlike.

   Now you also need to change the Modules/Setup line for the _tkinter
   module to pass a flag to tell it to include PLplot support.  Here,
   is an example which tells it we have both the BLT toolkit, and
   PLplot. 

_tkinter _tkinter.c -DHAVE_BLT -DHAVE_PLPLOT -I/usr/include/X11R5 -I/home/cs/furnish/junk/include -L/home/cs/furnish/junk/lib -lplplotdtk -lMatrix -lBLT -ltk4.1 -ltcl7.5 -lX11

   (If you dont' want to use BLT, just take out the -DHAVE_BLT and the
   -lBLT.)  And be sure to edit the actual _tkinter.c itself, so that
   it recognizes HAVE_PLPLOT and will call the PLplot Tk
   initialization routine (Pltk_Init).  For example, from _tkinter.c:

#ifndef WITH_APPINIT
int
Tcl_AppInit (interp)
     Tcl_Interp *interp;
{
  Tk_Window main;

  main = Tk_MainWindow(interp);
  if (Tcl_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Tcl_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
  if (Tk_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Tk_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#ifdef HAVE_BLT
  if (Blt_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Blt_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#endif
#ifdef HAVE_PLPLOT
  if (Pltk_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Pltk_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#endif
  return TCL_OK;
}

   I have put copies of a complete sample Setup and _tkinter.c from a
   build using Python-1.4b3, into the plplot/bindings/python/1.4b3
   subdirectory. 

   Now you can rebuild the python and reinstall (from Python top level
   directory):

	% make
	% make install

   At this point, you should be able to start python, import Numeric,
   import pl, and also check your sys.path to be sure that the plplot
   Tk support directory is included.

4) If you get through all that, you should be all set.  You could go
   to the python examples directory, softlink your new python in, and
   run pytkdemo.

