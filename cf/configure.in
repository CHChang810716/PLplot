divert(0)dnl --*-sh-*--
#!/bin/sh
#
# configure.in
#
# Maurice LeBrun
# IFS, University of Texas at Austin
# 14-Jul-1994
#
# PLplot configure script input
#
# This script does a few things that most autoconf-generated scripts do not.
# I resisted going with autoconf for a long time, in favor of a home-rolled
# solution because of (a) certain needs that autoconf didn't appear to meet,
# and (b) PLplot started out as a package with much less demanding needs
# than today.  Eventually the build situation got out of hand, and I took
# the plunge -- all those nice features in autoconf were just too hard to
# resist any longer.  Those areas where I needed to be a bit inventive
# include:
#
# - makefile control flow and file inclusion.  Standard make is braindead in
# this regard.  The problem is how to conditionally enable/disable packages
# in the makefile itself.  GNU make appears to handle this quite well, but I
# have concerns about portability -- I've heard of (and had) problems
# porting it to old versions of Unix, and it's not available under some
# non-Unix systems (notably MSDOS).  Anyhow, there are several ways one can
# simulate active control, and the route I've gone is to include a separate
# file for each capability.  Makefile.in is created by the configure script
# by concatenating the right pieces together.  Not only is this very
# portable, but keeping the target/dependency portion separate allows (a)
# this to be generated automatically e.g. by makedepend without changing any
# other file, and (b) non-Unix ports to share it (important because the
# target/dependency list tends to change a lot).  Since these Makefile
# fragments are just text files, it should be simple enough to string them
# together as desired.
#
# - System-specific settings for ANSI C compiler, Fortran compiler, and
# other non-standard switches (profiling, auto promotion in Fortran,
# optimization levels).  This is handled by a largish case statement over
# system type that I snarfed from my previous configure utils.  A similar
# case statement for building shared libraries was snarfed from the BLT (Tk
# extension package) configure script.
#
# - Faster, site-specific configures.  I have set things up so that most of
# the configure is skipped if the relevant shell variables are set.  Early
# on I try to source a defaults file (cf_plplot.in, both the build directory
# and ~/config are checked) which does this.  The point is, for a given site
# most settings are invariant from one configure to the next, but you might
# want to change things like what packages are enabled, compilers,
# precision, profiling, debugging, etc.  Very useful for development.  Note:
# Autoconf 2.0 and later supports cache files, which are similar in some
# ways but are not really a replacement for this facility.
# ----------------------------------------------------------------------------

# Startup code that needs to be run BEFORE anything in the autogenerated
# configure script is done.  Why isn't there an official way to do this?
# I'm about ready to barf..

# Get system using uname.

system=unknown
uname >/dev/null 2>&1 && system=`uname -s`-`uname -r`

# Fix Cray braindamage

case "$system" in
    sn* )
	system=`uname -m`-`uname -r`
    ;;
esac

# Default settings

with_debug=no
with_opt=yes
with_double=no
with_profile=no
with_shlib=yes
with_gcc=no
with_warn=no
with_dbmalloc=no
with_fseek=no
with_pkgdir=
with_nobraindead=no

enable_drivers=yes
enable_f77=yes
enable_cxx=yes
enable_python=yes
enable_tcl=yes
enable_tk=yes
enable_itcl=yes
enable_dp=yes
enable_xwin=yes

divert(-1)

MY_ARG_ENABLE(drivers,
  [  --enable-drivers        enable all device drivers ($enable_drivers)])


# ------------------------------------------------------------------------
# Support macros for driver inclusion and help entries.

# Including a driver in the below list includes it by default.

define(PL_DRIVER_LIST,
[plmeta, null, xterm, tek4010, tek4107, mskermit,
conex, linuxvga, vlt, versaterm, dg300, ps, xfig, ljii, hp7470, hp7580,
lj_hpgl, imp, xwin, tk, dp, pbm])

# Macro to set one driver enable value

define(PL_ADD_DRIVER,[dnl
MY_ARG_ENABLE($1, builtin(format,
[  --enable-%-14s enable %s device driver ($enable_$1)], $1, $1))
if test "$enable_$1" = "yes" -o "$enable_$1 $enable_drivers" = " yes" ; then
    enable_$1="yes"
    AC_DEFINE(PLD_$1)
    DEVICES="$DEVICES $1"
else
    enable_$1="no"
fi
])dnl

# Recursive macro to set up all driver help entries

define(PL_DRIVERS,[ifelse($1,,,[PL_ADD_DRIVER($1)dnl
PL_DRIVERS(builtin([shift],$*))])])

# ------------------------------------------------------------------------
divert(0)dnl

# Special cases

case "$system" in
    aix*|AIX*|rs*|RS*|ibm*|IBM* ) 
	with_opt=no
    ;;
    BSD/OS* ) 
	with_fseek=yes
	with_gcc=yes
    ;;
    linux*|LINUX*|Linux* ) 
	with_gcc=yes
    ;;
    next*|NeXT*|NEXT* ) 
	with_gcc=yes
    ;;
    ultrix*|ULTRIX* ) 
	with_gcc=yes
    ;;
esac

# Source site-specific variables file, if present.  Very nice for setting up
# site-specific defaults or for reducing the time spent configuring.
#
# This MUST MUST MUST be done before command-line flags are handled (i.e.
# before expanding ac_init) so that the user can override if necessary.

with_defaults=yes
for option
    do
    case "$option" in
	-with-defaults | --with-defaults | -with-defaults=yes | --with-defaults=yes )
	    with_defaults=yes
	;;
	-without-defaults | --without-defaults | -with-defaults=no | --with-defaults=no )
	    with_defaults=no
	;;
    esac
done

if test "$with_defaults" = "no"; then
    echo "Performing full configure."
else
    initfile="./cf_plplot.in"
    if test -f $initfile; then
	echo "Getting default settings from $initfile."
	. $initfile
    else
	initfile="$HOME/config/cf_plplot.in"
	if test -f $initfile; then
	    echo "Getting default settings from $initfile."
	    . $initfile
	else
	    echo "No defaults file found, performing full configure."
	fi
    fi
fi

divert(-1)

# ----------------------------------------------------------------------------
# Okay, now back to ordinary configure scriptisms.
# ----------------------------------------------------------------------------

AC_PREREQ(2.4)

AC_INIT(src/plcore.c)

# ----------------------------------------------------------------------------
# The configure script must be run in a separate build directory.  If the
# user instead runs it from the top-level directory, the code below cd's to
# tmp and exec's ../configure, in effect running configure from the build
# directory after all.
#
# In fact, configure can be run from a separate build directory anywhere,
# leaving the original source tree untouched if that is so desired.  This
# allows one to build from Read-Only media (e.g. CDROM) or create multiple
# build directories at once, each with different options.  Softlinks to all
# source files are used to create the "monolithic build directory".  With
# the PLplot distribution spread out over so many directories, I've found
# this paradigm to be the easiest for me to use during development while
# remaining widely portable.  On systems that don't support softlinks, you
# can always use copy.  At least you will only have to do it once.
# ----------------------------------------------------------------------------

# Fix up srcdir to be absolute to prevent problems later
srcdir=`(cd $srcdir; pwd)`

plplot_config_invocation="$0 $*"

# Set up a command for automatic reconfigures.  This ensures whatever 
# switches have been thrown previously are used again. 
 
if test -n "$*"; then 
    echo "$plplot_config_invocation" >$srcdir/reconfig
    chmod +x $srcdir/reconfig 
else 
    rm -f $srcdir/reconfig >/dev/null 2>&1 
fi 

if test `pwd` = "$srcdir"; then
    echo "setting up to configure in tmp directory -- hold on..."
    if test ! -d tmp; then
	mkdir tmp
    fi
    cd tmp
    exec $srcdir/configure "$@"
fi

# ----------------------------------------------------------------------------
# Set up defaults and command line args.
# ----------------------------------------------------------------------------

# Can't really do this yet, b/c if we fail to find something, then
# enable_xxx will be set to no, but we will have already set it to
# yes.  So, comment this out and put it down further in the file.

dnl> AC_CONFIG_HEADER(plConfig.h plDevs.h)

if test "$system" ; then
    AC_MSG_RESULT(system is: $system)
fi

MY_ARG_WITH(defaults,   
  [  --with-defaults         source defaults file at startup (yes)])

MY_ARG_WITH(debug,   
  [  --with-debug            compile with debugging ($with_debug)])

MY_ARG_WITH(opt,
  [  --with-opt              compile with optimization ($with_opt)])

MY_ARG_WITH(double,
  [  --with-double           use double precision floats ($with_double)])

MY_ARG_WITH(profile,
  [  --with-profile          turn on profiling option ($with_profile)])

MY_ARG_WITH(shlib,
  [  --with-shlib            build shared libraries ($with_shlib)])

MY_ARG_WITH(gcc,
  [  --with-gcc              use gcc to compile C and C++ code ($with_gcc)])

MY_ARG_WITH(warn,
  [  --with-warn             enable all compilation warnings ($with_warn)])

MY_ARG_WITH(dbmalloc,
  [  --with-dbmalloc         link with libdbmalloc ($with_dbmalloc)])

MY_ARG_WITH(pkgdir,
  [  --with-pkgdir=DIR       locate libraries and includes under DIR])

MY_ARG_WITH(fseek,
  [  --with-fseek            use fseek/ftell rather than fsetpos/fgetpos ($with_fseek)])

MY_ARG_WITH(nobraindead)

MY_ARG_ENABLE(f77,
  [  --enable-f77            compile Fortran-77 interface code ($enable_f77)])

MY_ARG_ENABLE(cxx,
  [  --enable-cxx            compile C++ interface code ($enable_cxx)])

MY_ARG_ENABLE(python,
  [  --enable-python         compile python interface code ($enable_python)])

MY_ARG_ENABLE(tcl,
  [  --enable-tcl            compile Tcl interface code ($enable_tcl)])

MY_ARG_ENABLE(itcl,
  [  --enable-itcl           enable incr Tcl interface code ($enable_itcl)])

# Set driver enable values
#
# You can enable/disable drivers either by the command line
# (--enable-<driver> or --disable-<driver>) or via the cf_plplot.in file
# (remember to use underscores instead of dashes here).  You can disable
# all drivers by default by using --disable-drivers.

# Special cases

case $system in
    Linux* )
	if test -z "$enable_linuxvga"; then
 	   enable_linuxvga=$enable_drivers
	fi
    ;;
    * )
	enable_linuxvga="no"
    ;;
esac

dnl> PL_DRIVERS(PL_DRIVER_LIST)

# ----------------------------------------------------------------------------
# Set up prefix
#
# The prefix is set using the following algorithm:
#
#	via the command line: --prefix=<value>
#	via the shell variable "pl_prefix", set in the defaults file
#	via the directory "plrender" currently is located in
#
# If still not set, prefix defaults to /usr/local/plplot.
#
# I recommend using a separate directory tree for PLplot files.  You can
# use the "mklinks" script for soft-linking the bin, lib, and include
# files to the usual places under /usr/local or /usr.  See the discussion
# of this in the FAQ for more info.
# ----------------------------------------------------------------------------

AC_PREFIX_DEFAULT(/usr/local/plplot)
if test "$prefix" = NONE; then
    if test -z "$pl_prefix"; then
	AC_PREFIX_PROGRAM(plrender)
    else
	prefix="$pl_prefix"
    fi
fi

# ----------------------------------------------------------------------------
# This is where the real work is done.
# ----------------------------------------------------------------------------

LIBS=""
INCS=""

AC_INCLUDE(sysconf.in)

AC_REQUIRE_CPP
AC_ISC_POSIX

AC_INCLUDE(sysloc.in)

# Now, try this here.

PL_DRIVERS(PL_DRIVER_LIST)

# Okay, NOW we're done searching for stuff, so all the driver flags
# and what not will finally be set right.

AC_CONFIG_HEADER(plConfig.h plDevs.h)

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h)
AC_PROG_RANLIB
AC_FUNC_VFORK
AC_CHECK_FUNC(popen, AC_DEFINE(HAVE_POPEN))

# ----------------------------------------------------------------------------
# Some X11 headers require "caddr_t" even on systems that claim POSIX.1
# compliance, which is illegal.  This makes it impossible to compile
# programs that include X11 headers if _POSIX_SOURCE is defined.  I work
# around this potential problem by just defining caddr_t to 'char *' on all
# systems (unless it is set already), whether it will be needed or not.

AC_CHECK_TYPE(caddr_t, char *)

# ----------------------------------------------------------------------------
# If you don't know what this is for you shouldn't be using it.
# An invisible option for now.

if test "$with_nobraindead" = "yes"; then
    AC_DEFINE(NOBRAINDEAD)
fi

# ----------------------------------------------------------------------------
# For those systems with busted libc's.

if test "$with_fseek" = "yes"; then
    AC_DEFINE(USE_FSEEK)
fi

# ----------------------------------------------------------------------------
# Set up library suffix.
# ----------------------------------------------------------------------------

# Define tags to be used in multiple-precision library names
#
# Double precision: tag with "d"
# Single precision: tag with no symbol

if test "$with_double" = "yes"; then
    LIB_TAG="d"
else
    LIB_TAG=
fi

AC_SUBST(LIB_TAG)

# ----------------------------------------------------------------------------
# Now build up Makefile.in, out of all the eensy-weensy little pieces.
#
# The order here is very important so that variable definitions are made in
# the right order and all dependencies are preserved.  Change at your own
# risk!
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating Makefile.in)

# Makefile initialization

cat $srcdir/cf/init.in		>Makefile.in 

# Default target, core source and object file lists

cat $srcdir/cf/dist.in		>>Makefile.in 

# Optional packages

if test "$enable_cxx" = "yes"; then
    cat $srcdir/cf/pkg_cxx.in	>>Makefile.in 
fi
if test "$enable_f77" = "yes"; then
    cat $srcdir/cf/pkg_f77.in	>>Makefile.in 
fi
if test "$enable_python" = "yes"; then
    cat $srcdir/cf/pkg_python.in >>Makefile.in 
fi
if test "$enable_tcl" = "yes"; then
    cat $srcdir/cf/pkg_tcl.in	>>Makefile.in 
fi
if test "$enable_tk" = "yes"; then
    cat $srcdir/cf/pkg_tk.in	>>Makefile.in 
fi

# Library targets

cat $srcdir/cf/initlib.in	>>Makefile.in

if test "$with_shlib" = "yes"; then
    SHARED=1
    if test ! -d shared; then
	mkdir shared
	#following needed for includes to work properly with new plplot/*.h style
	cd shared
	ln -s ../plplot
	cd ..
    fi
    case $system in 
	SunOS-4* ) 
	    cat $srcdir/cf/lib_sh_sun.in	>>Makefile.in
	;;
	AIX-* ) 
	    cat $srcdir/cf/lib_sh_aix.in	>>Makefile.in
	;;
	Linux* )
	    cat $srcdir/cf/lib_sh_linux.in	>>Makefile.in
	;;
    SCO* )
        cat $srcdir/cf/lib_sh_sco.in    >>Makefile.in
	;;
	* )
	    cat $srcdir/cf/lib_sh.in	>>Makefile.in
	;;
    esac
else
    SHARED=0
    cat $srcdir/cf/lib_ar.in	>>Makefile.in
fi

# Program and demo file dependencies, targets

cat $srcdir/cf/exes.in		>>Makefile.in 
cat $srcdir/cf/demos.in		>>Makefile.in 

# Installation and miscellaneous.

cat $srcdir/cf/install.in	>>Makefile.in 
cat $srcdir/cf/inst_lib.in		>>Makefile.in
cat $srcdir/cf/misc.in		>>Makefile.in 

# Object file dependencies

cat $srcdir/cf/objs.in		>>Makefile.in 

# ----------------------------------------------------------------------------
# Now build Makedemo.in.
# Makedemo is a stand-alone makefile for the demo programs.
# Note: it links against the installed PLplot library.
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating Makedemo.in)

cat $srcdir/cf/init.in		>Makedemo.in 
cat $srcdir/cf/initdemo.in	>>Makedemo.in 
cat $srcdir/cf/demos.in		>>Makedemo.in 
cat $srcdir/cf/miscdemo.in	>>Makedemo.in 

# ----------------------------------------------------------------------------
# Set up variables that specify install directories
#
# You can preset these to anything you want if you don't like the default
# choice.  In particular, if you /don't/ install PLplot under its own
# directory, the examples, tcl, and doc subdirectories will cause
# problems.  In this case, set the <whatever>_DIR variables below as
# desired in ~/config/cf_plplot.in, and you are set.
# ----------------------------------------------------------------------------

if test "$prefix" = NONE; then
    prefix=$ac_default_prefix
fi
if test -z "$LIB_DIR"; then
    LIB_DIR=$prefix/lib
fi
if test -z "$BIN_DIR"; then
    BIN_DIR=$prefix/bin
fi
if test -z "$TCL_DIR"; then
    TCL_DIR=$prefix/tcl
fi
if test -z "$DOC_DIR"; then
    DOC_DIR=$prefix/doc
fi
if test -z "$INFO_DIR"; then
    INFO_DIR=$prefix/info
fi
if test -z "$INCLUDE_DIR"; then
    INCLUDE_DIR=$prefix/include/plplot
fi
if test -z "$DEMOS_DIR"; then
    DEMOS_DIR=$prefix/examples
fi

AC_DEFINE_UNQUOTED(LIB_DIR, "$LIB_DIR")
AC_DEFINE_UNQUOTED(BIN_DIR, "$BIN_DIR")
AC_DEFINE_UNQUOTED(TCL_DIR, "$TCL_DIR")

AC_SUBST(LIB_DIR)
AC_SUBST(BIN_DIR)
AC_SUBST(TCL_DIR)
AC_SUBST(DOC_DIR)
AC_SUBST(INFO_DIR)
AC_SUBST(INCLUDE_DIR)
AC_SUBST(DEMOS_DIR)
AC_SUBST(SHARED)

# ----------------------------------------------------------------------------
# Create links to source code.
# I do this every time and just send the output to /dev/null to make sure
# we never miss any.  This should keep Geoff happy (for a while at least).
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating links...)

# Source, driver, and include files
    
# All header files have to be in plplot as symlinks
if test ! -d plplot; then
    mkdir plplot
fi
ln -s \
../plConfig.h ../plDevs.h \
plplot 2>/dev/null

ln -s \
$srcdir/src/*.c \
$srcdir/drivers/*.c \
. 2>/dev/null
ln -s \
$srcdir/include/*.h \
plplot 2>/dev/null

# Packages (interfaces) and demos associated with them

if test "$enable_cxx" = "yes"; then
    ln -s \
    `ls $srcdir/bindings/c++/*.* |grep -v '\.h$'` \
    $srcdir/examples/c++/*.* \
    . 2>/dev/null
    ln -s \
    $srcdir/bindings/c++/*.h \
    plplot 2>/dev/null
fi

# Note that double precision Fortran files in the stub interface 
# and examples are obtained entirely by m4 macro expansion.  This should 
# work anywhere.

if test "$enable_f77" = "yes"; then
    ln -s \
    `ls $srcdir/bindings/f77/*.* |grep -v '\.h$'` \
    $srcdir/examples/f77/*.* \
    . 2>/dev/null
    ln -s \
    $srcdir/bindings/f77/*.h \
    plplot 2>/dev/null
    for filename in $srcdir/examples/f77/*.fm4
    do 
      ffilename=`echo $filename | sed 's/\.fm4$/.f/'`
      ln -s $ffilename . 2>/dev/null
    done
    for filename in $srcdir/bindings/f77/*.fm4
    do 
      ffilename=`echo $filename | sed 's/\.fm4$/.f/'`
      ln -s $ffilename . 2>/dev/null
    done
fi

if test "$enable_python" = "yes"; then
    ln -s \
    $srcdir/bindings/python/*.py \
    $srcdir/bindings/python/*.c \
    $srcdir/examples/python/*.py \
    $srcdir/examples/python/pytkdemo \
    . 2>/dev/null
    ln -s \
    $srcdir/bindings/python/*.h \
    plplot 2>/dev/null
    if test ! -d python_dynamic; then
	# Create special directory where plmodule.so is dynamically built
	# Symlink everything required in directory except for
	# Setup.in file which is created at build time and (differently) at
	# install time.
	mkdir python_dynamic
	cd python_dynamic
	ln -s ../plmodule.c
	ln -s ../plmodule2.c
	ln -s $PYTHON_CFG_DIR/Makefile.pre.in
	# Following needed for includes to work properly with new plplot/*.h style.
	ln -s ../plplot
	cd ..
    fi
fi

# Just go ahead and set up the Python stuff needed to do staging.
# (AWI thinks all the following should be removed since they
# repeat the previous stuff, but he isn't positive.  Thus,
# as a compromise he supressed the  error messages by the following
# stuff by changing ln -s to ln -sf.)

ln -sf $srcdir/bindings/python/Plframe.py .
ln -sf $srcdir/bindings/python/TclSup.py .
ln -sf $srcdir/bindings/python/plmodule.c .
ln -sf $srcdir/bindings/python/plmodule2.c .
ln -sf $srcdir/bindings/python/plmodule.h plplot
ln -sf $srcdir/bindings/python/setup.py .

if test "$enable_tcl" = "yes"; then
    ln -s \
    `ls $srcdir/bindings/tcl/*.* |grep -v '\.h$'` \
    $srcdir/bindings/tcl/pltclgen \
    $srcdir/examples/tcl/*.* \
    . 2>/dev/null
    ln -s \
    $srcdir/bindings/tcl/*.h \
    plplot 2>/dev/null
fi

if test "$enable_tk" = "yes"; then
    ln -s \
    `ls $srcdir/bindings/tk/*.* |grep -v '\.h$'` \
    $srcdir/examples/tk/*.c \
    $srcdir/examples/tk/tk* \
    . 2>/dev/null
    ln -s \
    $srcdir/bindings/tk/*.h \
    plplot 2>/dev/null
fi

#    $srcdir/bindings/tk/tclIndex 


# Miscellaneous

ln -s \
`ls $srcdir/examples/c/*.* |grep -v '\.h$'` \
$srcdir/utils/*.c \
$srcdir/fonts/*.c \
$srcdir/scripts/pl* \
$srcdir/lib/*.fnt \
$srcdir/lib/*.map \
$srcdir/cf/*.in \
$srcdir/sys/unix/version \
. 2>/dev/null
ln -s \
$srcdir/examples/c/*.h \
plplot 2>/dev/null

# ----------------------------------------------------------------------------
# Create output files.
# ----------------------------------------------------------------------------

AC_OUTPUT(Makefile Makedemo)

# ----------------------------------------------------------------------------
# Print out some of the more important settings.
#
# In a reversal of previous practice, I print the actual variables in the
# configure log.  This is to remind the user of the difference between the
# command line syntax (which you can always get help on by issuing a --help
# option) and the internal representation.  It's necessary to remember this
# for when you want to set the variable directly via ~/config/cf_plplot.in.
# ----------------------------------------------------------------------------

plplot_config_result_msg="Configure results:

command:	$plplot_config_invocation
system:		$system
prefix:		$prefix
CC:		$CC $CC_FLAGS
LDC:		$LDC $LDC_FLAGS"

if test "$enable_cxx" = "yes"; then
    plplot_config_result_msg=\
"$plplot_config_result_msg
CXX:		$CXX $CXX_FLAGS
LDCXX:		$LDCXX $LDCXX_FLAGS"
fi

if test "$enable_f77" = "yes"; then
    plplot_config_result_msg=\
"$plplot_config_result_msg
F77:		$F77 $F77_FLAGS
LDF:		$LDF $LDF_FLAGS"
fi

plplot_config_result_msg=\
"$plplot_config_result_msg
INCS:		$INCS
LIBS:		$LIBS
LIB_TAG:	$LIB_TAG
devices:	$DEVICES

with_shlib:	$with_shlib		with_double:	$with_double
with_debug:	$with_debug		with_opt:	$with_opt
with_warn:	$with_warn		with_profile:	$with_profile
                                        with_gcc:	$with_gcc

enable_xwin:	$enable_xwin		enable_tcl:	$enable_tcl
enable_tk:	$enable_tk		enable_dp:	$enable_dp
enable_itcl:	$enable_itcl		enable_f77:	$enable_f77
enable_cxx:	$enable_cxx		enable_python:	$enable_python
"

cat << EOF > config.summary
$plplot_config_result_msg
EOF

AC_MSG_RESULT($plplot_config_result_msg)
