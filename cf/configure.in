# --*-sh-*--------------------------------------------------------------------
# 
# configure.in
#
# Maurice LeBrun
# IFS, University of Texas at Austin
# 14-Jul-1994
#
# PLplot configure script input
#
# This script does a few things that most autoconf-generated scripts do not.
# I resisted going with autoconf for a long time, in favor of a home-rolled
# solution because of (a) certain needs that autoconf didn't appear to meet,
# and (b) PLplot started out as a package with much less demanding needs
# than today.  Eventually the build situation got out of hand, and I took
# the plunge -- all those nice features in autoconf were just too hard to
# resist any longer.  Those areas where I needed to be a bit inventive
# include:
#
# - makefile control flow and file inclusion.  Standard make is braindead in
# this regard.  The problem is how to conditionally enable/disable packages
# in the makefile itself.  GNU make appears to handle this quite well, but I
# have concerns about portability -- I've heard of (and had) problems
# porting it to old versions of Unix, and it's not available under some
# non-Unix systems (notably MSDOS).  Anyhow, there are several ways one can
# simulate active control, and the route I've gone is to include a separate
# file for each capability.  Makefile.in is created by the configure script
# by concatenating the right pieces together.  Not only is this very
# portable, but keeping the target/dependency portion separate allows (a)
# this to be generated automatically e.g. by makedepend without changing any
# other file, and (b) non-Unix ports to share it (important because the
# target/dependency list tends to change a lot).  Since these Makefile
# fragments are just text files, it should be simple enough to string them
# together as desired.
#
# - System-specific settings for ANSI C compiler, Fortran compiler, and
# other non-standard switches (profiling, auto promotion in Fortran,
# optimization levels).  This is handled by a largish case statement over
# system type that I snarfed from my previous configure utils.  A similar
# case statement for building shared libraries was snarfed from the BLT (Tk
# extension package) configure script.
#
# - Faster, site-specific configures.  I have set things up so that most of
# the configure is skipped if the relevant shell variables are set.  Early
# on I try to source a defaults file (~/config/cf_plplot.in) which does
# this.  The point is, for a given site most settings are invariant from one
# configure to the next, but you might want to change things like what
# packages are enabled, compilers, precision, profiling, debugging, etc.
# Very useful for development.  Note: Autoconf 2.0 and later supports cache
# files, which are similar in some ways but are not really a replacement for
# this facility.
# ----------------------------------------------------------------------------

AC_PREREQ(2.3)

# ----------------------------------------------------------------------------
# Define a macro to source site-specific variables file, if present.
# Very nice for setting up site-specific defaults or for reducing the time
# spent configuring. 
#
# This MUST MUST MUST be done before command-line flags are handled (i.e.
# before expanding AC_INIT) so that the user can override if necessary.
# Autoconf does not make this easy.  In fact, I'm about ready to barf.
# ----------------------------------------------------------------------------

define([USER_STARTUP], [
with_defaults=yes
for option
    do
    case "$option" in
	-with-defaults | --with-defaults | -with-defaults=yes | --with-defaults=yes )
	    with_defaults=yes
	;;
	-without-defaults | --without-defaults | -with-defaults=no | --with-defaults=no )
	    with_defaults=no
	;;
    esac
done

if test "$with_defaults" = "no"; then
    echo "Performing full configure."
else
    initfile="$HOME/config/cf_plplot.in"
    if test -f $initfile; then
	echo "Getting default settings from $initfile."
	. $initfile
    else
	echo "No defaults file found, performing full configure."
    fi
fi
])

AC_INIT(src/plcore.c)

# ----------------------------------------------------------------------------
# The configure script must be run in a separate build directory.  If the
# user instead runs it from the top-level directory, the code below cd's to
# tmp and exec's ../configure, in effect running configure from the build
# directory after all.
#
# In fact, configure can be run from a separate build directory anywhere,
# leaving the original source tree untouched if that is so desired.  This
# allows one to build from Read-Only media (e.g. CDROM) or create multiple
# build directories at once, each with different options.  Softlinks to all
# source files are used to create the "monolithic build directory".  With
# the PLplot distribution spread out over so many directories, I've found
# this paradigm to be the easiest for me to use during development while
# remaining widely portable.  On systems that don't support softlinks, you
# can always use copy.  At least you will only have to do it once.
# ----------------------------------------------------------------------------

if test `pwd` = `(cd $srcdir; pwd)`; then
    AC_MSG_RESULT(setting up to configure in tmp directory -- hold on...)
    if test ! -d tmp; then
	mkdir tmp
    fi
    cd tmp
    exec ../configure "$@"
fi
AC_CONFIG_HEADER(plConfig.h plDevs.h)

# ----------------------------------------------------------------------------
# First get system using uname.
# ----------------------------------------------------------------------------

AC_CHECK_PROG(uname_found, uname, 1, 0)
[ if test $uname_found -eq 1 ; then
    system=`uname -s`-`uname -r`

    # Fix Cray braindamage

    case "$system" in
	sn* )
	    system=`uname -m`-`uname -r`
	;;
    esac

fi ]

if test "$system" ; then
    AC_MSG_RESULT(system is: $system)
fi

# ----------------------------------------------------------------------------
# Some defaults
# Note: the --with-defaults entry is only used to set up its help entry; the
# actual handling is done before any args are parsed.
# ----------------------------------------------------------------------------

MY_ARG_WITH(defaults,   
  [  --with-defaults         source defaults file at startup (default: yes)],
  [])

MY_ARG_WITH(debug,   
  [  --with-debug            compile with debugging (default: no)],
  [], with_debug="no")

MY_ARG_WITH(opt,
  [  --with-opt              compile with optimization (default: yes)],
  [], with_opt="yes")

MY_ARG_WITH(double,
  [  --with-double           use double precision floats (default: no)],
  [], with_double="no")

MY_ARG_WITH(profile,
  [  --with-profile          turn on profiling option (defualt: no)],
  [], with_profile="no")

MY_ARG_WITH(shlib,
  [  --with-shlib            build shared libraries (not all systems)],
  [], with_shlib="yes")

MY_ARG_WITH(f2c,
  [  --with-f2c              use f2c to compile Fortran code (default: no)],
  [], with_f2c="no")

MY_ARG_WITH(gcc,
  [  --with-gcc              use gcc to compile C and C++ code (default: no)],
  [], with_gcc="no")

MY_ARG_WITH(warn,
  [  --with-warn             enable all compilation warnings (default: no)],
  [], with_warn="no")

MY_ARG_WITH(dbmalloc,
  [  --with-dbmalloc         link with libdbmalloc (default: no)],
  [], with_dbmalloc="no")

MY_ARG_ENABLE(drivers,
  [  --enable-drivers        enable all device drivers (default: yes)],
  [], enable_drivers="yes")

MY_ARG_ENABLE(f77,
  [  --enable-f77            compile Fortran-77 interface code (default: yes)],
  [], enable_f77="yes")

MY_ARG_ENABLE(cxx,
  [  --enable-cxx            compile C++ interface code (default: yes)],
  [], enable_cxx="yes")

# ----------------------------------------------------------------------------
# Set up prefix
#
# The prefix is set using the following algorithm:
#
#	via the command line: --prefix=<value>
#	via the shell variable "pl_prefix", set in the defaults file
#	via the directory "plrender" currently is located in
#
# If still not set, prefix defaults to /usr/local/plplot.
#
# I recommend using a separate directory tree for PLplot files.  You can
# use the "mklinks" script for soft-linking the bin, lib, and include
# files to the usual places under /usr/local or /usr.  See the discussion
# of this in the FAQ for more info.
# ----------------------------------------------------------------------------

AC_PREFIX_DEFAULT(/usr/local/plplot)
if test "$prefix" = NONE; then
    if test -z "$pl_prefix"; then
	AC_PREFIX_PROGRAM(plrender)
    else
	prefix="$pl_prefix"
    fi
fi

# ----------------------------------------------------------------------------
# This is where the real work is done.
# ----------------------------------------------------------------------------

LIBS=""
INCS=""

AC_INCLUDE(sysconf.in)

AC_REQUIRE_CPP
AC_ISC_POSIX

AC_INCLUDE(sysloc.in)

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h)
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_FUNC_VFORK

# ----------------------------------------------------------------------------
# Some X11 headers require "caddr_t" even on systems that claim POSIX.1
# compliance, which is illegal.  This makes it impossible to compile
# programs that include X11 headers if _POSIX_SOURCE is defined.  I work
# around this potential problem by just defining caddr_t to 'char *' on all
# systems (unless it is set already), whether it will be needed or not.

AC_CHECK_TYPE(caddr_t, char *)

# ----------------------------------------------------------------------------
# If you don't know what this is for you shouldn't be using it.
# An invisible option for now.

MY_ARG_WITH(nobraindead,
  [], [], with_nobraindead="no")

if test "with_nobraindead" = "yes"; then
    AC_DEFINE(NOBRAINDEAD)
fi

# ----------------------------------------------------------------------------
# Set up library suffix.
# ----------------------------------------------------------------------------

# Define tags to be used in multiple-precision library names
#
# Single precision: tag with "f"
# Double precision: tag with "d"

if test "$with_double" = "yes"; then
    TAG_PREC="d"
else
    TAG_PREC="f"
fi

# Add suffix of:
#	b	for baseline library (no X or TK)
#	X	with X support enabled
#	tk	with X, TK, and/or Tcl-DP support enabled
#
# Build those best suited to your system and softlink to libplplotf
# and libplplotd to create the system default.  

TAG_ENABLE="b"
if test "$enable_xwin" = "yes"; then
    TAG_ENABLE="X"
fi
if test "$enable_tk" = "yes"; then
    TAG_ENABLE="tk"
fi

# Put them together

LIB_TAG="$TAG_PREC$TAG_ENABLE"

AC_SUBST(LIB_TAG)

# ----------------------------------------------------------------------------
# Now build up Makefile.in, out of all the eensy-weensy little pieces.
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating Makefile.in)

# Makefile initialization

cat $srcdir/cf/init.in		>Makefile.in 

# Default target, core source and object file lists

cat $srcdir/cf/dist.in		>>Makefile.in 

# Optional packages

if test "$enable_cxx" = "yes"; then
    cat $srcdir/cf/pkg_cxx.in	>>Makefile.in 
fi
if test "$enable_f77" = "yes"; then
    cat $srcdir/cf/pkg_f77.in	>>Makefile.in 
fi
if test "$enable_tcl" = "yes"; then
    cat $srcdir/cf/pkg_tcl.in	>>Makefile.in 
fi
if test "$enable_tk" = "yes"; then
    cat $srcdir/cf/pkg_tk.in	>>Makefile.in 
fi

# Library targets

cat $srcdir/cf/initlib.in	>>Makefile.in

if test "$with_shlib" = "yes"; then
    SHARED=1
    if test ! -d shared; then
	mkdir shared
    fi
    case $system in 
	SunOS-4* ) 
	    cat $srcdir/cf/lib_sh_sun.in	>>Makefile.in
	;;
	AIX-* ) 
	    cat $srcdir/cf/lib_sh_aix.in	>>Makefile.in
	;;
	* )
	    cat $srcdir/cf/lib_sh.in	>>Makefile.in
	;;
    esac
else
    SHARED=0
    cat $srcdir/cf/lib_ar.in	>>Makefile.in
fi

# Program and demo file dependencies, targets

cat $srcdir/cf/exes.in		>>Makefile.in 
cat $srcdir/cf/demos.in		>>Makefile.in 

# Installation and miscellaneous.

cat $srcdir/cf/install.in	>>Makefile.in 
cat $srcdir/cf/misc.in		>>Makefile.in 

# Object file dependencies

cat $srcdir/cf/objs.in		>>Makefile.in 

# ----------------------------------------------------------------------------
# Now build Makedemo.in.
# Makedemo is a stand-alone makefile for the demo programs.
# Note: it links against the installed PLplot library.
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating Makedemo.in)

cat $srcdir/cf/init.in		>Makedemo.in 
cat $srcdir/cf/initdemo.in	>>Makedemo.in 
cat $srcdir/cf/demos.in		>>Makedemo.in 
cat $srcdir/cf/miscdemo.in	>>Makedemo.in 

# ----------------------------------------------------------------------------
# Set up variables governing device driver inclusion.
#
# You can enable/disable drivers either by the command line
# (--enable-<driver> or --disable-<driver>) or via the cf_plplot.in file
# (remember to use underscores instead of dashes here).  You can disable
# all drivers by default by using --disable-drivers.
# ----------------------------------------------------------------------------

dnl> This macro holds the driver selection code.

define(PL_ADD_DRIVER,[dnl
MY_ARG_ENABLE($1,
  builtin(format, [  --enable-%-14s enable %s device driver], $1, $1),
  [], enable_$1=$enable_drivers)
if test "$enable_$1" = "yes"; then
    AC_DEFINE(PLD_$1)
    DEVICES="$DEVICES $1"
fi
])dnl

dnl> Recursive macro to get driver selection code for all the default
dnl> drivers (list specified below).

define(PL_DRIVERS,[ifelse($1,,,[PL_ADD_DRIVER($1)dnl
PL_DRIVERS(builtin([shift],$*))])])

dnl> Including a driver in this list includes it by default.  Maybe not
dnl> complete, but most of the devices of interest under Unix.  

PL_DRIVERS(plmeta, null, xterm, tek4010, tek4107, mskermit, conex,
vlt, versaterm, dg300, ps, xfig, ljii, hp7470, hp7580, lj_hpgl, imp,
xwin, tk, dp)

# ----------------------------------------------------------------------------
# Set up variables that specify install directories
#
# You can preset these to anything you want if you don't like the default
# choice.  In particular, if you /don't/ install PLplot under its own
# directory, the examples, tcl, and doc subdirectories will cause
# problems.  In this case, set the <whatever>_DIR variables below as
# desired in ~/config/cf_plplot.in, and you are set.
# ----------------------------------------------------------------------------

if test "$prefix" = NONE; then
    prefix=$ac_default_prefix
fi
if test -z "$LIB_DIR"; then
    LIB_DIR=$prefix/lib
fi
if test -z "$BIN_DIR"; then
    BIN_DIR=$prefix/bin
fi
if test -z "$TCL_DIR"; then
    TCL_DIR=$prefix/tcl
fi
if test -z "$DOC_DIR"; then
    DOC_DIR=$prefix/doc
fi
if test -z "$INFO_DIR"; then
    INFO_DIR=$prefix/info
fi
if test -z "$INCLUDE_DIR"; then
    INCLUDE_DIR=$prefix/include
fi
if test -z "$DEMOS_DIR"; then
    DEMOS_DIR=$prefix/examples
fi

AC_DEFINE_UNQUOTED(LIB_DIR, "$LIB_DIR")
AC_DEFINE_UNQUOTED(BIN_DIR, "$BIN_DIR")
AC_DEFINE_UNQUOTED(TCL_DIR, "$TCL_DIR")

AC_SUBST(LIB_DIR)
AC_SUBST(BIN_DIR)
AC_SUBST(TCL_DIR)
AC_SUBST(DOC_DIR)
AC_SUBST(INFO_DIR)
AC_SUBST(INCLUDE_DIR)
AC_SUBST(DEMOS_DIR)
AC_SUBST(SHARED)

# ----------------------------------------------------------------------------
# Create links to source code.
# I do this every time and just send the output to /dev/null to make sure
# we never miss any.  This should keep Geoff happy (for a while at least).
# ----------------------------------------------------------------------------

AC_MSG_RESULT(creating links...)

# Source, driver, and include files
    
ln -s \
$srcdir/src/*.c \
$srcdir/drivers/*.c \
$srcdir/include/*.h \
. 2>/dev/null

# Packages (interfaces) and demos associated with them

if test "$enable_cxx" = "yes"; then
    ln -s \
    $srcdir/bindings/c++/*.* \
    $srcdir/examples/c++/*.* \
    . 2>/dev/null
fi

if test "$enable_tcl" = "yes"; then
    ln -s \
    $srcdir/bindings/tcl/*.* \
    $srcdir/examples/tcl/*.* \
    . 2>/dev/null
fi

if test "$enable_tk" = "yes"; then
    ln -s \
    $srcdir/bindings/tk/*.* \
    $srcdir/bindings/tk/tclIndex \
    $srcdir/examples/tk/*.c \
    $srcdir/examples/tk/tk* \
    . 2>/dev/null
fi

# Note that double precision Fortran files in the stub interface are
# obtained entirely by m4 macro expansion.  This should work anywhere.
# Double precision example programs are obtained through automatic compiler
# promotion, however.  Your compiler needs to be able to automatically
# promote all real variables and constants for this to work (the HPUX 8.x
# compiler did not support this, but it's supported under 9.0).

if test "$enable_f77" = "yes"; then
    ln -s \
    $srcdir/bindings/f77/*.* \
    $srcdir/examples/f77/*.* \
    . 2>/dev/null
fi

# Miscellaneous

ln -s \
$srcdir/examples/c/*.* \
$srcdir/utils/*.c \
$srcdir/fonts/*.c \
$srcdir/scripts/pl* \
$srcdir/lib/*.fnt \
$srcdir/lib/*.map \
$srcdir/cf/*.in \
. 2>/dev/null

# ----------------------------------------------------------------------------
# Create output files.
# ----------------------------------------------------------------------------

AC_OUTPUT(Makefile Makedemo)

# ----------------------------------------------------------------------------
# Print out some of the more important settings.
#
# IMPORTANT: the with_<foo> and enable_<bar> vars are printed as
# with-<foo> and enable-<bar>.  Yes, this is confusing.  I really wish the
# same syntax were used for both the command line switch and the variable
# it is setting.  The possibility for confusion is much higher if I don't
# write them the same in the status message as they appear in the command
# line.  The only occasion you will have to set the variable directly is
# in ~/config/cf_plplot.in if you use it, and just make sure you remember
# to use an underscore in that case.
# ----------------------------------------------------------------------------

plplot_config_result_msg="Configuration results:

system:		$system
prefix:		$prefix
CC:		$CC $CC_FLAGS
CXX:		$CXX $CXX_FLAGS
F77:		$F77 $F77_FLAGS
LDC:		$LDC $LDC_FLAGS
LDF:		$LDF $LDF_FLAGS
INCS:		$INCS
LIBS:		$LIBS
LIB_TAG:	$LIB_TAG
devices:	$DEVICES

with-shlib:	$with_shlib		with-double:	$with_double
with-debug:	$with_debug		with-opt:	$with_opt
with-warn:	$with_warn		with-profile:	$with_profile
with-f2c:	$with_f2c		with-gcc:	$with_gcc

enable-xwin:	$enable_xwin		enable-tcl:	$enable_tcl
enable-tk:	$enable_tk		enable-dp:	$enable_dp
enable-itcl:	$enable_itcl		enable-f77:	$enable_f77
enable-cxx:	$enable_cxx
"


cat << EOF > config.summary
$plplot_config_result_msg
EOF

AC_MSG_RESULT($plplot_config_result_msg)
