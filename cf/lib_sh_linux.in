# -*-makefile-*--------------------------------------------------------------
# $Id$
#
# Geoffrey Furnish
# IFS, University of Texas at Austin
# 6-Jun-1995
#
# PLplot build rules for archive and shared library under Linux.
# Based on prior work by Maurice.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Set up inference rules appropriate for building both archive and shared
# libraries. 
# -----------------------------------------------------------------------------

.cc.o:
	$(CXX) $(CXX_FLAGS) $<
	cd shared; $(CXX) $(SHLIB_CXXFLAGS) $(CXX_FLAGS) ../$<

.c.o:
	$(CC) $(CC_FLAGS) $<

#	cd shared; $(CC) $(SHLIB_CCFLAGS) $(CC_FLAGS) ../$<

.f.o:
	$(F77) $(F77_FLAGS) $<
	cd shared; $(F77) $(SHLIB_F77FLAGS) $(F77_FLAGS) ../$<

shared/%.o : %.c
	$(CC) $(SHLIB_CCFLAGS) $(CC_FLAGS) $*.c -o $@

# -----------------------------------------------------------------------------
# Library dependency list and targets
# -----------------------------------------------------------------------------

# Redefine CP so we preserve symlinks on library installs.
CP	= cp -p -a

SOVERSION	= @SOVERSION@

PLLIB_SO	= $(PLLIB_PATH)$(PLLIB_BASE)$(LIB_TAG).so.$(SOVERSION)
SONAME		= $(PLLIB_BASE)$(LIB_TAG).so.$(MAJOR_VERSION)
LINKNAME	= $(PLLIB_BASE)$(LIB_TAG).so

MATLIB_SO	= $(PLLIB_PATH)$(MATLIB_BASE)$(LIB_TAG).so.$(SOVERSION)
MAT_SONAME     	= $(MATLIB_BASE)$(LIB_TAG).so.$(MAJOR_VERSION)
MAT_LINKNAME   	= $(MATLIB_BASE)$(LIB_TAG).so

CXXLIB_SO	= $(PLLIB_PATH)$(CXXLIB_BASE)$(LIB_TAG).so.$(SOVERSION)
CXX_SONAME	= $(CXXLIB_BASE)$(LIB_TAG).so.$(MAJOR_VERSION)
CXX_LINKNAME	= $(CXXLIB_BASE)$(LIB_TAG).so

# These need to use the BLD_ prefix so they can be left out.
MATLIBS = $(BLD_MATLIB_AR) $(BLD_MATLIB_SO)
CXXLIBS = $(BLD_CXXLIB_AR) $(BLD_CXXLIB_SO)

PLLIBS = $(PLLIB_AR) $(PLLIB_SO) $(MATLIBS) $(CXXLIBS)

PLLINKS = $(LINKNAME) $(SONAME) \
	  $(MAT_SONAME) $(MAT_LINKNAME) \
	  $(CXX_SONAME) $(CXX_LINKNAME)

libs:	$(PLLIBS)

$(PLLIB_AR):	$(LIB_OBJS)
	-$(RM) $(PLLIB_AR)
	@echo ""; echo "Building archive library"; echo ""
	$(ARLIB_BUILD) $(PLLIB_AR) $(LIB_OBJS)
	$(RANLIB) $(PLLIB_AR)
	@echo ""

$(MATLIB_AR): $(MAT_OBJS)
	-$(RM) $(MATLIB_AR)
	@echo ""; echo "Building archive library"; echo ""
	$(ARLIB_BUILD) $(MATLIB_AR) $(MAT_OBJS)
	$(RANLIB) $(MATLIB_AR)
	@echo ""

$(CXXLIB_AR): $(CXX_OBJS)
	-$(RM) $(CXXLIB_AR)
	@echo ""; echo "Building archive library"; echo ""
	$(ARLIB_BUILD) $(CXXLIB_AR) $(CXX_OBJS)
	$(RANLIB) $(CXXLIB_AR)
	@echo ""

# The following rules based on discussion in
# http://www.linuxdoc.org/HOWTO/Program-Library-HOWTO/shared-libraries.html

# NOTE: We have to link with iostream in order to satisfy the
# references to cout and friends in the C++ interface class.  And we
# do /not/ link with libg++ so as to avoid conflicts between the
# libg++ String class and the DS++ String class.  Oh, but for C++
# namespace support...

# stupidtk.o handled symbolically for the case where tk is not enabled.
STUPIDTK_OBJ = @STUPIDTK_OBJ@

$(PLLIB_SO):	$(BLD_MATLIB_SO) $(LIB_OBJS:%=shared/%) $(STUPIDTK_OBJ)
	-$(RM) $(PLLIB_SO)
	@echo ""; echo "Building shared library"; echo ""
	cd shared; \
	$(SHLIB_BUILD) ../$(PLLIB_SO) \
		-Wl,-soname -Wl,$(SONAME) \
		$(LIB_OBJS) $(STUPIDTK_OBJ) -L.. $(MAT_LINK) $(LDC_LIBS)
	ln -sf $(PLLIB_SO) $(SONAME)
	ln -sf $(SONAME) $(LINKNAME)
	@echo ""


$(MATLIB_SO): $(MAT_OBJS:%=shared/%)
	-$(RM) $(MATLIB_SO)
	@echo ""; echo "Building shared library"; echo ""
	cd shared; \
	$(SHLIB_BUILD) ../$(MATLIB_SO) \
		-Wl,-soname -Wl,$(MAT_SONAME) \
		$(MAT_OBJS)
	ln -sf $(MATLIB_SO) $(MAT_SONAME)
	ln -sf $(MAT_SONAME) $(MAT_LINKNAME)
	@echo ""

$(CXXLIB_SO): $(CXX_OBJS:%=shares/%)
	-$(RM) $(CXXLIB_SO)
	@echo ""; echo "Building shared library"; echo ""
	cd shared; \
	$(SHLIB_BUILD_CXX) ../$(CXXLIB_SO) \
		$(SONAME_FLAGS)$(CXX_SONAME) \
		$(CXX_OBJS)
	ln -sf $(CXXLIB_SO) $(CXX_SONAME)
	ln -sf $(CXX_SONAME) $(CXX_LINKNAME)
	@echo ""

# -----------------------------------------------------------------------------
# Sick hacks.
# -----------------------------------------------------------------------------

# This target not referenced when tk is not enabled.  This is fortunate
# since I doubt it can be handled symbolically in any case.
stupidtk.o:
	$(CC) $(CC_FLAGS) stupidtk.c
	cd shared; $(CC) $(SHLIB_CCFLAGS) $(CC_FLAGS) ../stupidtk.c

