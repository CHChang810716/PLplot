# -*-makefile-*----------------------------------------------------------------
# $Id$
#
# Make assignments for PLplot/Python support.
#
# Python supports dynamically loaded libraries, and we use the canonical
# method recommended at http://www.python.org/doc/current/ext/building-on-unix.html
# to build these libraries.  It is claimed this method will work for all
# Unix systems.  
#
# For our implementation of this method, at configuration time we symlink all
# required files but Setup.in into tmp/python_dynamic, and at build time
# and install time (where we link differently) we create the required 
# two-line Setup.in in the same directory and build according to the
# canonical rules.
# Note we build in a separate special directory because the build process
# creates a Makefile which would nameclash with other directories that have a
# Makefile in them (e.g., tmp).
# -----------------------------------------------------------------------------

SO		= @SO@
PYTHON_EXE	= plmodule$(SO)
PYTHON_INC_DIR	= @PYTHON_INC_DIR@
PYTHON_NUM_DIR	= @PYTHON_NUM_DIR@
PYTHON_MOD_DIR	= @PYTHON_MOD_DIR@
PYTHON_MACH_DIR	= @PYTHON_MACH_DIR@
PYTHON_CFG_DIR	= @PYTHON_CFG_DIR@
#These libraries do not exist on Linux systems (at least for python-1.5) so
#must comment out.  If required on other systems, must do something fancy.
#PYTHON_LIBS	= -L$(PYTHON_CFG_DIR) -lModules -lObjects -lParser -lPython
PYTHON_LIBS=
PYTHON_DIR	= @PYTHON_DIR@
LDSHARED	= @LDSHARED@

PYTHON_DEMOS	= README pytkdemo *.py

# Variables for use in "make" and "make install".

INSTALL_PYTHON	= install_python

# note this only builds something that can be used if PYTHONPATH is set 
# to tmp.  Also RPATH puts current directory first.  Therefore only
# really useful for temporary tests in tmp until it is decided to
# do the install.
$(PYTHON_EXE): python_dynamic/plmodule.c python_dynamic/plmodule2.c
	@echo " "
	@echo "Building Python module."
	@echo " "
	echo '*shared*' > python_dynamic/Setup.in
	echo 'pl plmodule.c plmodule2.c -I. -I$(PYTHON_INC_DIR) -I$(PYTHON_NUM_DIR) -L.. $(PLLIB_LDC) $(LDC_LIBS) $(RPATH)' >> python_dynamic/Setup.in
	cd python_dynamic ; make -f Makefile.pre.in boot ; make ; \
	$(MV) $(PYTHON_EXE) ..

install_python: python_dynamic/plmodule.c python_dynamic/plmodule2.c
	@cd python_dynamic ; make distclean
	@echo '*shared*' > python_dynamic/Setup.in
	@echo 'pl plmodule.c plmodule2.c -I$(INCLUDE_DIR)/.. -I$(PYTHON_INC_DIR) -I$(PYTHON_NUM_DIR) $(LIB_INSTALL) $(LDC_LIBS) $(INSTALL_RPATH)' >> python_dynamic/Setup.in
	@cd python_dynamic ; make -s -f Makefile.pre.in boot ; make -s ; \
	 $(MV) $(PYTHON_EXE) ..
	@-if test ! -d $(PYTHON_DIR); then mkdir -p $(PYTHON_DIR); fi
	@-$(CP) $(PYTHON_EXE) $(PYTHON_DIR)
	@-if test "$(PYTHON_DIR)" != "$(PYTHON_MACH_DIR)"; then \
	  echo "If the following symlink creation fails (perhaps because you are not root)" ; \
	  echo "then you must set PYTHONPATH to $(PYTHON_DIR) in order to run" ; \
	  echo "the python demos, xw??.py" ; \
	  $(LN) $(PYTHON_DIR)/$(PYTHON_EXE) $(PYTHON_MACH_DIR) ; \
	  fi
	@-if test ! -d $(DEMOS_DIR)/python; then mkdir -p $(DEMOS_DIR)/python; fi
	@-cd $(top_srcdir)/examples/python; $(CP) $(PYTHON_DEMOS) $(DEMOS_DIR)/python
#	-if test ! -d $(PYTHON_MOD_DIR)/plplot; then \
#		mkdir -p $(PYTHON_MOD_DIR)/plplot; fi
#	-cd $(top_srcdir)/bindings/python; $(CP) *.py $(PYTHON_MOD_DIR)/plplot

