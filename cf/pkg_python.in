# -*-makefile-*----------------------------------------------------------
# $Id$
#
# Make assignments for PLplot/Python support.
#
# Includes build rules for:
#
#	plmodule$(SO)	Dynamically loaded module for PLplot python scripts
#
# If Python doesn't support dynamically loaded modules on your system,
# you'll have to link plmodule.o with the Python library to build a
# new Python executable.  Copy plmodule.c into Python's Modules
# subdirectory, add something like the following to Modules/Setup,
#
# pl plmodule.c -I<PLplot include directory> -L<PLplot lib directory>
# -lplplotfX -L<X11 lib directory> -lX11
#
# and rebuild python.  If Python supports dynamically loaded modules,
# then all you have to worry about is passing the right flags to the
# compiler and linker to build a dynamically loaded module from
# plmodule.c (-I/usr/local/include/Py if the Python header files are
# installed, -I.../Python-VERSION/Include if not; Solaris 5.x requires
# ld -G while SunOS 4.x uses just ld, etc.).
# -----------------------------------------------------------------------

SO		= @SO@
PYTHON_EXE	= plmodule$(SO)
PYTHON_INSTALL	= install_python
PYTHON_INC_DIR	= @PYTHON_INC_DIR@
PYTHON_MOD_DIR	= @PYTHON_MOD_DIR@
PYTHON_DIR	= @PYTHON_DIR@
LDSHARED	= @LDSHARED@

plmodule$O:	$(PLLIBS) plmodule.c
	$(CC) $(SHLIB_CCFLAGS) $(CC_FLAGS) -I$(PYTHON_INC_DIR) plmodule.c

plmodule$(SO):	$(PLLIBS) plmodule$O
	$(LDSHARED) plmodule$O $(PLLIB_LDC) @LIBS@ $(TO) $@

install_python:
	 $(LDSHARED) $(LDC_FLAGS) plmodule$O $(LIB_INSTALL) \
		-o $(PYTHON_EXE) $(LDC_LIBS)
	-if test ! -d $(PYTHON_DIR); then mkdir -p $(PYTHON_DIR); fi
	-cp $(PYTHON_EXE) $(PYTHON_DIR)
	-if test ! -d $(DEMOS_DIR)/python; then mkdir -p $(DEMOS_DIR)/python; fi
	-cd $(top_srcdir)/examples/python; cp * $(DEMOS_DIR)/python

