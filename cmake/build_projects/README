The build_projects project should work out of the box for
Linux or Mac OS X systems with a full development tool-chain installed.

But the situation is different on Windows where you have to download
and install specific toolchain software before you start.  

===============================================================================
Installing the Required Windows Toolchain:

N.B. There is a good possibility that build_projects will work with the
Microsoft proprietary toolchain, and I would be happy to accept
patches to make that so (including a patch for this file), but my only
experience is with free software so until I receive such patches, the
instructions below refer only to free software toolchains.

1. Install latest MinGW/MSYS using the automatic installer

Use the latest automatic installer (currently
mingw-get-inst-20120426.exe which can be obtained from
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/mingw-get-inst-20120426/).
Specify obtaining the latest updates, all relevant compilers,
(everythiing except objc) and also specify the MSYS development
software.  This should install, for example, version 4.7.2 of gcc,
g++, Ada, and gfortran.

2. Downgrade one component of MSYS.
N.B. This must be done from the cmd environment since
if you run this from bash.exe, that executable's use of MSYS
libraries will screw up the downgrade.

MinGW-4.7.2\bin\mingw-get.exe upgrade msys-core-bin=1.0.17-1

This downgrade is necessary and quite important, see
http://sourceforge.net/p/mingw/bugs/1950.  Otherwise, you
will get an infinite hang from any attempt to do parallel
builds (which build_projects automatically uses for many
of its builds) using the MSYS make.exe command.

3. Install additional needed MSYS software that is not installed by
the automatic installer.

mingw-get.exe --recursive install msys-unzip

4. Copy the MinGW-4.7.2/msys/1.0/bin directory to 
MinGW-4.7.2/msys/1.0/bin_without_sh and remove sh.exe from that latter
PATH (This works around a CMake issue with the "MinGW Makefiles" generator.)

5. Put both MinGW-4.7.2/bin and either MinGW-4.7.2/msys/1.0/bin (for
any Windows CMake generator you are going to use other than "MinGW
Makefiles) or MinGW-4.7.2/msys/1.0/bin_without_sh (for the case of
"MinGW Makefiles" on your PATH.

6. Download a recent cmake.exe version from
http://www.cmake.org/files.  I am currently using
v2.8/cmake-2.8.10.2-win32-x86.zip.  Unpack this using the unzip
command you just installed.  Put the resulting
cmake-2.8.10.2-win32-x86/bin on your PATH.  This downloadable binary
(which poses a security concern like all downloadable binaries)
is only used once.

7. If you are going to try the "NMake Makefiles JOM" generator, download
the latest jom_VERSION.zip from http://releases.qt-project.org/jom, unpack
it with unzip.exe just just installed and put jom.exe on your PATH.

8. If you are going to try the "Ninja" generator, then follow the
build instructions for that tool at
http://www.cmake.org/pipermail/cmake/2013-June/055038.html + one
correction in a following post in that thread.
===============================================================================

Build instructions for the buildtools (such as cmake):

Note that when cmake is built this way it is configured by the
bootstrap script (which demands sh is on the PATH) rather than cmake
itself so the downloaded binary version of cmake used to configure the
build_tools build is not actually used to build cmake which provides a
slight increase in security for the paranoid.  And you should be
paranoid about security (i.e., you should build your own
version of CMake from source, in my opinion rather than relying
on a downloaded binary) since crackers are always
trying it on.

Note the special paths below which have a _buildtools suffix, and also
note the special option -DBUILD_THE_BUILDTOOLS=ON which configures
builds of _only_ the build tools such as cmake that are used for the
other software projects.

Linux "Unix Makefiles"

wine@raven> mkdir -p /home/wine/newstart/build_script/build_dir-linux_buildtools
wine@raven> cd /home/wine/newstart/build_script/build_dir-linux_buildtools
wine@raven> rm -rf /home/wine/newstart/build_script/build_dir-linux_buildtools/*
wine@raven> cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=/home/wine/newstart/build_script/install-linux_buildtools -DBUILD_THE_BUILDTOOLS=ON ~software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
wine@raven> make VERBOSE=1 build_all >& build_all.out

Windows "MSYS Makefiles" (This is a special case that requires sh.exe to
be on the PATH so the "MinGW Makefiles" generator cannot be used.

bash.exe-3.1$ mkdir -p /z/home/wine/newstart/build_script/build_dir-git_buildtools
bash.exe-3.1$ cd /z/home/wine/newstart/build_script/build_dir-git_buildtools
bash.exe-3.1$ rm -rf /z/home/wine/newstart/build_script/build_dir-git_buildtools/*
bash.exe-3.1$ cmake -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=/z/home/wine/newstart/build_script/install-git_buildtools -DBUILD_THE_BUILDTOOLS=ON /z/home/software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
bash.exe-3.1$ mingw32-make.exe VERBOSE=1 build_all >& build_all.out

Build instructions for everything else which is not a build tool but
which uses those (such as cmake) which have been built above:

1. Put the bin directory contained in the install tree created above
at the top of the PATH. In my case this directory is either
/home/wine/newstart/build_script/install-linux_buildtools/bin (Linux)
or /z/home/wine/newstart/build_script/install-git_buildtool/bin
(Windows).  This step insures you will be using the buildtools you
built yourself from source from now on rather than some downloaded binary.

2. Adjust the local path to the PLplot source tree in plplot/bp.cmake
(this will only be necessary until build_projects is updated to configure
a build of an svn client that works on Windows).  The alternative is
to download and test a released version of PLplot, but I prefer the
svn trunk version because that is much more up to date.

3. Examples of configuring a build and test of PLplot and some of its
soft dependencies on several different systems with various generators
and build tools.  Adjust these for your own paths, and note the first
three commands in each group are to insure you start with a clean
build directory

Linux "Unix Makefiles"

wine@raven> mkdir -p /home/wine/newstart/build_script/build_dir-linux
wine@raven> cd /home/wine/newstart/build_script/build_dir-linux
wine@raven> rm -rf /home/wine/newstart/build_script/build_dir-linux/*
wine@raven> cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=/home/wine/newstart/build_script/install-linux ~software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
wine@raven> make VERBOSE=1 build_plplot >& build_plplot.out

Windows "MinGW Makefiles"

bash.exe-3.1$ mkdir -p /z/home/wine/newstart/build_script/build_dir-git_mingw
bash.exe-3.1$ cd /z/home/wine/newstart/build_script/build_dir-git_mingw
bash.exe-3.1$ rm -rf /z/home/wine/newstart/build_script/build_dir-git_mingw/*
bash.exe-3.1$ cmake -G"MinGW Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=/z/home/wine/newstart/build_script/install-git_mingw /z/home/software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
bash.exe-3.1$ mingw32-make.exe VERBOSE=1 build_plplot >& build_plplot.out

Other combinations that have been successfully tested in part by building
all the C and C++ PLplot dependencies with the "build_all" target.

Note, the "build_all" target does not include PLplot itself yet
(which has additional languages needs such as Fortran, and Ada which
are known to not work for "Ninja" and which might not work for "NMake Makefiles JOM" ).  Also note, we assume something similar to the first three commands
given above has been used to start with a clean build tree.

On Linux:

# "Ninja" generator
irwin@raven> cmake -G"Ninja" -DCMAKE_INSTALL_PREFIX:PATH=/home/wine/newstart/build_script/install-linux_ninja ~software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
irwin@raven> ninja -v build_all >& build_all.out

On Windows:

# "MSYS Makefiles" generator
# This one should work for the build_plplot target as well, but I
# haven't tested it yet.
bash.exe-3.1$ cmake -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=/z/home/wine/newstart/build_script/install-git /z/home/software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
bash.exe-3.1$ make.exe VERBOSE=1 build_all >& build_all.out

# "Ninja" generator
bash.exe-3.1$ cmake -G"Ninja" -DCMAKE_INSTALL_PREFIX:PATH=/z/home/wine/newstart/build_script/install-git_ninja /z/home/software/plplot_svn/HEAD/pl
plot_allura/cmake/build_projects >& cmake.out
bash.exe-3.1$ ninja -v build_all >& build_all.out

# "NMake Makefiles JOM" generator
# This CMake generator currently has some issues with using the MinGW suite
# of compilers by default that must be worked around by being specific about
# what compilers you want.
bash.exe-3.1$ cmake -G"NMake Makefiles JOM" -DCMAKE_C_COMPILER:FILEPATH=/z/home/wine/newstart/MinGW-4.7.2/bin/gcc.exe -DCMAKE_CXX_COMPILER:FILEPATH=/z/home/wine/newstart/MinGW-4.7.2/bin/g++.exe -DCMAKE_RC_COMPILER:FILEPATH=/z/home/wine/newstart/MinGW-4.7.2/bin/windres.exe -DCMAKE_INSTALL_PREFIX:PATH=/z/home/wine/newstart/build_script/install-git_jom /z/home/software/plplot_svn/HEAD/plplot_allura/cmake/build_projects >& cmake.out
bash.exe-3.1$ jom build_all >& build_all.out

N.B. All of the above have been run without issues on a Wine platform
(wine-git close to wine-1.6-rc1) and therefore should also work for
the Microsoft version of Windows.

===============================================================================
Build configuration for the special case of GTK.  The GNOME Tool Kit stack
of libraries is normally built by jhbuild which keeps its configuration
files in xml form.  Here is how you convert that form of build-configuration
data to the build_projects form.

pushd <tmpdir>
# This downloads all the relevant xml build configuration files
# for the given version of GTK
wget -nd  ftp://ftp.acc.umu.se/pub/GNOME/teams/releng/3.4.1/*
popd
./gtk_xml_recursive_process.py \
<tmpdir>/gnome-apps-3.4.1.modules \
>gtk_packages.xml

Where GNOME-3.4.1 comes fairly close to the individual
package versions that currently work well together for Debian wheezy.

# Transform the xml form to a form that can be used by a cmake script.
# Note, there will be some information messages sent to stderr by this
# script that typically relate to good packages (ones that can be
# transformed by this script) and bad packages. Currently the list of
# bad packages are confined just to those which are completely missing
# from the jhbuild data for gtk.  The first command-line argument is
# the starting package name and the second command-line argument is a
# control variable where the least significant bit is ON for following (hard)
# "dependencies" dependencies, the next least significant bit is ON
# for following (soft) "suggests", dependencies, and the next least
# significant bit is ON for following (would be nice) "after"
# dependencies.  Currently I use a command variable of 1 to keep
# the number of packages configured for building pango and
# (hard) dependencies to a minimum.
./gtk_transform.py "pango" 1 <gtk_packages.xml 1>| pango_packages.data

# N.B. there are no plans to keep gtk_packages.xml or pango_packages.data
# under version control.  However, if a patch is necessary for gtk_packages.xml
# created as above, we will keep that patch under version control.

# Finally to actually generate build configurations for build_packages run
# the following command.

cmake -DFILENAME:FILEPATH=pango_packages.data -P configure_bp.cmake

