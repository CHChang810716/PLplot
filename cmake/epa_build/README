This file contains directions for epa_build users.  If in addition you
are interested in helping to develop that project, you should look at
README.developers as well.

The epa_build project should work out of the box for Linux or Mac OS X
systems with a full development tool-chain installed including
relevant compilers (gcc, g++, gfortran, Ada in the suite of gcc
compilers), relevant scripting languages (Python, Lua, etc.), make,
and cmake (at least version 2.8.11.2).

But the situation is different on Windows where you have to download
and install specific toolchain software before you start.  

===============================================================================
Installing the Required Windows Toolchain:

N.B. There is a good possibility that epa_build will work with the
Microsoft proprietary toolchain, and I (which refers to Alan W. Irwin
throughout this file) would be happy to accept patches to make that so
(including a patch for this file), but my only experience is with free
software so until I receive such patches, the instructions below refer
only to free software toolchains.

1. Install latest MinGW/MSYS using the automatic installer

Use the latest automatic installer (currently
mingw-get-inst-20120426.exe which can be obtained from
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/mingw-get-inst-20120426/).
Specify obtaining the latest updates, all relevant compilers,
(everythiing except objc) and also specify the MSYS development
software.  This should install, for example, version 4.7.2 of gcc,
g++, Ada, and gfortran.

2. Downgrade one component of MSYS.
N.B. This must be done from the cmd environment since
if you run this from bash.exe, that executable's use of MSYS
libraries will screw up the downgrade.

MinGW-4.7.2\bin\mingw-get.exe upgrade msys-core-bin=1.0.17-1

This downgrade is necessary and quite important, see
http://sourceforge.net/p/mingw/bugs/1950.  Otherwise, you
will get an infinite hang from any attempt to do parallel
builds (which epa_build automatically uses for many
of its builds) using the MSYS make.exe command.

3. Install additional needed MSYS software that is not installed by
the automatic installer.

mingw-get.exe --recursive install msys-unzip

4. Download a recent cmake.exe version from
http://www.cmake.org/files.  I am currently using
v2.8/cmake-2.8.12.1-win32-x86.zip.  Unpack this using the unzip
command you just installed and put cmake.exe on your PATH.

5. [OPTIONAL] Copy the MinGW-4.7.2/msys/1.0/bin directory to
MinGW-4.7.2/msys/1.0/bin_without_sh and remove sh.exe from that latter
PATH (This works around an issue with the "MinGW Makefiles" generator
which apparently processes path names differently if sh.exe is in the
PATH.  Hopefully, that "MinGW Makefiles" kludge will disappear in the
future.)

6. Put both MinGW-4.7.2/bin and either MinGW-4.7.2/msys/1.0/bin (for
any Windows CMake generator you are going to use other than "MinGW
Makefiles) or [OPTIONAL] MinGW-4.7.2/msys/1.0/bin_without_sh (for the case of
"MinGW Makefiles") on your PATH.

7. [OPTIONAL} If you are going to try the "NMake Makefiles JOM"
generator, download the latest jom_VERSION.zip from
http://releases.qt-project.org/jom, unpack it with unzip.exe just just
installed and put jom.exe on your PATH.

8. [OPTIONAL] If you are going to try the "Ninja" generator, then
follow the build instructions for that tool at
http://www.cmake.org/pipermail/cmake/2013-June/055038.html + one
correction in a following post in that thread.

===============================================================================
Set up instructions for epa_build

I. Unix platforms:

* Linux

Tailor the indicated values in setup/setup_linux for your own
system, then source that file, e.g.,

source <Top directory of PLplot source tree>/cmake/epa_build/setup/setup_linux

* Mac OS X

This has not been tried yet, but something similar to setup_linux should
do the job.

* Cygwin on Windows

Some experiments with this have just been started with nothing written
down with regards to setup.  But ultimately it should be very similar
to the Linux case.

II. Non-Cygwin Windows platforms:

* MinGW/MSYS for the Wine version of Windows

Tailor the indicated values in setup_mingw_msys_wine_toolchain and
setup/setup_msys_makefiles for your own system.  Then execute something
similar to the following from Linux to get into the bash.exe shell
on Wine:

wineserver -p
nice -19 wineconsole --backend=curses MinGW-4.7.2/msys/1.0/bin/bash.exe

Then from that bash.exe shell execute

bash.exe-3.1$ pushd /z/home/software/plplot_svn/HEAD/plplot_allura/cmake/epa_build/setup;source setup_msys_makefiles;popd

(You need to pushd or cd above to the setup directory because the the
setup_msys_makefiles file that is sourced, automatically executes
"source setup_mingw_msys_wine_toolchain", and that only works if it is
done from the setup directory.)

* MinGW/MSYS for the Microsoft version of Windows

This has not been tried yet but the setup should work very similarly
to the MinGW/MSYS/Wine case above.

* Other non-Cygwin Windows platforms:

Non-Cygwin windows epa_builds absolutely rely on MSYS tools such as
bash.exe.  But so long as Windows users download MSYS and put it on
the PATH, then in theory epa_build should work.  For example, I have
tried epa_build on Wine with some success for the "MSYS Makefiles"
CMake generator (those results are referred to above) as well as the
"MinGW Makefiles", "Ninja", and "NMake Makefiles JOM" generators.  All
of these results were with the gcc compiler suite from the MinGW
project.  I see no reason why that success could not be extended to
other command-line generators as well such as "NMake Makefiles" and
other compilers such as MSVC/Ifort, but the epa_build project needs
more volunteers to debug the platforms that interest them.

===============================================================================
Build directions for epa_build

I. Unix platforms

* Linux

Note that setup_linux sets up all the important environment variables you
need including GENERATOR_STRING, INSTALL_PREFIX, and EPA_BUILD_SOURCE_PATH.

A. [OPTIONAL] build necessary additional buildtools whose versions you
prefer compared to the versions available on your Linux distro.

# Insure you start with an empty build tree and vacant install tree
# Set <Build tree prefix> to any convenient directory under your control
# where you would like build results to be collected.
mkdir -p <Build tree prefix>/build_dir-linux_buildtools
rm -rf <Build tree prefix>/build_dir-linux_buildtools/* ${INSTALL_PREFIX}_buildtools
cd <Build tree prefix>/build_dir-linux_buildtools

cmake -DCMAKE_VERBOSE_MAKEFILE=ON -G"$GENERATOR_STRING" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}_buildtools -DBUILD_THE_BUILDTOOLS=ON $EPA_BUILD_SOURCE_PATH >& cmake.out

# Check cmake.out for any errors
less cmake.out

# Figure out which buildtools you want to build
make help

# I recommend building all of them on Linux.
make build_all >& build_all.out

# Check build_all.out for any errors
less build_all.out

B. Build and test a lite version of PLplot (without building or using
major soft dependencies such as pango/cairo, Qt4, and wxwidgets)
and [OPTIONAL] a fully configured PLplot version (where currently
pango/cairo and wxwidgets are built and used and the system
version of Qt4 is used).

# Insure you start with an empty build tree and vacant install tree
# Set <Build tree prefix> to any convenient directory under your control
# where you would like build results to be collected.
mkdir -p <Build tree prefix>/build_dir-linux
rm -rf <Build tree prefix>/build_dir-linux/* ${INSTALL_PREFIX}
cd <Build tree prefix>/build_dir-linux

cmake -DCMAKE_VERBOSE_MAKEFILE=ON -G"$GENERATOR_STRING" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX} $EPA_BUILD_SOURCE_PATH >& cmake.out

# Check cmake.out for any errors
less cmake.out

# Figure out which packages you want to build
make help

# Build and test the "lite" version of PLplot
make build_plplot_lite >& build_plplot_lite.out

# Check build_plplot_lite.out for any errors
less build_plplot_lite.out

# [OPTIONAL] Build and test the complete version of PLplot.
make build_plplot >& build_plplot.out

# Check build_plplot.out for any errors
less build_plplot.out

# N.B. add the option -DENABLE_COMPREHENSIVE_PLPLOT_TEST=ON to the
# above cmake command to run a comprehensive test script just after
# PLplot is built and installed for both the build_plplot and
# build_plplot_lite targets.  This test script (familiar to PLplot
# developers) requires substantial extra CPU time and ~4GB of extra
# disk space to run.

* Mac OS X and Cygwin

These epa_builds should be very similar to the Linux case.  I suggest
you use system versions of build tools (i.e., skip the
-DBUILD_THE_BUILDTOOLS=ON case above) to start until you start having
success with ordinary epa_builds.  And I would start small there with,
e.g., attempting to build shapelib, then plplot_lite before moving on
to a full plplot build (including builds of all its dependencies).

II. Non-Cygwin Windows platforms

For the MinGW/MSYS/Wine case, I (AWI) essentially followed the same
instructions as above for the Linux case.  However, some of the
buildtools (e.g., Tcl/Tk/Itcl/Itk/Iwidgets variants) don't yet build
on Windows and although CMake builds fine on MinGW/MSYS, the result
does not have the power (supplied only by a fully configured curl
library and not by the internal curl alternative that the CMake build
can use as a backup) to download from "https" archives which is
essential for some of the epa_builds.  The Linux and Cygwin platforms
do give the required access to a full-featured Curl library for the
cmake build to link to, but on MinGW/MSYS the only alternative is to
build your own curl library, and the epa_build configuration for that
has not been implemented yet although it is on my ToDo list.  The net
result of these considerations is I only built pkg-config and swig for
the -DBUILD_THE_BUILDTOOLS=ON case which in turn implied I dropped
everything that was Tcl related from the PLplot build and relied on
the pre-built (and fully powered) binary version of CMake downloaded
from Kitware (see above setup instructions).  Also, for ordinary
epa_builds (with -DBUILD_THE_BUILDTOOLS=OFF), I only had success with
plplot_lite and not plplot.  The reason was the extra pango and qt
dependencies of plplot which had dependent packages of their own that
could not yet be built on Windows.

N.B. the tweaks required to make all epa_builds work on Windows should
be few per project since many others have had success building all
projects on Windows that are covered by epa_build.  But there are a
lot of such projects in, for example, the dependency list for pango,
and often the Windows build tweaks are not well publicized.  Thus,
some substantial and sustained effort (but not an impossibly difficult
effort) will be required to get all of the epa_build configurations to
work for the Windows case, and the success I have achieved with a
limited group of projects for the MinGW/MSYS/Wine case is a good
start.
