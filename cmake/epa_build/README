This file contains directions for epa_build users.  If in addition you
are interested in helping to develop that project, you should look at
README.developers as well.

The epa_build project should work out of the box for Linux or Mac OS X
systems with a full development tool-chain installed including
relevant compilers (gcc, g++, gfortran, Ada in the suite of gcc
compilers), relevant scripting languages (Python, Lua, etc.), make,
and cmake (at least version 2.8.11.2).

But the situation is different on Windows where you have to download
and install specific toolchain software before you start.  

===============================================================================
Installing the Required Windows Toolchain:

N.B. There is a good possibility that epa_build will work with the
Microsoft proprietary toolchain, and I would be happy to accept
patches to make that so (including a patch for this file), but my only
experience is with free software so until I receive such patches, the
instructions below refer only to free software toolchains.

1. Install latest MinGW/MSYS using the automatic installer

Use the latest automatic installer (currently
mingw-get-inst-20120426.exe which can be obtained from
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/mingw-get-inst-20120426/).
Specify obtaining the latest updates, all relevant compilers,
(everythiing except objc) and also specify the MSYS development
software.  This should install, for example, version 4.7.2 of gcc,
g++, Ada, and gfortran.

2. Downgrade one component of MSYS.
N.B. This must be done from the cmd environment since
if you run this from bash.exe, that executable's use of MSYS
libraries will screw up the downgrade.

MinGW-4.7.2\bin\mingw-get.exe upgrade msys-core-bin=1.0.17-1

This downgrade is necessary and quite important, see
http://sourceforge.net/p/mingw/bugs/1950.  Otherwise, you
will get an infinite hang from any attempt to do parallel
builds (which epa_build automatically uses for many
of its builds) using the MSYS make.exe command.

3. Install additional needed MSYS software that is not installed by
the automatic installer.

mingw-get.exe --recursive install msys-unzip

4. Download a recent cmake.exe version from
http://www.cmake.org/files.  I am currently using
v2.8/cmake-2.8.10.2-win32-x86.zip.  Unpack this using the unzip
command you just installed and put cmake.exe on your PATH.

5. [OPTIONAL] Copy the MinGW-4.7.2/msys/1.0/bin directory to
MinGW-4.7.2/msys/1.0/bin_without_sh and remove sh.exe from that latter
PATH (This works around an issue with the "MinGW Makefiles" generator
which apparently processes path names differently if sh.exe is in the
PATH.  Hopefully, that "MinGW Makefiles" kludge will disappear in the
future.)

6. Put both MinGW-4.7.2/bin and either MinGW-4.7.2/msys/1.0/bin (for
any Windows CMake generator you are going to use other than "MinGW
Makefiles) or [OPTIONAL] MinGW-4.7.2/msys/1.0/bin_without_sh (for the case of
"MinGW Makefiles") on your PATH.

7. [OPTIONAL} If you are going to try the "NMake Makefiles JOM"
generator, download the latest jom_VERSION.zip from
http://releases.qt-project.org/jom, unpack it with unzip.exe just just
installed and put jom.exe on your PATH.

8. [OPTIONAL] If you are going to try the "Ninja" generator, then
follow the build instructions for that tool at
http://www.cmake.org/pipermail/cmake/2013-June/055038.html + one
correction in a following post in that thread.

===============================================================================
Set up instructions for epa_build

1. Linux or Mac OS X.

Tailor the indicated values in setup/setup_linux for your own
system, then source that file, e.g.,

source <Top directory of PLplot source tree>/cmake/epa_build/setup/setup_linux

2. Windows platforms

Similar instructions about tailoring and sourcing relevant files to be
done later after I update and test the files in question.

===============================================================================
Build directions for epa_build

1. Linux

Note that setup_linux sets up all the important environment variables you
need including GENERATOR_STRING, INSTALL_PREFIX, and EPA_BUILD_SOURCE_PATH.

A. [OPTIONAL] build necessary additional buildtools whose versions you
prefer compared to the versions available on your Linux distro.

# Insure you start with an empty build tree and vacant install tree
# Set <Build tree prefix> to any convenient directory under your control
# where you would like build results to be collected.
mkdir -p <Build tree prefix>/build_dir-linux_buildtools
rm -rf <Build tree prefix>/build_dir-linux_buildtools/* ${INSTALL_PREFIX}_buildtools
cd <Build tree prefix>/build_dir-linux_buildtools

cmake -DCMAKE_VERBOSE_MAKEFILE=ON -G"$GENERATOR_STRING" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}_buildtools -DBUILD_THE_BUILDTOOLS=ON $EPA_BUILD_SOURCE_PATH >& cmake.out

# Check cmake.out for any errors
less cmake.out

# Figure out which buildtools you want to build
make help

# I recommend building all of them on Linux.
make all >& all.out

# Check all.out for any errors
less all.out

B. Build and test a lite version of PLplot (without building or using
major soft dependencies such as pango/cairo, Qt4, and wxwidgets)
and [OPTIONAL] a fully configured PLplot version (where currently
pango/cairo and wxwidgets are built and used and the system
version of Qt4 is used).

# Insure you start with an empty build tree and vacant install tree
# Set <Build tree prefix> to any convenient directory under your control
# where you would like build results to be collected.
mkdir -p <Build tree prefix>/build_dir-linux
rm -rf <Build tree prefix>/build_dir-linux/* ${INSTALL_PREFIX}
cd <Build tree prefix>/build_dir-linux

cmake -DCMAKE_VERBOSE_MAKEFILE=ON -G"$GENERATOR_STRING" -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX} $EPA_BUILD_SOURCE_PATH >& cmake.out

# Check cmake.out for any errors
less cmake.out

# Figure out which packages you want to build
make help

# Build and test the "lite" version of PLplot
make build_plplot_lite >& build_plplot_lite.out

# Check build_plplot_lite.out for any errors
less build_plplot_lite.out

# [OPTIONAL] Build and test the complete version of PLplot.
make build_plplot >& build_plplot.out

# Check build_plplot.out for any errors
less build_plplot.out

2. Windows platforms

Very similar to above, but I will fill in variations that I used
on Wine when I get a chance to test them again.
