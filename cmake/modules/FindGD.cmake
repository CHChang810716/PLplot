# - Find GD
# Find the native GD includes and library
# This module defines
#  GD_INCLUDE_DIR, where to find jpeglib.h, etc.
#  GD_LIBRARIES, the libraries needed to use GD.
#  GD_FOUND, If false, do not try to use GD.
# also defined, but not for general use are
#  GD_LIBRARY, where to find the GD library.
#  GD_SUPPORTS_PNG, GD_SUPPORTS_JPEG, GD_SUPPORTS_GIF, test
#  support for image formats in GD.

FIND_PATH(GD_INCLUDE_DIR gd.h
/usr/local/include
/usr/include
)

SET(GD_NAMES ${GD_NAMES} gd)
FIND_LIBRARY(GD_LIBRARY
  NAMES ${GD_NAMES}
  PATHS /usr/lib /usr/local/lib
  )

IF (GD_LIBRARY AND GD_INCLUDE_DIR)
    SET(GD_LIBRARIES ${GD_LIBRARY})
    SET(GD_FOUND "YES")
ELSE (GD_LIBRARY AND GD_INCLUDE_DIR)
  SET(GD_FOUND "NO")
ENDIF (GD_LIBRARY AND GD_INCLUDE_DIR)

IF (GD_FOUND)
   INCLUDE(CheckLibraryExists)
   GET_FILENAME_COMPONENT(GD_LIB_PATH ${GD_LIBRARY} PATH)
   GET_FILENAME_COMPONENT(GD_LIB ${GD_LIBRARY} NAME)

   CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImagePng" "${GD_LIB_PATH}" GD_SUPPORTS_PNG)
   IF (GD_SUPPORTS_PNG)
     INCLUDE(FindPNG)
     IF (PNG_FOUND)
       SET(GD_LIBRARIES ${GD_LIBRARIES} ${PNG_LIBRARIES})
       SET(GD_INCLUDE_DIR ${GD_INCLUDE_DIR} ${PNG_INCLUDE_DIR})
     ELSE (PNG_FOUND)
       SET(GD_FOUND "NO")
     ENDIF (PNG_FOUND)
   ENDIF (GD_SUPPORTS_PNG)

   CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImageJpeg" "${GD_LIB_PATH}" GD_SUPPORTS_JPEG)
   IF (GD_SUPPORTS_JPEG)
     INCLUDE(FindJPEG)
     IF (JPEG_FOUND)
       SET(GD_LIBRARIES ${GD_LIBRARIES} ${JPEG_LIBRARIES})
       SET(GD_INCLUDE_DIR ${GD_INCLUDE_DIR} ${JPEG_INCLUDE_DIR})
     ELSE (JPEG_FOUND)
       SET(GD_FOUND "NO")
     ENDIF (JPEG_FOUND)
   ENDIF (GD_SUPPORTS_JPEG)

   CHECK_LIBRARY_EXISTS("${GD_LIBRARY}" "gdImageGif" "${GD_LIB_PATH}" GD_SUPPORTS_GIF)

   # Trim the list of include directories
   SET(GDINCTRIM)
   FOREACH(DIR ${GD_INCLUDE_DIR})
    SET(FOUND OFF)
    FOREACH(TRIMMED ${GDINCTRIM})
      IF ("${DIR}" STREQUAL "${TRIMMED}")
	SET(FOUND ON)
      ENDIF ("${DIR}" STREQUAL "${TRIMMED}")
    ENDFOREACH(TRIMMED ${GDINCTRIM})
    IF (NOT FOUND)
      SET(GDINCTRIM "${GDINCTRIM}" "${DIR}")
    ENDIF (NOT FOUND)
  ENDFOREACH(DIR ${GD_INCLUDE_DIR})
  SET(GD_INCLUDE_DIR ${GDINCTRIM})

  SET(GD_LIBRARY_DIR)
  # Generate trimmed list of library directories and list of libraries
  FOREACH(LIB ${GD_LIBRARIES})
    GET_FILENAME_COMPONENT(NEXTLIBDIR ${LIB} PATH)
    SET(FOUND OFF)
    FOREACH(LIBDIR ${GD_LIBRARY_DIR})
      IF ("${NEXTLIBDIR}" STREQUAL "${LIBDIR}")
	SET(FOUND ON)
      ENDIF ("${NEXTLIBDIR}" STREQUAL "${LIBDIR}")
    ENDFOREACH(LIBDIR ${GD_LIBRARIES})
    IF (NOT FOUND)
      SET(GD_LIBRARY_DIR "${GD_LIBRARY_DIR}" "${NEXTLIBDIR}")
    ENDIF (NOT FOUND)
  ENDFOREACH(LIB ${GD_LIBRARIES})

ENDIF (GD_FOUND)

IF (GD_FOUND)
   IF (NOT GD_FIND_QUIETLY)
      MESSAGE(STATUS "Found GD: ${GD_LIBRARY}")
   ENDIF (NOT GD_FIND_QUIETLY)
ELSE (GD_FOUND)
   IF (GD_FIND_REQUIRED)
      MESSAGE(FATAL_ERROR "Could not find GD library")
   ENDIF (GD_FIND_REQUIRED)
ENDIF (GD_FOUND)

MARK_AS_ADVANCED(
  GD_LIBRARY
  GD_LIBRARIES
  GD_INCLUDE_DIR
  GD_LIBRARY_DIR
  GD_SUPPORTS_PNG
  GD_SUPPORTS_JPEG
  GD_SUPPORTS_GIF
  )
