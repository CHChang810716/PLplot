The purpose of this complete project is to provide a simple Ada test case
consisting of an Ada executable calling a single routine in an Ada library
which prints out the classic "hello, world" phrase.  This complete project
includes a CMake-based build system and files for Ada language support
within CMake which will eventually become part of CMake itself.

To run the test

(1) create an _empty_ build directory and cd to it.
mkdir build_dir
cd build_dir

(2) configure project with cmake 

  option a (built library is static).

cmake -DBUILD_SHARED_LIBS=OFF path/to/this/source/directory >& cmake.out

  option b (built library is shared by default).

cmake path/to/this/source/directory >& cmake.out

(2a) In cases where there are CMake errors revealed by either of the
above commands, use the --trace option for cmake (which traces every
cmake command that is executed so it generates a lot of output which
is useful whenever there is a direct issue with a CMake error, but
otherwise it is not too useful).

(3) build library and executable that links to it
make VERBOSE=1 >& make.out

(4) run test that should generate "hello, world" phrase.

src_executable/hello >& exectuable.out

(5, optional) Test with valgrind:

valgrind src_executable/hello >& valgrind.out

(6, optional) Test with ldd

ldd -r src_executable/hello >& ldd.out

N.B. on at least one platform (Cygwin) the -r option (which checks for
any undefined symbols) is not implemented yet (as of 2015-11) so you
will have to drop it for that special case until the Cygwin
ldd -r option is implemented.

7.  Check all *.out files to look for any error conditions.

In sum, this project provides a simple demonstration of how to use the
CMake Ada language support with Ada libraries that are either static
or shared. At the same time, this project tests the quality of CMake
Ada support for various user's platforms.  If any user is having
trouble with CMake Ada language support, this is the simple test case
they should run (once for the shared case and once for the static case
starting with an empty build tree in each case) to help diagnose the
problem.  The static and/or shared build-tree results (which would
automatically include the above *.out files) should be collected in a
compressed tarball and should be sent to me (AWI) for further
analysis.
