dnl configure.in for PLplot
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (C) 2001 Rafael Laboissiere
### 
### This file is free software; you can redistribute it and/or modify it
### under the terms of the GNU General Public License as published by the
### Free Software Foundation; either version 2, or (at your option) any
### later version.
### 
### This file is distributed in the hope that it will be useful, but WITHOUT
### ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
### FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
### for more details.
### 
### You should have received a copy of the GNU General Public License
### along with Octave; see the file COPYING.  If not, write to the Free
### Software Foundation, 59 Temple Place - Suite 330, Boston, MA
### 02111-1307, USA. 

### Autoconf/automake initializations

AC_REVISION($Revision$)
AC_INIT(src/plcore.c)
AM_INIT_AUTOMAKE(plplot, 5.1.0)

### Version number for the shared libraries, conforming to libtool standard 

SOVERSION=6:0:1
AC_SUBST(SOVERSION)

### Test for programs

AM_PROG_CC_STDC
AM_PROG_LIBTOOL

### Double vs single precison

MY_ARG_WITH(double,
  [  --with-double           use double precision floats ($with_double)])
if test "$with_double" = yes; then
  AC_DEFINE(PL_DOUBLE)
  DBL_FLAG_M4=-DDOUBLE
fi
AM_CONDITIONAL(with_double, test "$with_double" = yes)

### C++ bindings

MY_ARG_ENABLE(cxx,
  [  --enable-cxx            compile C++ interface code ($enable_cxx)])
AM_CONDITIONAL(enable_cxx, [test "$enable_cxx" = yes])
if test "$enable_cxx" = yes ; then
  AC_PROG_CXX
fi

### Fortran 77 bindings

MY_ARG_ENABLE(f77,
  [  --enable-f77            compile Fortran-77 interface code ($enable_f77)])
AM_CONDITIONAL(enable_f77, test "$enable_f77" = yes)
if test "$enable_f77" = yes ; then
  AC_PROG_F77
  AC_CHECK_PROGS(M4, m4, "no")
  if test "$M4" = no ; then
    AC_MSG_ERROR([m4 preprocessor not found, but required for building
the Fortran bindings])
  fi
  M4_FLAGS="-S2000 -B8192 $DBL_FLAG_M4"
  AC_SUBST(M4_FLAGS)
fi

### Checks for existence of headers

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h termios.h)
AC_HEADER_SYS_WAIT

### Check for typedefs

# ----------------------------------------------------------------------------
# Some X11 headers require "caddr_t" even on systems that claim POSIX.1
# compliance, which is illegal.  This makes it impossible to compile
# programs that include X11 headers if _POSIX_SOURCE is defined.  I work
# around this potential problem by just defining caddr_t to 'char *' on all
# systems (unless it is set already), whether it will be needed or not.

AC_CHECK_TYPE(caddr_t, char *)

### Check for functions

AC_FUNC_VFORK
AC_CHECK_FUNC(popen, AC_DEFINE(HAVE_POPEN))

### Directory for PLplot specific data files

DATA_DIR=lib/${PACKAGE}${VERSION} 
AC_DEFINE_UNQUOTED(DATA_DIR, "$prefix/$DATA_DIR")
AC_SUBST(DATA_DIR)

### Configuration headers

AM_CONFIG_HEADER(include/plConfig.h include/plDevs.h)

### Modules 

AC_PATH_XTRA
MODULES="xwin.la"
AC_SUBST(MODULES)

### Drivers

define(PL_DRIVER_LIST, [
  dg300,
  gd,
  gnome,
  hpgl,
  impress,
  linuxvga,
  ljii,
  ljiip,
  next,
  null,
  pbm,
  plbuf,
  plmeta,
  ps,
  tek,
  tk,
  xfig,
  xwin])

# Macro to set one driver enable value

define(PL_ADD_DRIVER,[dnl
MY_ARG_ENABLE($1, builtin(format,
[  --enable-%-14s enable %s device driver ($enable_$1)], $1, $1))
if test "$enable_$1" = "yes" ; then
  enable_$1="yes"
  AC_DEFINE(PLD_$1)
  DRIVERS="$DRIVERS $1.lo"
else
  enable_$1="no"
fi
])dnl

# Recursive macro to set up all driver help entries

define(PL_DRIVERS,[ifelse($1,,,[PL_ADD_DRIVER($1)dnl
PL_DRIVERS(builtin([shift],$*))])])

PL_DRIVERS(PL_DRIVER_LIST)
AC_SUBST(DRIVERS)

### Build Makefiles

AC_OUTPUT([Makefile src/Makefile include/Makefile lib/Makefile
           bindings/Makefile bindings/c++/Makefile bindings/f77/Makefile
           drivers/Makefile])
