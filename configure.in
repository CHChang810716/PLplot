dnl configure.in for PLplot
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (C) 1994 Maurice LeBrun
dnl Copyright (C) 2002 Rafael Laboissiere
dnl Copyright (C) 2002 Alan W. Irwin

dnl This file is part of PLplot.

dnl This file is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU Library General Public License as published by
dnl the Free Software Foundation; version 2 of the License.

dnl This file is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU Library General Public License for more details.

dnl You should have received a copy of the GNU Library General Public License
dnl along with the file; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
dnl
dnl -----------------------------------------------------------------------
dnl The first part of this script (between "divert(0)" and
dnl "divert(-1)" below came from Maurice LeBrun's original
dnl cf/configure.in.  It makes possible to give default values to the
dnl configure options and set up appropriate device and driver lists.
dnl
dnl After that part, a whole rewrite for Automake/Libtool has been
dnl done by Rafael Laboissiere. 
dnl
divert(0)dnl --*-Autoconf-*--
#!/bin/sh
#
# configure.in
#
# Maurice LeBrun
# IFS, University of Texas at Austin
# 14-Jul-1994
#
# PLplot configure script input
#
# This script does a few things that most autoconf-generated scripts do not.
# I resisted going with autoconf for a long time, in favor of a home-rolled
# solution because of (a) certain needs that autoconf didn't appear to meet,
# and (b) PLplot started out as a package with much less demanding needs
# than today.  Eventually the build situation got out of hand, and I took
# the plunge -- all those nice features in autoconf were just too hard to
# resist any longer.  Those areas where I needed to be a bit inventive
# include:
#
# - makefile control flow and file inclusion.  Standard make is braindead in
# this regard.  The problem is how to conditionally enable/disable packages
# in the makefile itself.  GNU make appears to handle this quite well, but I
# have concerns about portability -- I've heard of (and had) problems
# porting it to old versions of Unix, and it's not available under some
# non-Unix systems (notably MSDOS).  Anyhow, there are several ways one can
# simulate active control, and the route I've gone is to include a separate
# file for each capability.  Makefile.in is created by the configure script
# by concatenating the right pieces together.  Not only is this very
# portable, but keeping the target/dependency portion separate allows (a)
# this to be generated automatically e.g. by makedepend without changing any
# other file, and (b) non-Unix ports to share it (important because the
# target/dependency list tends to change a lot).  Since these Makefile
# fragments are just text files, it should be simple enough to string them
# together as desired.
#
# - System-specific settings for ANSI C compiler, Fortran compiler, and
# other non-standard switches (profiling, auto promotion in Fortran,
# optimization levels).  This is handled by a largish case statement over
# system type that I snarfed from my previous configure utils.  A similar
# case statement for building shared libraries was snarfed from the BLT (Tk
# extension package) configure script.
#
# - Faster, site-specific configures.  I have set things up so that most of
# the configure is skipped if the relevant shell variables are set.  Early
# on I try to source a defaults file (cf_plplot.in, both the build directory
# and ~/config are checked) which does this.  The point is, for a given site
# most settings are invariant from one configure to the next, but you might
# want to change things like what packages are enabled, compilers,
# precision, profiling, debugging, etc.  Very useful for development.  Note:
# Autoconf 2.0 and later supports cache files, which are similar in some
# ways but are not really a replacement for this facility.
# ----------------------------------------------------------------------------

# Startup code that needs to be run BEFORE anything in the autogenerated
# configure script is done.  Why isn't there an official way to do this?
# I'm about ready to barf..

# Get system using uname.

system=unknown
uname >/dev/null 2>&1 && system=`uname -s`-`uname -r`

# Fix Cray braindamage

case "$system" in
    sn* )
	system=`uname -m`-`uname -r`
    ;;
esac

# Default settings

with_debug=no
with_opt=yes
with_double=no
with_profile=no
with_shlib=yes
with_gcc=no
with_warn=no
with_dbmalloc=no
with_fseek=no
with_pkgdir=
with_rpath=yes
with_nobraindead=no
with_freetype=no

enable_drivers=yes
#no required by default because yes needs shared libraries which we don't know
#about at this point.
enable_dyndrivers=no
enable_f77=yes
enable_cxx=yes
enable_python=yes
enable_tcl=yes
enable_itcl=yes
enable_java=no
enable_octave=no
#explicit default values must be specified here for library and header 
#searching to work right for the following variables.  Note these variables
#also have a driver role to play, but unlike these, pure-driver variables
#(e.g., enable_tek4010) do not require a default to be specified here.
enable_gnome=no
enable_ntk=no
enable_tkwin=no
enable_png=yes
enable_jpeg=yes
enable_cgm=yes
enable_tk=yes
enable_xwin=yes

# separate the concept of desiring a driver (above) with
# having system support for it.
has_x11=yes
has_tcl=yes
has_tk=yes

divert(-1)

# ------------------------------------------------------------------------
# Support macros for driver inclusion and help entries.

# Including a driver in the below list includes it by default.
# Note that each driver should be treated separately even if
# they are in the same source code file.
# For example, the ps and psc drivers are defined in the ps.c source
# code file.

# N.B. This is ordered the same as the *driver pair* list below to help
# humans keep the associations straight, but this is not necessary.

define(PL_DRIVER_LIST,
[cgm, 
dg300, 
png, jpeg, 
gnome, 
hp7470, hp7580, lj_hpgl, 
imp, 
linuxvga, 
ljii, 
ljiip, 
ntk, 
null, 
pbm, 
plmeta, 
ps, psc, 
pstex, 
xterm, tek4010, tek4107, mskermit, 
versaterm, vlt, conex, tek4010f, tek4107f, 
tk, 
tkwin, 
xfig, 
xwin])

# Note specifically which drivers are known to be loadable.  Eventually,
# hopefully, every driver will show up on this list.  However, we add them one
# at a time since each will have its own peculiarities in the build process
# (none missing at present).

# N.B. This is ordered the same as the *driver pair* list below to help
# humans keep the associations straight, but this is not necessary.

define([PL_DYNAMIC_DRIVER_LIST],
[cgm \
dg300 \
png jpeg \
gnome \
hp7470 hp7580 lj_hpgl \
imp \
linuxvga \
ljii \
ljiip \
ntk \
null \
pbm \
plmeta \
ps psc \
pstex \
xterm tek4010 tek4107 mskermit \
versaterm vlt conex tek4010f tek4107f \
tk \
tkwin \
xfig \
xwin])

# We think of a "device" as the output medium.  Could be a machine
# style (Tektronix, X11), or a file format (Postscript).
#
# A "driver" is the PLplot code that produces the output on the
# medium.
#
# Some drivers support multiple devices.  But we we need to make sure
# we compile only the selected drivers.  That is, if a driver supports
# devices not selected, we don't want to compile it at all.  Or if it
# supports multiple selected devices, we only want to compile it
# once.  To support this, we build an association list between devices
# and drivers.  This will be inspected to build up the set of drivers
# to be compiled based on which devices are selected.

# Ordered alphabetically by second in each pair (the driver) for human
# consumption, but this is not necessary.

define([PL_device_driver_pair_list],
[cgm:cgm \
dg300:dg300 \
png:gd jpeg:gd \
gnome:gnome \
hp7470:hpgl hp7580:hpgl lj_hpgl:hpgl \
imp:impress \
linuxvga:linuxvga \
ljii:ljii \
ljiip:ljiip \
ntk:ntk \
null:null \
pbm:pbm \
plmeta:plmeta \
ps:ps psc:ps \
pstex:pstex \
xterm:tek tek4010:tek tek4107:tek mskermit:tek \
versaterm:tek vlt:tek conex:tek tek4010f:tek tek4107f:tek \
tk:tk \
tkwin:tkwin \
xfig:xfig \
xwin:xwin])

# Macro to set one driver enable value

define(PL_ADD_DRIVER,[dnl
MY_ARG_ENABLE($1, builtin(format,
[  --enable-%-14s enable %s device driver ($enable_$1)], $1, $1))
if test "$enable_$1" = "yes" -o "$enable_$1 $enable_drivers" = " yes" ; then
    enable_$1="yes"

    driver_is_dynamic=0
    if test "$enable_dyndrivers" = "yes"; then
	for drv in PL_DYNAMIC_DRIVER_LIST; do
	    if test "$drv" = "$1"; then
		driver_is_dynamic=1
		break
	    fi
	done
    fi

#    echo "1 = $1"
#    echo "driver_is_dynamic: $driver_is_dynamic"

    driver=""
    for devdrv in PL_device_driver_pair_list; do
	device=`echo $devdrv | cut -d: -f1`
	if test "$device" = "$1"; then
	    driver=`echo $devdrv | cut -d: -f2`
	    break
	fi
    done

    if test $driver_is_dynamic != 0; then
	found=0
	for drv in $DYNAMIC_DRIVERS; do
	    if test "$drv" = "$driver$LIB_TAG""_drv.la"; then
		found=1
		break
	    fi
	done
	if test $found = 0; then
	    DYNAMIC_DRIVERS="$DYNAMIC_DRIVERS $driver$LIB_TAG""_drv.la"
	    echo -n $driver ""
	fi

	DYNAMIC_DEVICES="$DYNAMIC_DEVICES $1"
    elif test "$driver" = "xwin" -o "$driver" = "tkwin"; then
	found=0
	for drv in $TCL_STATIC_DRIVERS; do
	    if test "$drv" = "$driver"; then
		found=1
		break
	    fi
	done
	if test $found = 0; then
	    TCL_STATIC_DRIVERS="$TCL_STATIC_DRIVERS $driver$LIB_TAG"
	fi
    else
	found=0
	for drv in $STATIC_DRIVERS; do
	    if test "$drv" = "$driver"; then
		found=1
		break
	    fi
	done
	if test $found = 0; then
	    STATIC_DRIVERS="$STATIC_DRIVERS $driver$LIB_TAG"
	fi
    fi

    AC_DEFINE(PLD_$1)
    DEVICES="$DEVICES $1"
else
    enable_$1="no"
fi
])dnl

# Recursive macro to set up all driver help entries

define(PL_DRIVERS,[ifelse($1,,,[PL_ADD_DRIVER($1)dnl
PL_DRIVERS(builtin([shift],$*))])])

# ------------------------------------------------------------------------
divert(0)dnl

# Special cases

case "$system" in
    aix*|AIX*|rs*|RS*|ibm*|IBM* ) 
	with_opt=no
    ;;
    BSD/OS* ) 
	with_fseek=yes
	with_gcc=yes
    ;;
    linux*|LINUX*|Linux* ) 
	with_gcc=yes
    ;;
    Darwin* ) 
        # Apparently, this is gcc with some add-ons, ugh!
	with_gcc=yes
    ;;
    next*|NeXT*|NEXT* ) 
	with_gcc=yes
    ;;
    ultrix*|ULTRIX* ) 
	with_gcc=yes
    ;;
esac

# Source site-specific variables file, if present.  Very nice for setting up
# site-specific defaults or for reducing the time spent configuring.
#
# This MUST MUST MUST be done before command-line flags are handled (i.e.
# before expanding ac_init) so that the user can override if necessary.

with_defaults=yes
for option in $*; do
    case "$option" in
	-with-defaults | --with-defaults | -with-defaults=yes | --with-defaults=yes )
	    with_defaults=yes
	;;
	-without-defaults | --without-defaults | -with-defaults=no | --with-defaults=no )
	    with_defaults=no
	;;
    esac
done

if test "$with_defaults" = "no"; then
    echo "Performing full configure."
else
    initfile="./cf_plplot.in"
    if test -f $initfile; then
	echo "Getting default settings from $initfile."
	. $initfile
    else
	initfile="$HOME/config/cf_plplot.in"
	if test -f $initfile; then
	    echo "Getting default settings from $initfile."
	    . $initfile
	else
	    echo "No defaults file found, performing full configure."
	fi
    fi
fi

divert(-1)

# ----------------------------------------------------------------------------
# Okay, now back to ordinary configure scriptisms.
# ----------------------------------------------------------------------------

### Autoconf/automake initializations

AC_REVISION($Revision$)
AC_INIT(src/plcore.c)
AM_INIT_AUTOMAKE(plplot, 5.1.0)

### Version number for the shared libraries, conforming to libtool standard 

SOVERSION=6:0:1
AC_SUBST(SOVERSION)

### Test for programs
AC_LIBTOOL_DLOPEN
AC_LIBLTDL_CONVENIENCE
AC_CONFIG_SUBDIRS(libltdl)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

AM_PROG_CC_STDC
AM_PROG_LIBTOOL
AM_PATH_PYTHON(1.5)

MY_ARG_WITH(freetype,
  [  --with-freetype         enable driver options for using freetype library for fonts ($with_freetype)])

MY_ARG_ENABLE(drivers,
  [  --enable-drivers        enable all device drivers ($enable_drivers)])

MY_ARG_ENABLE(dyndrivers,
  [  --enable-dyndrivers     enable dynamic loading of drivers ($enable_dyndrivers)])

# Set driver enable values
#
# You can enable/disable drivers either by the command line
# (--enable-<driver> or --disable-<driver>) or via the cf_plplot.in file
# (remember to use underscores instead of dashes here).  You can disable
# all drivers by default by using --disable-drivers.

# Special cases

case $system in
    Linux* )
	if test -z "$enable_linuxvga"; then
 	   enable_linuxvga=$enable_drivers
	fi
    ;;
    * )
	enable_linuxvga="no"
    ;;
esac

# ----------------------------------------------------------------------------
# Set flag to enable searching for dynloadable drivers, if appropriate.
# ----------------------------------------------------------------------------

if test "$enable_dyndrivers" = "yes"; then
    AC_DEFINE(ENABLE_DYNDRIVERS)
fi

### Modify system-dependent results based on availability
AC_INCLUDE(sysloc.in)
#disable LIBS so we don't have all libraries mentioned
LIBS=""

### automake symbols for system-dependent results

if test "$with_freetype" = yes; then
   if test "$FREETYPEINCDIR" != default; then
      FREETYPEINCCMD="-I"$FREETYPEINCDIR
      AC_SUBST(FREETYPEINCCMD)
   fi
   if test "$FREETYPELIBDIR" = default; then
      FREETYPELIBCMD=$FREETYPELIBSTR
   else
      FREETYPELIBCMD="-L "$FREETYPELIBDIR" "$FREETYPELIBSTR
   fi
   AC_SUBST(FREETYPELIBCMD)
fi

if test "$enable_tcl" = yes; then
   if test "$TCLINCDIR" != default; then
      TCLINCCMD="-I"$TCLINCDIR
      AC_SUBST(TCLINCCMD)
   fi
   if test "$TCLLIBDIR" = default; then
      TCLLIBCMD=$TCLLIBSTR
   else
      TCLLIBCMD="-L "$TCLLIBDIR" "$TCLLIBSTR
   fi
   AC_SUBST(TCLLIBCMD)
fi

if test "$enable_tk" = yes; then
   if test "$TKINCDIR" != default; then
      TKINCCMD="-I"$TKINCDIR
      AC_SUBST(TKINCCMD)
   fi
   if test "$TKLIBDIR" = default; then
      TKLIBCMD=$TKLIBSTR
   else
      TKLIBCMD="-L "$TKLIBDIR" "$TKLIBSTR
   fi
   AC_SUBST(TKLIBCMD)
fi

if test "$enable_itcl" = yes; then
   if test "$ITCLINCDIR" != default; then
      ITCLINCCMD="-I"$ITCLINCDIR
      AC_SUBST(ITCLINCCMD)
   fi
   if test "$ITCLLIBDIR" = default; then
      ITCLLIBCMD=$ITCLLIBSTR
   else
      ITCLLIBCMD="-L "$ITCLLIBDIR" "$ITCLLIBSTR
   fi
   AC_SUBST(ITCLLIBCMD)
fi

###sysloc.in doesn't define all itk related symbols so this stanza changed
###accordingly
if test "$enable_itk" = yes; then
#   if test "$ITKINCDIR" != default; then
#      ITKINCCMD="-I"$ITKINCDIR
#      AC_SUBST(ITKINCCMD)
#   fi
   if test "$ITKLIBDIR" = default; then
      ITKLIBCMD=$ITKLIBSTR
   else
      ITKLIBCMD="-L "$ITKLIBDIR" "$ITKLIBSTR
   fi
   AC_SUBST(ITKLIBCMD)
fi

### Double vs single precison

if test "$with_double" = yes; then
  AC_DEFINE(PL_DOUBLE)
  DBL_FLAG_M4=-DDOUBLE
  DRIVERS_DB="driversd.db"
  LIB_TAG="d"
else
  DRIVERS_DB="drivers.db"
  LIB_TAG=""
fi
AM_CONDITIONAL(with_double, [test "$with_double" = yes])
AC_SUBST(LIB_TAG)
AC_DEFINE_UNQUOTED(DRIVERS_DB, "$DRIVERS_DB")

### Dynamic driver conditional
AM_CONDITIONAL(enable_dyndrivers, [test "$enable_dyndrivers" = yes])


### C++ binding

MY_ARG_ENABLE(cxx,
  [  --enable-cxx            compile C++ interface code ($enable_cxx)])
AM_CONDITIONAL(enable_cxx, [test "$enable_cxx" = yes])
if test "$enable_cxx" = yes ; then
  AC_PROG_CXX
fi

### Fortran 77 binding

MY_ARG_ENABLE(f77,
  [  --enable-f77            compile Fortran-77 interface code ($enable_f77)])
AM_CONDITIONAL(enable_f77, [test "$enable_f77" = yes])
if test "$enable_f77" = yes ; then
  AC_PROG_F77
  AC_CHECK_PROGS(M4, m4, "no")
  if test "$M4" = no ; then
    AC_MSG_ERROR([m4 preprocessor not found, but required for building
the Fortran bindings])
  fi
  M4_FLAGS="-S2000 -B8192 $DBL_FLAG_M4"
  AC_SUBST(M4_FLAGS)
fi

### Python binding

MY_ARG_ENABLE(python,
  [  --enable-python         compile Python interface code ($enable_python)])
AM_CONDITIONAL(enable_python, [test "$enable_python" = yes])

### tcl binding

MY_ARG_ENABLE(tcl,
  [  --enable-tcl            compile Tcl interface code ($enable_tcl)])
AM_CONDITIONAL(enable_tcl, [test "$enable_tcl" = yes])
AM_CONDITIONAL(enable_itcl, [test "$enable_itcl" = yes])
AM_CONDITIONAL(enable_tk, [test "$enable_tk" = yes])
AM_CONDITIONAL(enable_tkwin, [test "$enable_tkwin" = yes])

MY_ARG_ENABLE(itcl,
  [  --enable-itcl           enable incr Tcl interface code ($enable_itcl)])

MY_ARG_ENABLE(java,
  [  --enable-java           compile Java interface code ($enable_java)])

MY_ARG_ENABLE(octave,
  [  --enable-octave         compile Octave interface code ($enable_octave)])

### Checks for existence of headers

AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h termios.h)
AC_HEADER_SYS_WAIT

### Check for typedefs

# ----------------------------------------------------------------------------
# Some X11 headers require "caddr_t" even on systems that claim POSIX.1
# compliance, which is illegal.  This makes it impossible to compile
# programs that include X11 headers if _POSIX_SOURCE is defined.  I work
# around this potential problem by just defining caddr_t to 'char *' on all
# systems (unless it is set already), whether it will be needed or not.

AC_CHECK_TYPE(caddr_t, char *)

### Check for functions

AC_FUNC_VFORK
AC_CHECK_FUNC(popen, AC_DEFINE(HAVE_POPEN))

### Directory for PLplot specific data files

DATA_DIR=lib/${PACKAGE}${VERSION}/data 
AC_DEFINE_UNQUOTED(DATA_DIR, "$prefix/$DATA_DIR")
AC_SUBST(DATA_DIR)

### Other install locations needed.
if test -z "$LIB_DIR"; then
    LIB_DIR=$prefix/lib
fi
if test -z "$INCLUDE_DIR"; then
    INCLUDE_DIR=$prefix/include/plplot
fi
AC_SUBST(LIB_DIR)
AC_SUBST(INCLUDE_DIR)
### Configuration headers

AM_CONFIG_HEADER(include/plConfig.h include/plDevs.h)

### Modules 

AC_PATH_XTRA
MODULES="xwin"$LIB_TAG"_drv.la ps"$LIB_TAG"_drv.la"
AC_SUBST(MODULES)

### Drivers

AC_MSG_CHECKING( for dynamic drivers)
PL_DRIVERS(PL_DRIVER_LIST)
AC_MSG_RESULT
AC_SUBST(STATIC_DRIVERS)
AC_SUBST(TCL_STATIC_DRIVERS)
AC_SUBST(DYNAMIC_DRIVERS)

# ----------------------------------------------------------------------------
# Now build the dynamic driver database.
# ----------------------------------------------------------------------------

if test "$enable_dyndrivers" = "yes"; then

    AC_MSG_RESULT(creating drivers/$DRIVERS_DB)

    # Dynamic (loadable) drivers go in a subdir all their own.
    if test ! -d drivers; then
	mkdir drivers
    fi

    # Clear out any prior drivers.
    if test -f drivers/$DRIVERS_DB; then
	rm drivers/$DRIVERS_DB
    fi
    touch drivers/$DRIVERS_DB

    # Now add a line for each supported loadable device.  Format is:
    #     device name : description : type : driver name : device number: symbol tag
    #
    # (type=1 if interactive, 0 if file-oriented, -1 for other).
    #
    # Note the device name that appears first in the db line is not
    # necessarily the same as the device name in the DYNAMIC_DEVICES (or
    # DEVICES) list!  Rather, it's the name that appears in the old dispatch
    # table entry (cf. tekt vs tek4010).  Oh well..

    for drv in $DYNAMIC_DEVICES; do
	case $drv in
	    cgm )
	    echo "cgm:CGM file:0:cgm"$LIB_TAG"_drv.so:44:cgm" >> drivers/$DRIVERS_DB
	    ;;
	    conex )
	    echo "conex:Conex vt320/tek emulator:1:tek"$LIB_TAG"_drv.so:24:conex" >> drivers/$DRIVERS_DB
	    ;;
	    dg300 )
	    echo "dg300:DG300 Terminal:0:dg300"$LIB_TAG"_drv.so:25:dg300" >> drivers/$DRIVERS_DB
	    ;;
	    gnome )
	    echo "gnome:Gnome Canvas:1:gnome"$LIB_TAG"_drv.so:6:gnome" >> drivers/$DRIVERS_DB
	    ;;
	    hp7470 )
	    echo "hp7470:HP 7470 Plotter File (HPGL Cartridge, Small Plotter):0:hpgl"$LIB_TAG"_drv.so:34:hp7470" >> drivers/$DRIVERS_DB
	    ;;
	    hp7580 )
	    echo "hp7580:HP 7580 Plotter File (Large Plotter):0:hpgl"$LIB_TAG"_drv.so:35:hp7580" >> drivers/$DRIVERS_DB
	    ;;
	    imp )
	    echo "imp:Impress File:0:impress"$LIB_TAG"_drv.so:37:imp" >> drivers/$DRIVERS_DB
	    ;;
	    jpeg )
	    echo "jpeg:JPEG file:0:gd"$LIB_TAG"_drv.so:40:jpeg" >> drivers/$DRIVERS_DB
	    ;;
	    linuxvga )
	    echo "linuxvga:Linux VGA driver:0:linuxvga"$LIB_TAG"_drv.so:8:vga" >> drivers/$DRIVERS_DB
	    ;;
	    lj_hpgl )
	    echo "lj_hpgl:HP Laserjet III, HPGL emulation mode:0:hpgl"$LIB_TAG"_drv.so:36:lj_hpgl" >> drivers/$DRIVERS_DB
	    ;;
	    ljii )
	    echo "ljii:LaserJet II Bitmap File (150 dpi):0:ljii"$LIB_TAG"_drv.so:33:ljii" >> drivers/$DRIVERS_DB
	    ;;
	    ljiip )
	    echo "ljiip:LaserJet IIp/deskjet compressed graphics:0:ljiip"$LIB_TAG"_drv.so:32:ljiip" >> drivers/$DRIVERS_DB
	    ;;
	    mskermit )
	    echo "mskermit:MS-Kermit emulator:1:tek"$LIB_TAG"_drv.so:21:mskermit" >> drivers/$DRIVERS_DB
	    ;;
	    ntk )
	    echo "ntk:New tk driver:1:ntk"$LIB_TAG"_drv.so:43:ntk" >> drivers/$DRIVERS_DB
	    ;;
	    null )
	    echo "null:Null device:-1:null"$LIB_TAG"_drv.so:42:null" >> drivers/$DRIVERS_DB
	    ;;
	    pbm )
	    echo "pbm:PDB (PPM) Driver:0:pbm"$LIB_TAG"_drv.so:38:pbm" >> drivers/$DRIVERS_DB
	    ;;
	    plmeta )
	    echo "plmeta:PLplot Native Meta-File:0:plmeta"$LIB_TAG"_drv.so:26:plm" >> drivers/$DRIVERS_DB
	    ;;
	    png )
	    echo "png:PNG file:0:gd"$LIB_TAG"_drv.so:39:png" >> drivers/$DRIVERS_DB
	    ;;
	    ps )
	    echo "ps:PostScript File (monochrome):0:ps"$LIB_TAG"_drv.so:29:psm" >> drivers/$DRIVERS_DB
	    ;;
	    psc )
	    echo "psc:PostScript File (color):0:ps"$LIB_TAG"_drv.so:30:psc" >> drivers/$DRIVERS_DB
	    ;;
	    pstex )
	    echo "pstex:Combined Postscript/LaTeX files:0:ps"$LIB_TAG"_drv.so:41:pstex" >> drivers/$DRIVERS_DB
	    ;;
	    tek4107 )
	    echo "tek4107t:Tektronix Terminal (4105/4107):1:tek"$LIB_TAG"_drv.so:20:tek4107t" >> drivers/$DRIVERS_DB
	    ;;
	    tek4107f )
	    echo "tek4107f:Tektronix File (4105/4107):0:tek"$LIB_TAG"_drv.so:28:tek4107f" >> drivers/$DRIVERS_DB
	    ;;
	    tek4010 )
	    echo "tekt:Tektronix Terminal (4010):1:tek"$LIB_TAG"_drv.so:19:tekt" >> drivers/$DRIVERS_DB
	    ;;
	    tek4010f )
	    echo "tekf:Tektronix File (4010):0:tek"$LIB_TAG"_drv.so:27:tekf" >> drivers/$DRIVERS_DB
	    ;;
	    tk )
	    echo "tk:Tcl/TK Window:1:tk"$LIB_TAG"_drv.so:7:tk" >> drivers/$DRIVERS_DB
	    ;;
	    tkwin )
	    echo "tkwin:New tk driver:1:tkwin"$LIB_TAG"_drv.so:45:tkwin" >> drivers/$DRIVERS_DB
	    ;;
	    versaterm )
	    echo "versaterm:Versaterm vt100/tek emulator:1:tek"$LIB_TAG"_drv.so:22:versaterm" >> drivers/$DRIVERS_DB
	    ;;
	    vlt )
	    echo "vlt:VLT vt100/tek emulator:1:tek"$LIB_TAG"_drv.so:23:vlt" >> drivers/$DRIVERS_DB
	    ;;
	    xfig )
	    echo "xfig:Fig file:0:xfig"$LIB_TAG"_drv.so:31:xfig" >> drivers/$DRIVERS_DB
	    ;;
	    xterm )
	    echo "xterm:Xterm Window:1:tek"$LIB_TAG"_drv.so:18:xterm" >> drivers/$DRIVERS_DB
	    ;;
	    xwin )
	    echo "xwin:X-Window (Xlib):1:xwin"$LIB_TAG"_drv.so:5:xw" >> drivers/$DRIVERS_DB
	    ;;
	esac
    done
fi

### Build Makefiles

AC_OUTPUT([
	Makefile 
	src/Makefile 
	include/Makefile
	lib/Makefile
	bindings/Makefile
	bindings/c++/Makefile
	bindings/f77/Makefile
	bindings/python/Makefile
	bindings/tcl/Makefile
	bindings/tk/Makefile
	drivers/Makefile
	examples/Makefile
	examples/c/Makefile
	examples/c/Makefile.examples
	examples/c++/Makefile
	examples/c++/Makefile.examples
	examples/f77/Makefile
	examples/f77/Makefile.examples
	examples/python/Makefile
	examples/python/plplot_python_start.py
	examples/tcl/Makefile
	utils/Makefile
	])

# ----------------------------------------------------------------------------
# Print out some of the more important settings.
#
# In a reversal of previous practice, I print the actual variables in the
# configure log.  This is to remind the user of the difference between the
# command line syntax (which you can always get help on by issuing a --help
# option) and the internal representation.  It's necessary to remember this
# for when you want to set the variable directly via ~/config/cf_plplot.in.
# ----------------------------------------------------------------------------

plplot_config_result_msg="Configure results:

command:	$plplot_config_invocation
system:		$host
prefix:		$prefix
CC:		$CC $CC_FLAGS
LDC:		$LDC $LDC_FLAGS"

if test "$enable_cxx" = "yes"; then
    plplot_config_result_msg=\
"$plplot_config_result_msg
CXX:		$CXX $CXX_FLAGS
LDCXX:		$LDCXX $LDCXX_FLAGS"
fi

if test "$enable_f77" = "yes"; then
    plplot_config_result_msg=\
"$plplot_config_result_msg
F77:		$F77 $F77_FLAGS
LDF:		$LDF $LDF_FLAGS"
fi

plplot_config_result_msg=\
"$plplot_config_result_msg
LIB_TAG:	$LIB_TAG
devices:	$DEVICES

Available device drivers
static:		$STATIC_DRIVERS $TCL_STATIC_DRIVERS
dynamic:	$DYNAMIC_DRIVERS

with_shlib:	$with_shlib		with_double:	$with_double
with_debug:	$with_debug		with_opt:	$with_opt
with_warn:	$with_warn		with_profile:	$with_profile
with_gcc:	$with_gcc		with_rpath:	$with_rpath
with_freetype:	$with_freetype

enable_xwin:	$enable_xwin		enable_tcl:	$enable_tcl
enable_tk:	$enable_tk		enable_itcl:	$enable_itcl
enable_cxx:	$enable_cxx		enable_python:	$enable_python
enable_f77:	$enable_f77		enable_java:	$enable_java
enable_octave:	$enable_octave		enable_gnome:	$enable_gnome
enable_tkwin:	$enable_tkwin
"

cat << EOF > config.summary
$plplot_config_result_msg
EOF

AC_MSG_RESULT($plplot_config_result_msg)
