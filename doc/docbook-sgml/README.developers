		PLPLOT DOCUMENTATION IN THE DOCBOOK FORMAT
		    (Notes for contributors/developers)

	      Author: Rafael Laboissière <rafael@icp.inpg.fr>
		 Created on: Thu May 20 11:14:38 CEST 1999
	      Last modified on: Mon Oct 30 14:13:59 CET 2000
     $Id$



Introduction
============

You will find here the conversion of the old PLplot documentation in
LateXInfo format into the DocBook format.  This is work in progress, being
maintained by Alan W. Irwin (irwin@beluga.phys.uvic.ca) and Rafael Laboissière
(rafael@icp.inpg.fr).

All the relevant files are under the src/ directory.  The file organization
is not very clean and the configure/build system is not yet perfect.
Although, it should be usable now and we are aiming to achieve the goal
"build-ability for anyone".  

This project will be subjected a complete overhaul in the near future.  The
SGML files will be converted to the XML format and we will eventually use
automake as part of the configuration process.  Also, the autoconf process
will be integrated into the top-level PLplot configuration system.



Configuring and building
========================

There is now a autoconf script src/configure.  To configure the package
just do:

    $ cd src
    $ ./configure

If you are a developer, you can make modifications to the src/configure.in
file.  In this case, you will need to run `autoconf' inside the src/
directory in order to get the new src/configure script generated.

The configure script checks for the following programs: jade, jadetex, perl,
latex, dvips, and mogrify.  You should have them installed and present in
the path in order to build the HTML and PostScript versions of the PLplot
manual (see package lists below).  You may also specify the locations of
these programs with the configure options --with-<prog>.  Type `./configure
--help' for details.

The jade program needs to access several DTDs (Document Type Definition).
The availability of the DTDs in the system is checked as well by the
configure script.  If they are not found, it is possible to specify them
with the option `--with-sgml-catalogs=CATALOGS', where `CATALOGS' must be a
colon (:) separated list of files.  These files must exist in the systems
and contain entries mapping DTD public identifiers into system identifiers.

See below for further details on SGML catalogs.



Note on SGML Catalogs
=====================

The jade program, as well as the programs in the sp suite
(http://www.jclark.com/sp), work by loading the definitions of DTDs, which
are files present in the system.  These files are refered in the SGML
jargon as "system identifiers".

The PLplot DocBook SGML sources uses "public identifiers" for declaring the
included DTDs.  Here is the complete list that is currently needed by
the plplot documentation project:

"-//James Clark//DTD DSSSL Style Sheet//EN"
"-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN"
"-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN"
"-//OASIS//DTD DocBook V3.1//EN"

You will find these public identifiers referred to in plplotdoc.sgml,
plplotdoc-print.dsl and plplotdoc-html.dsl:

grep PUBLIC plplotdoc*
plplotdoc-html.dsl:<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL
Style Sheet//EN" [
plplotdoc-html.dsl:  PUBLIC "-//Norman Walsh//DOCUMENT DocBook HTML
Stylesheet//EN"
plplotdoc-print.dsl:<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL
Style Sheet//EN" [
plplotdoc-print.dsl:  PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print
Stylesheet//EN"
plplotdoc.sgml:<!doctype book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [

On Debian GNU/Linux (version Potato) systems, the actual files (system
identifiers) that corresponds to the above 4 public identifiers are
respectively:

/usr/lib/sgml/dtd/style-sheet.dtd
/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/html/docbook.dsl
/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh/print/docbook.dsl
/usr/lib/sgml/dtd/docbook-3.1/docbook.dtd.  

The mapping between the pubid and the sysid is realized through the default
catalog file /usr/lib/sgml/catalog which contains, for example, the following entry:

    PUBLIC "-//OASIS//DTD DocBook V3.1//EN" "dtd/docbook-3.1/docbook.dtd"

Similarly, if you search in /usr/lib/sgml/catalog on Debian potato systems
for the 3 other public identifiers that we need above you will find the
corresponding file entry.

**So the key on any Linux/Unix docbook system is to find the catalog file(s)
with the correct mapping between the required pubid's and the system files.**

On RedHat 6.2 systems (with all packages updated as of 1 November 2000, see
any redhat update mirror for at least 3 updated rpm's corresponding to the
package list below) the actual files that correspond to the above 4 public
identifiers are

/usr/lib/sgml/style-sheet.dtd
/usr/lib/sgml/stylesheets/nwalsh-modular/html/docbook.dsl
/usr/lib/sgml/stylesheets/nwalsh-modular/print/docbook.dsl
/usr/lib/sgml/docbook.dtd

The default catalog file is located at /usr/lib/sgml/CATALOG.  However, that
file is partially broken.  The entries corresponding to the Norman Walsh
style sheets point to the wrong directory [!]. Therefore, to get Redhat 6.2
build systems configured correctly you must execute

./configure --with-sgml-catalogs=/usr/lib/sgml/stylesheets/nwalsh-modular/catalog

On RH 6.2 systems that particular non-default catalog file maps to the
correct Norm Walsh stylesheet directories (and I presume the rest are taken
from the remaining entries [which are correct] in the default
/usr/lib/sgml/CATALOG).  

The current configure script has some stringent tests for checking that the
appropriate catalog entries are found with working maps between the pubid's
and sysid's.  Thus, on other systems if ./configure works without error
messages, you probably have no catalog problems.  if ./configure output
indicates there is a problem finding any of the sysid's corresponding to the
above 4 pubid's, then it will be necessary to find a system catalog that
points to the correct files or to make such a catalog.  If you need help
with this procedure, feel free to consult with either Alan or Rafael.



Package Lists
=============


Here is the list of packages needed for building the PLplot DocBook
documentation:

Debian potato:

    jade
    jadetex
    docbook
    docbook-stylesheests
    tetex
    imagemagick
    
RedHat 6.2 (updated as of 2000 November 1, but later updates should work also):

docbook-3.1-4.noarch.rpm
jade-1.2.1-9.i386.rpm
jadetex-2.7-2.i386.rpm
sgml-common-0.1-8.noarch.rpm
sgml-tools-1.0.9-5.i386.rpm
stylesheets-1.54.13rh-1.noarch.rpm



Finishing the install
=====================

Do the usual

make
make install

Currently the Debian make produces no jade severe warnings (a jade message
with "E"), but the RedHat make produces several of these which (AWI) is
working at removing.  Despite the warning messages on the RedHat system, the
output html (try netscape book1.html) still looks good.  Currently there is
a problem with the redhat system.  The html file suffixes are htm rather
than html so the make install does not work, but this is a minor glitch
that will soon be fixed.

Installing at the live site for www.plplot.org
==============================================

The make install step copies all relevant files from src to html. After
these output results are tested (browsed with a browser, etc.), this whole
directory should be copied to the appropriate sourceforge site.
One way of doing this is

ssh USERNAME@shell1.sourceforge.net 'rm -rf /home/groups/plplot/docbook-manual'
scp -pr html USERNAME@shell1.sourceforge.net:/home/groups/plplot/docbook-manual
ssh USERNAME@shell1.sourceforge.net 
  once logged in, then look at /home/groups/plplot/htdocs-replace.csh for
  any changes, then execute it.

The first of these commands completely removes the docbook-manual tree at
sourceforge.  It is a potentially dangerous command (see below)
which doesn't need to be executed every time, but the occasional cleanup
of docbook-manual should be done with this command.

The second command copies the html tree to the (just removed) sourceforge
docbook-manual tree.  If you haven't cleaned out the docbook-manual tree
with the first command, then this command will overwrite files with the same
name and leave unreferenced additional files that were on site before if
there has been a name change for those files.  (And at first, you can
probably expect plenty of name changes.)

The third command executes a script that takes about 2 seconds to finish at
sourceforge.  (You probably have to be actually logged in to sourceforge for
that script to work since there is interaction with the user.) Currently,
htdocs-replace.csh removes the live website at sourceforge
(/home/groups/plplot/htdocs) and recreates that live website using cvs export
and cp -a of docbook-manual (just updated by the second command) to the
appropriate place within htdocs.

All 3 of these commands could make a huge mess if done incorrectly (i.e.
think of the consequences if you dropped the "docbook-manual" from the first
command!) so be careful out there!  In particular, it is an excellent idea
to look at htdocs-replace.csh before execution since Maurice has plans to
modify it.  Eventually, as we get this system for updating the live site
more finalized, we will probably want to put htdocs-replace.csh (or its
replacement if Maurice wants to rename it) under cvs control.




Prolog (the settings below are for Emacs)
=========================================

Local Variables: 
mode: indented-text
End:
