<chapter id="API">
  <title>The Common API for PLplot</title>
  
  <para>
  The purpose of this chapter is to document the API for every C function in
  PLplot that should have a counterpart in other PLplot language bindings such as
  Fortran.  These common API routines have a special
  <quote>c_</quote> prefix name assigned to them in <filename>plplot.h</filename>.  
  This common API between the various languages constitutes the
  most important part of the PLplot API that programmers need to know.  
  Additional PLplot API specialized for each language binding is documented
  in <xref linkend="API-C"/> and subsequent chapters.
  </para>

  <para>
All common API functions of the current CVS HEAD are listed here with their
arguments.  All functions have at least a short description, 
but there are still a fair number of undocumented
parameters as indicated by the string <quote>NEEDS DOCUMENTATION</quote>.
  </para>

  <sect1 id="pl_setcontlabelparam" renderas="sect3">
    <title><function>pl_setcontlabelparam</function>: Set parameters of
contour labelling other than format of numerical label</title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pl_setcontlabelparam</function>
	</funcdef>
        <paramdef><parameter>offset</parameter></paramdef>
        <paramdef><parameter>size</parameter></paramdef>
        <paramdef><parameter>spacing</parameter></paramdef>
        <paramdef><parameter>active</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
    Set parameters of 
    contour labelling other than those handled by &pl_setcontlabelformat;.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>offset</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	   Offset of label from contour line (if set to 0.0, labels are
	   printed on the lines).  Default value is 0.006.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>size</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Font height for contour labels (normalized).  Default value is 0.3.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>spacing</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Spacing parameter for contour labels.  Default value is 0.1.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>active</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Activate labels.  Set to 1 if you want contour labels on.
	  Default is off (0).
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pl_setcontlabelformat" renderas="sect3">
    <title><function>pl_setcontlabelformat</function>: Set 
format of numerical label for contours</title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pl_setcontlabelparam</function>
	</funcdef>
        <paramdef><parameter>lexp</parameter></paramdef>
        <paramdef><parameter>sigdig</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
     Set format of numerical label for contours.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>lexp</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  If the contour numerical label is greater than 10^(lexp) or less
	  than 10^(-lexp), then the
	  exponential format is used.  Default value of lexp is 4.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sigdig</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Number of significant digits.  Default value is 2.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pladv" renderas="sect3">
    <title><function>pladv</function>: Advance the (sub-)page</title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pladv</function>
	</funcdef>
        <paramdef><parameter>sub</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Advances to the next subpage if
      <literal><parameter>sub</parameter>=0</literal>, performing a page
      advance if there are no remaining subpages on the current page.  If
      subwindowing isn't being used, <literal>&pladv;(0)</literal> will
      always advance the page.  If
      <literal><parameter>sub</parameter>&gt;0</literal>, PLplot switches
      to the specified subpage.  Note that this allows you to overwrite a
      plot on the specified subpage; if this is not what you intended, use
      &pleop; followed by &plbop; to first advance the page.  This routine
      is called automatically (with
      <literal><parameter>sub</parameter>=0</literal>) by &plenv;, but if
      &plenv; is not used, &pladv; must be called after initializing PLplot
      but before defining the viewport.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>sub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the subpage number (starting from 1 in the top left
	    corner and increasing along the rows) to which to advance.  Set
	    to zero to advance to the next subpage.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plaxes" renderas="sect3">
    <title>
      <function>plaxes</function>: Draw a box with axes, etc. with arbitrary
origin
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plaxes</function>
        </funcdef>
        <paramdef><parameter>x0</parameter></paramdef>
        <paramdef><parameter>y0</parameter></paramdef>
        <paramdef><parameter>xopt</parameter></paramdef>
        <paramdef><parameter>xtick</parameter></paramdef>
        <paramdef><parameter>nxsub</parameter></paramdef>
        <paramdef><parameter>yopt</parameter></paramdef>
        <paramdef><parameter>ytick</parameter></paramdef>
        <paramdef><parameter>nysub</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Draws a box around the currently defined viewport with arbitrary
      world-coordinate origin specified by
      <literal><parameter>x0</parameter></literal> and
      <literal><parameter>y0</parameter></literal> 
      and labels it with world coordinate values appropriate to the
      window.  Thus &plaxes; should only be called after defining both
      viewport and window.  The character strings
      <literal><parameter>xopt</parameter></literal> and
      <literal><parameter>yopt</parameter></literal> specify how the box
      should be drawn as described below.  If ticks and/or subticks are to
      be drawn for a particular axis, the tick intervals and number of
      subintervals may be specified explicitly, or they may be defaulted by
      setting the appropriate arguments to zero. </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x0</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            World X coordinate of origin.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y0</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            World Y coordinate of origin.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xopt</parameter> 
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for horizontal
	    axis.  The string can include any combination of the following
	    letters (upper or lower case) in any order:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>a</literal>: Draws axis, X-axis is horizontal
		  line (<literal>y=0</literal>), and Y-axis is vertical
		  line (<literal>x=0</literal>).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>b</literal>: Draws bottom (X) or left (Y) edge
		  of frame.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>c</literal>: Draws top (X) or right (Y) edge of
		  frame.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>f</literal>:  Always use fixed point numeric labels.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>g</literal>: Draws a grid at the major tick
		  interval.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>h</literal>: Draws a grid at the minor tick
		  interval.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>i</literal>: Inverts tick marks, so they are
		  drawn outwards, rather than inwards.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>l</literal>: Labels axis logarithmically.  This
		  only affects the labels, not the data, and so it is
		  necessary to compute the logarithms of data points before
		  passing them to any of the drawing routines.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>m</literal>: Writes numeric labels at major tick
		  intervals in the unconventional location (above box for
		  X, right of box for Y).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>n</literal>: Writes numeric labels at major tick
		  intervals in the conventional location (below box for X,
		  left of box for Y).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>s</literal>: Enables subticks between major
		  ticks, only valid if <literal>t</literal> is also
		  specified.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>t</literal>: Draws major ticks.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xtick</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the x axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nxsub</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major x axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yopt</parameter> 
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for vertical
	    axis.  The string can include any combination of the letters
	    defined above for
	    <literal><parameter>xopt</parameter></literal>, and in addition
	    may contain:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>v</literal>: Write numeric labels for vertical
		  axis parallel to the base of the graph, rather than
		  parallel to the axis.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ytick</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the y axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nysub</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major y axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plbin" renderas="sect3">
    <title>
      <function>plbin</function>: Plot a histogram from binned data
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plbin</function>
        </funcdef> 
        <paramdef><parameter>nbin</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>center</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Plots a histogram consisting of
      <literal><parameter>nbin</parameter></literal> bins.  The value
      associated with the <literal>i</literal>'th bin is placed in
      <literal><parameter>x</parameter>[i]</literal>, and the number of
      points in the bin is placed in
      <literal><parameter>y</parameter>[i]</literal>.  For proper
      operation, the values in
      <literal><parameter>x</parameter>[i]</literal> must form a strictly
      increasing sequence.  If
      <literal><parameter>center</parameter>=0</literal>,
      <literal><parameter>x</parameter>[i]</literal> is the left-hand edge
      of the <literal>i</literal>'th bin, and if
      <literal><parameter>center</parameter>=1</literal>, the bin
      boundaries are placed midway between the values in the
      <literal><parameter>x</parameter></literal> array.  Also see &plhist;
      for drawing histograms from unbinned data.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>nbin</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of bins (i.e., number of values in
	    <literal><parameter>x</parameter></literal> and
	    <literal><parameter>y</parameter></literal> arrays.)
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array containing values associated with bins.  These
	    must form a strictly increasing sequence.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array containing number of points in bin.  This is a
	    <literal>PLFLT</literal> (instead of <literal>PLINT</literal>)
	    array so as to allow histograms of probabilities, etc.
	  </para>
	</listitem>
      </varlistentry> 
      <varlistentry>
	<term>
	  <parameter>center</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Indicates whether the values in
	    <literal><parameter>x</parameter></literal> represent the lower
	    bin boundaries
	    (<literal><parameter>center</parameter>=0</literal>) or whether
	    the bin boundaries are to be midway between the
	    <literal><parameter>x</parameter></literal> values
	    (<literal><parameter>center</parameter>=1</literal>).  If the
	    values in <literal><parameter>x</parameter></literal> are
	    equally spaced and
	    <literal><parameter>center</parameter>=1</literal>, the values
	    in <literal><parameter>x</parameter></literal> are the center
	    values of the bins.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plbop" renderas="sect3">
    <title><function>plbop</function>: Begin a new page</title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plbop</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>
    <para>
      Begins a new page.  For a file driver, the output file is opened if
      necessary.  Advancing the page via &pleop; and &plbop; is useful when
      a page break is desired at a particular point when plotting to
      subpages.  Another use for &pleop; and &plbop; is when plotting pages
      to different files, since you can manually set the file name (or file
      handle) by calling &plsfnam; or &plsfile; after the call to &pleop;
      (in fact some drivers may only support a single page per file, making
      this a necessity).  One way to handle this case automatically is to
      page advance via &pladv;, but enable familying (see &plsfam;) with a
      small byte per file limit so that a new family member file will be
      created on each page break.
    </para>

  </sect1>

  <sect1 id="plbox" renderas="sect3">
    <title><function>plbox</function>: Draw a box with axes, etc</title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plbox</function>
	</funcdef>
        <paramdef><parameter>xopt</parameter></paramdef>
        <paramdef><parameter>xtick</parameter></paramdef>
        <paramdef><parameter>nxsub</parameter></paramdef>
        <paramdef><parameter>yopt</parameter></paramdef>
        <paramdef><parameter>ytick</parameter></paramdef>
        <paramdef><parameter>nysub</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a box around the currently defined viewport, and labels it with
      world coordinate values appropriate to the window.  Thus &plbox;
      should only be called after defining both viewport and window.  The
      character strings <literal><parameter>xopt</parameter></literal> and
      <literal><parameter>yopt</parameter></literal> specify how the box
      should be drawn as described below.  If ticks and/or subticks are to
      be drawn for a particular axis, the tick intervals and number of
      subintervals may be specified explicitly, or they may be defaulted by
      setting the appropriate arguments to zero.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xopt</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for horizontal
	    axis.  The string can include any combination of the following
	    letters (upper or lower case) in any order:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>a</literal>: Draws axis, X-axis is horizontal
		  line (<literal>y=0</literal>), and Y-axis is vertical
		  line (<literal>x=0</literal>).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>b</literal>: Draws bottom (X) or left (Y) edge
		  of frame.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>c</literal>: Draws top (X) or right (Y) edge of
		  frame.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>f</literal>:  Always use fixed point numeric labels.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>g</literal>: Draws a grid at the major tick
		  interval.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>h</literal>: Draws a grid at the minor tick
		  interval.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>i</literal>: Inverts tick marks, so they are
		  drawn outwards, rather than inwards.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>l</literal>: Labels axis logarithmically.  This
		  only affects the labels, not the data, and so it is
		  necessary to compute the logarithms of data points before
		  passing them to any of the drawing routines.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>m</literal>: Writes numeric labels at major tick
		  intervals in the unconventional location (above box for
		  X, right of box for Y).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>n</literal>: Writes numeric labels at major tick
		  intervals in the conventional location (below box for X,
		  left of box for Y).
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>s</literal>: Enables subticks between major
		  ticks, only valid if <literal>t</literal> is also
		  specified.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>t</literal>: Draws major ticks.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xtick</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the x axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nxsub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major x axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yopt</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for vertical
	    axis.  The string can include any combination of the letters
	    defined above for
	    <literal><parameter>xopt</parameter></literal>, and in addition
	    may contain:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>v</literal>: Write numeric labels for vertical
		  axis parallel to the base of the graph, rather than
		  parallel to the axis.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ytick</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the y axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nysub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major y axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plbox3" renderas="sect3">
    <title>
      <function>plbox3</function>: Draw a box with axes, etc, in 3-d
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plbox3</function>
	</funcdef>
        <paramdef><parameter>xopt</parameter></paramdef>
        <paramdef><parameter>xlabel</parameter></paramdef>
        <paramdef><parameter>xtick</parameter></paramdef>
        <paramdef><parameter>nxsub</parameter></paramdef>
        <paramdef><parameter>yopt</parameter></paramdef>
        <paramdef><parameter>ylabel</parameter></paramdef>
        <paramdef><parameter>ytick</parameter></paramdef>
        <paramdef><parameter>nysub</parameter></paramdef>
        <paramdef><parameter>zopt</parameter></paramdef>
        <paramdef><parameter>zlabel</parameter></paramdef>
        <paramdef><parameter>ztick</parameter></paramdef>
        <paramdef><parameter>nzsub</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>
    <para>
      Draws axes, numeric and text labels for a three-dimensional surface
      plot.  For a more complete description of three-dimensional plotting
      see <xref linkend="tri-d-plots"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xopt</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for the x axis.
	    The string can include any combination of the following letters
	    (upper or lower case) in any order:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>b</literal>: Draws axis at base, at height
		  <literal>z=<parameter>zmin</parameter></literal> where
		  <literal><parameter>zmin</parameter></literal> is defined
		  by call to &plw3d;.  This character must be specified in
		  order to use any of the other options.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>f</literal>: Always use fixed point numeric labels.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>i</literal>: Inverts tick marks, so they are
		  drawn downwards, rather than upwards.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>l</literal>: Labels axis logarithmically.  This
		  only affects the labels, not the data, and so it is
		  necessary to compute the logarithms of data points before
		  passing them to any of the drawing routines.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>n</literal>: Writes numeric labels at major tick
		  intervals.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>s</literal>: Enables subticks between major
		  ticks, only valid if <literal>t</literal> is also
		  specified.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>t</literal>: Draws major ticks.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>u</literal>: If this is specified, the text
		  label for the axis is written under the axis.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xlabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying text label for the x
	    axis.  It is only drawn if <literal>u</literal> is in the
	    <literal><parameter>xopt</parameter></literal> string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xtick</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the x axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nxsub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major x axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yopt</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for the y axis.
	    The string is interpreted in the same way as
	    <literal><parameter>xopt</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ylabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying text label for the y
	    axis.  It is only drawn if <literal>u</literal> is in the
	    <literal><parameter>yopt</parameter></literal> string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ytick</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the y axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nysub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major y axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>zopt</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying options for the z axis.
	    The string can include any combination of the following letters
	    (upper or lower case) in any order:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>b</literal>: Draws z axis to the left of the
		  surface plot.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>c</literal>: Draws z axis to the right of the
		  surface plot.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>d</literal>: Draws grid lines parallel to the
		  x-y plane behind the figure.  These lines are not drawn
		  until after &plot3d; or &plmesh; are called because of
		  the need for hidden line removal.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>f</literal>: Always use fixed point numeric labels.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>i</literal>: Inverts tick marks, so they are
		  drawn away from the center.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>l</literal>: Labels axis logarithmically.  This
		  only affects the labels, not the data, and so it is
		  necessary to compute the logarithms of data points before
		  passing them to any of the drawing routines.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>m</literal>: Writes numeric labels at major tick
		  intervals on the right-hand vertical axis.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>n</literal>: Writes numeric labels at major tick
		  intervals on the left-hand vertical axis.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>s</literal>: Enables subticks between major
		  ticks, only valid if <literal>t</literal> is also
		  specified.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>t</literal>: Draws major ticks.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>u</literal>: If this is specified, the text
		  label is written beside the left-hand axis.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>v</literal>: If this is specified, the text
		  label is written beside the right-hand axis.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>zlabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to character string specifying text label for the z
	    axis.  It is only drawn if <literal>u</literal> or
	    <literal>v</literal> are in the
	    <literal><parameter>zopt</parameter></literal> string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ztick</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    World coordinate interval between major ticks on the z axis.
	    If it is set to zero, PLplot automatically generates a suitable
	    tick interval.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nzsub</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subintervals between major z axis ticks for minor
	    ticks.  If it is set to zero, PLplot automatically generates a
	    suitable minor tick interval.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>
  
  <sect1 id="plclr" renderas="sect3">
    <title>
      <function>plclr</function>: Eject current page
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plclr</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Deprecated.  Use the new name, &pleop;, for this function instead.
    </para>

  </sect1>

  <sect1 id="plcol" renderas="sect3">
    <title>
      <function>plcol</function>: Set color
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcol</function>
	</funcdef>
        <paramdef><parameter>color</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Deprecated.  Use the new name, &plcol0;, for this function instead.
    </para>

  </sect1>

  <sect1 id="plcol0" renderas="sect3">
    <title>
      <function>plcol0</function>: Set color, map0
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcol0</function>
	</funcdef>
        <paramdef><parameter>color</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the color for color map0 (see <xref linkend="color-map-0"/>).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>color</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Integer representing the color.  The defaults at present are
	    (these may change):
	    <simplelist type="vert" columns="2">
	      <member> 0 </member>
	      <member> 1 </member>
	      <member> 2 </member>
	      <member> 3 </member>
	      <member> 4 </member>
	      <member> 5 </member>
	      <member> 6 </member>
	      <member> 7 </member>
	      <member> 8 </member>
	      <member> 9 </member>
	      <member>10 </member>
	      <member>11 </member>
	      <member>12 </member>
	      <member>13 </member>
	      <member>14 </member>
	      <member>15 </member>
	      <member>black (default background)</member>
	      <member>red (default foreground)</member>
	      <member>yellow</member>
	      <member>green</member>
	      <member>aquamarine</member>
	      <member>pink</member>
	      <member>wheat</member>
	      <member>grey</member>
	      <member>brown</member>
	      <member>blue</member>
	      <member>BlueViolet</member>
	      <member>cyan</member>
	      <member>turquoise</member>
	      <member>magenta</member>
	      <member>salmon</member>
	      <member>white</member>
	    </simplelist>
	    Use &plscmap0; to change the entire map0 color palette and
	    &plscol0; to change an individual color in the map0 color 
	    palette.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plcol1" renderas="sect3">
    <title>
      <function>plcol1</function>: Set color, map1
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plcol1</function>
        </funcdef>
        <paramdef><parameter>col1</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Sets the color for color map1 (see <xref
      linkend="color-map-1"/>).  </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>col1</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            This value must be in the range from 0. to 1. and is mapped to
	    color using the continuous map1 color palette which by default 
	    ranges from blue to the background color to red.  The map1 
	    palette can also be straightforwardly changed by the user with
	    &plscmap1; or &plscmap1l;.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plcont" renderas="sect3">
    <title>
      <function>plcont</function>: Contour plot
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcont</function>
	</funcdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>kx</parameter></paramdef>
        <paramdef><parameter>lx</parameter></paramdef>
        <paramdef><parameter>ky</parameter></paramdef>
        <paramdef><parameter>ly</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
        <paramdef><parameter>pltr</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a contour plot of the data in
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      using the <literal><parameter>nlevel</parameter></literal> contour
      levels specified by <literal><parameter>clevel</parameter></literal>.
      Only the region of the array from
      <literal><parameter>kx</parameter></literal> to
      <literal><parameter>lx</parameter></literal> and from
      <literal><parameter>ky</parameter></literal> to
      <literal><parameter>ly</parameter></literal> is plotted out.  A
      transformation routine pointed to by <literal><parameter>pltr</parameter></literal>
      with a pointer <literal><parameter>pltr_data</parameter></literal>
      for additional data required by the transformation routine
      is used to map indices within the array
      to the world coordinates.  See the following discussion of the
      arguments and <xref linkend="contour-plots"/> for
      more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array containing data to
	    be contoured.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of array
	    <literal><parameter>z</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>kx, lx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>x</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ky, ly</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>y</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>clevel</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array specifying levels at which to draw contours.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nlevel</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of contour levels to draw.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr</parameter> 
	  (<literal>void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)
           </literal>, input) 
	</term>
	<listitem>
	  <para>
	    Pointer to function that defines transformation between indices
	    in array <literal><parameter>z</parameter></literal> and the
	    world coordinates (C only).  Transformation functions are
	    provided in the PLplot library: 
	    &pltr0; for identity mapping, and &pltr1; and &pltr2; for
	    arbitrary mappings respectively defined by one- and 
	    two-dimensional arrays.  In addition, user-supplied routines
	    for the transformation can be used as well.  Examples of
	    all of these approaches are given in 
	    <xref linkend="contour-plots-c"/>.
	    The transformation function should
	    have the form given by any of &pltr0;, &pltr1;, or &pltr2;.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, output)
	</term>
	<listitem>
	  <para>
	    Extra parameter to help
	    pass information to &pltr0;, &pltr1;, &pltr2;, or whatever routine
	    that is externally supplied.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plcpstrm" renderas="sect3">
    <title>
      <function>plcpstrm</function>: Copy state parameters from the
reference stream to the current stream
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plcpstrm</function>
        </funcdef>
        <paramdef><parameter>iplsr</parameter></paramdef>
        <paramdef><parameter>flags</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Copies state parameters from the reference stream to the current stream.
      Tell driver interface to map device coordinates unless
<literal><parameter>flags</parameter> == 1</literal>.
    </para> 

    <para>
      This function is used for making save files of selected plots (e.g.
      from the TK driver).  After initializing, you can get a copy of the
      current plot to the specified device by switching to this stream and
      issuing a &plcpstrm; and a &plreplot;, with calls to &plbop; and
      &pleop; as appropriate.  The plot buffer must have previously been
      enabled (done automatically by some display drivers, such as X).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>iplsr</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>flags</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plend" renderas="sect3">
    <title>
      <function>plend</function>: End plotting session
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plend</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Ends a plotting session, tidies up all the output files, switches
      interactive devices back into text mode and frees up any memory that
      was allocated.  Must be called before end of program.
    </para>

  </sect1>

  <sect1 id="plend1" renderas="sect3">
    <title>
      <function>plend1</function>: End plotting session for 1 stream
    </title>
    
    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plend1</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Ends a plotting session for the current output stream only.  See
      &plsstrm; for more info.
    </para>

  </sect1>

  <sect1 id="plenv" renderas="sect3">
    <title>
      <function>plenv</function>: Set up standard window and draw box
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plenv</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>just</parameter></paramdef>
        <paramdef><parameter>axis</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets up plotter environment for simple graphs by calling &pladv; and
      setting up viewport and window to sensible default values.  &plenv;
      leaves enough room around most graphs for axis labels and a title.
      When these defaults are not suitable, use the individual routines
      &plvpas;, &plvpor;, or &plvasp; for setting up the viewport, &plwind;
      for defining the window, and &plbox; for drawing the box.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Value of x at left-hand edge of window.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Value of x at right-hand edge of window.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Value of y at bottom edge of window.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Value of y at top edge of window.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>just</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    If <literal><parameter>just</parameter>=0</literal>, the x and
	    y axes are scaled independently to use as much of the screen as
	    possible, but if
	    <literal><parameter>just</parameter>=1</literal>, the scales of
	    the x and y axes are made equal.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>axis</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Controls drawing of the box around the plot:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>-2</literal>: No box or annotation.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>-1</literal>: Draw box only.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>0</literal>: Draw box, labeled with coordinate
		  values around edge.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>1</literal>: In addition to box and labels, draw
		  the two axes <literal>x=0</literal> and
		  <literal>y=0</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>2</literal>: As for <literal>axis=1</literal>,
		  but also draw a grid at the major tick interval.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>10</literal>: Logarithmic x axis, linear y axis.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>11</literal>: Logarithmic x axis, linear y axis
		  and draw line <literal>y=0</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>20</literal>: Linear x axis, logarithmic y axis.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>21</literal>: Linear x axis, logarithmic y axis
		  and draw line <literal>x=0</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>30</literal>: Logarithmic x and y axes.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pleop" renderas="sect3">
    <title>
      <function>pleop</function>: Eject current page
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pleop</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Clears the graphics screen of an interactive device, or ejects a page
      on a plotter.  See &plbop; for more information.
    </para>

  </sect1>

  <sect1 id="plerrx" renderas="sect3">
    <title>
      <function>plerrx</function>: Draw x error bar
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plerrx</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a set of <literal><parameter>n</parameter></literal> 
      horizontal error bars, the
<literal>i</literal>'th error
bar extending from <literal><parameter>xmin</parameter>[i]</literal> 
to <literal><parameter>xmax</parameter>[i]</literal> at y coordinate
<literal><parameter>y</parameter>[i]</literal>.  The terminals of the error bar are of length equal to the
minor tick length (settable using &plsmin;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of error bars to draw.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of
left-hand endpoint of error bars.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of
right-hand endpoint of error bars.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinates of
error bar.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plerry" renderas="sect3">
    <title>
      <function>plerry</function>: Draw y error bar
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plerry</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a set of <literal><parameter>n</parameter></literal> vertical
      error bars, the <literal>i</literal>'th error bar extending from
      <literal><parameter>ymin</parameter>[i]</literal> to
      <literal><parameter>ymax</parameter>[i]</literal> at x coordinate
      <literal><parameter>x</parameter>[i]</literal>.  The terminals of the
      error bar are of length equal to the minor tick length (settable
      using &plsmin;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of error bars to draw.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of error bars.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinates of lower endpoint of error
	    bars.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinate of upper endpoint of error
	    bar.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plfamadv" renderas="sect3">
    <title>
      <function>plfamadv</function>: Advance to the next family file on the
next new page
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plfamadv</function>
        </funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Advance to the next family file on the next new page.
    </para>

  </sect1>

  <sect1 id="plfill" renderas="sect3">
    <title>
      <function>plfill</function>: Area fill
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plfill</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Fills the polygon defined by the
      <literal><parameter>n</parameter></literal> points
      <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[i])</literal> using the pattern defined by
      &plpsty; or &plpat;.  The routine will automatically close the
      polygon between the last and first vertices.  If multiple closed
      polygons are passed in <literal><parameter>x</parameter></literal>
      and <literal><parameter>y</parameter></literal> then &plfill; will
      fill in between them.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of vertices in polygon.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of vertices.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinates of vertices.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plfill3" renderas="sect3">
    <title>
      <function>plfill3</function>: Area fill in 3D
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plfill3</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Fills the 3D polygon defined by the
      <literal><parameter>n</parameter></literal> points
      <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[i]),<parameter>z</parameter>[i])</literal> 
      using the pattern defined by
      &plpsty; or &plpat;.  The routine will automatically close the
      polygon between the last and first vertices.  If multiple closed
      polygons are passed in <literal><parameter>x</parameter></literal>,
      <literal><parameter>y</parameter></literal>,
      and <literal><parameter>z</parameter></literal> then &plfill3; will
      fill in between them.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of vertices in polygon.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of vertices.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinates of vertices.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with z coordinates of vertices.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plflush" renderas="sect3">
    <title>
      <function>plflush</function>: Flushes the output stream
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plflush</function>
        </funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Flushes the output stream. Use sparingly, if at all.
    </para>

  </sect1>

  <sect1 id="plfont" renderas="sect3">
    <title>
      <function>plfont</function>: Set character font
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plfont</function>
	</funcdef>
        <paramdef><parameter>font</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the default character font for subsequent character drawing.
      Also affects symbols produced by &plpoin;.  This routine has no
      effect unless the extended character set is loaded (see &plfontld;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>font</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the font:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>1</literal>: Normal font (simplest and fastest)
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>2</literal>: Roman font
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>3</literal>: Italic font
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>4</literal>: Script font
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plfontld" renderas="sect3">
    <title>
      <function>plfontld</function>: Load character font
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plfontld</function>
	</funcdef>
        <paramdef><parameter>set</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>
    
    <para>
      Sets the character set to use for subsequent character drawing.  May
      be called before calling initializing PLplot.
    </para>
    
    <variablelist>
      <varlistentry>
	<term>
	  <parameter>set</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the character set to load:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>0</literal>: Standard character set
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>1</literal>: Extended character set
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgchr" renderas="sect3">
    <title>
      <function>plgchr</function>: Get character default height and current
(scaled) height
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgchr</function>
        </funcdef>
        <paramdef><parameter>p_def</parameter></paramdef>
        <paramdef><parameter>p_ht</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Get character default height and current (scaled) height.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_def</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_ht</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgcol0" renderas="sect3">
    <title>
      <function>plgcol0</function>: Returns 8-bit RGB values for given color
from color map0
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgcol0</function>
        </funcdef>
        <paramdef><parameter>icol0</parameter></paramdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Returns 8-bit RGB values for given color from color map0 (see 
      <xref linkend="color-map-0"/>).  Values are
      negative if an invalid color id is given.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>icol0</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgcolbg" renderas="sect3">
    <title>
      <function>plgcolbg</function>:  Returns the background color
(cmap0[0]) by 8-bit RGB value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgcolbg</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
       Returns the background color (cmap0[0]) by 8-bit RGB value.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            Pointer to an unsigned 8-bit integer (0-255) representing 
	    the degree of red in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            Pointer to an unsigned 8-bit integer (0-255) representing 
	    the degree of green in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            Pointer to an unsigned 8-bit integer (0-255) representing 
	    the degree of blue in the color.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgcompression" renderas="sect3">
    <title>
      <function>plgcompression</function>: Get the current 
      device-compression setting
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgcompression</function>
	</funcdef>
        <paramdef><parameter>compression</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Get the current device-compression setting.  This parameter is
      only used for drivers that provide compression.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>compression</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
           Pointer to a variable to be filled with the current 
	   device-compression setting.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgdev" renderas="sect3">
    <title>
      <function>plgdev</function>: Get the current device (keyword) name
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgdev</function>
        </funcdef>
        <paramdef><parameter>p_dev</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Get the current device (keyword) name.  Note: you MUST have allocated
space for this (80 characters is safe).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_dev</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgdidev" renderas="sect3">
    <title>
      <function>plgdidev</function>: Retrieve current window into device space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgdidev</function>
        </funcdef>
        <paramdef><parameter>p_mar</parameter></paramdef>
        <paramdef><parameter>p_aspect</parameter></paramdef>
        <paramdef><parameter>p_jx</parameter></paramdef>
        <paramdef><parameter>p_jy</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Retrieve current window into device space.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_mar</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_aspect</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_jx</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_jy</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgdiori" renderas="sect3">
    <title>
      <function>plgdiori</function>: Get plot orientation
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgdiori</function>
        </funcdef>
        <paramdef><parameter>p_rot</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Get plot orientation.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_rot</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgdiplt" renderas="sect3">
    <title>
      <function>plgdiplt</function>: Retrieve current window into plot space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgdiplt</function>
        </funcdef>
        <paramdef><parameter>p_xmin</parameter></paramdef>
        <paramdef><parameter>p_ymin</parameter></paramdef>
        <paramdef><parameter>p_xmax</parameter></paramdef>
        <paramdef><parameter>p_ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Retrieve current window into plot space.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_xmin</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_ymin</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_xmax</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p_ymax</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgfam" renderas="sect3">
    <title>
      <function>plgfam</function>: Get family file parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgfam</function>
	</funcdef>
        <paramdef><parameter>fam</parameter></paramdef>
        <paramdef><parameter>num</parameter></paramdef>
        <paramdef><parameter>bmax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets information about current family file, if familying is
      enabled.  See <xref linkend="familying"/> for more information.
    </para>
    
    <variablelist>
      <varlistentry>
	<term>
	  <parameter>fam</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with the Boolean family flag value.  If
	    nonzero, familying is enabled.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>num</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with the current family file number.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>bmax</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with the maximum file size (in bytes) for a
	    family file.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgfnam" renderas="sect3">
    <title>
      <function>plgfnam</function>: Get output file name
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgfnam</function>
	</funcdef>
        <paramdef><parameter>fnam</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets the current output file name, if applicable. 
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>fnam</parameter>
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to file name string.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plglevel" renderas="sect3">
    <title>
      <function>plglevel</function>: Get the (current) run level
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plglevel</function>
        </funcdef>
        <paramdef><parameter>p_level</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Get the (current) run level. Valid settings are:
    <itemizedlist>
    <listitem>
    <para>
    0,  uninitialized
    </para>
    </listitem>
    <listitem>
    <para>
    1,  initialized
    </para>
    </listitem>
    <listitem>
    <para>
    2,  viewport defined
    </para>
    </listitem> 
    <listitem>
    <para>
    3,  world coords defined
    </para>
    </listitem> 
    </itemizedlist>
	     
</para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_level</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgpage" renderas="sect3">
    <title>
      <function>plgpage</function>: Get page parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgpage</function>
	</funcdef>
        <paramdef><parameter>xp</parameter></paramdef>
        <paramdef><parameter>yp</parameter></paramdef>
        <paramdef><parameter>xleng</parameter></paramdef>
        <paramdef><parameter>yleng</parameter></paramdef>
        <paramdef><parameter>xoff</parameter></paramdef>
        <paramdef><parameter>yoff</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets the current page configuration. 
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xp</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to number of pixels in x.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yp</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to number of pixels in y.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xleng</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to x page length value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yleng</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to y page length value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xoff</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to x page offset.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yoff</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to y page offset.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgra" renderas="sect3">
    <title>
      <function>plgra</function>: Switch to graphics screen
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgra</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets an interactive device to graphics mode, used in conjunction with
      &pltext; to allow graphics and text to be interspersed.  On a device
      which supports separate text and graphics windows, this command
      causes control to be switched to the graphics window.  If already in
      graphics mode, this command is ignored.  It is also ignored on
      devices which only support a single window or use a different method
      for shifting focus.  See also &pltext;.
    </para>
    
  </sect1>
  
  <sect1 id="plgspa" renderas="sect3">
    <title>
      <function>plgspa</function>: Get current subpage parameters
    </title>
    
    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgspa</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets the size of the current subpage in millimeters measured from the
      bottom left hand corner of the output device page or screen.  Can be
      used in conjunction with &plsvpa; for setting the size of a viewport
      in absolute coordinates (millimeters).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with position of left hand edge of subpage
	    in millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with position of right hand edge of subpage
	    in millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with position of bottom edge of subpage in
	    millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with position of top edge of subpage in
	    millimeters.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgstrm" renderas="sect3">
    <title>
      <function>plgstrm</function>: Get current stream number
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgstrm</function>
	</funcdef>
        <paramdef><parameter>strm</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets the number of the current output stream. See also &plsstrm;.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>strm</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to current stream value.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgver" renderas="sect3">
    <title>
      <function>plgver</function>: Get the current library version number
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plgver</function>
        </funcdef>
        <paramdef><parameter>p_ver</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Get the current library version number.  Note: you <emphasis>must</emphasis>
      have allocated space for this (80 characters is safe).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_ver</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgxax" renderas="sect3">
    <title>
      <function>plgxax</function>: Get x axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgxax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Returns current values of the
      <literal><parameter>digmax</parameter></literal> and
      <literal><parameter>digits</parameter></literal> flags for the x
      axis.  <literal><parameter>digits</parameter></literal> is updated
      after the plot is drawn, so this routine should only be called
      <emphasis>after</emphasis> the call to &plbox; (or &plbox3;) is
      complete.  See <xref linkend="annotation"/> for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>digmax</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with the maximum number of digits.  If
	    nonzero, the printed label will be switched to a floating point
	    representation when the number of digits exceeds
	    <literal><parameter>digmax</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>digits</parameter>
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to variable with the actual number of digits for the
	    numeric labels (x axis) from the last plot.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgyax" renderas="sect3">
    <title>
      <function>plgyax</function>: Get y axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgyax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Identical to &plgxax;, except that arguments are flags for y axis.
      See the description of &plgxax; for more detail.
    </para>

  </sect1>

  <sect1 id="plgzax" renderas="sect3">
    <title>
      <function>plgzax</function>: Get z axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgzax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Identical to &plgxax;, except that arguments are flags for z axis.
      See the description of &plgxax; for more detail.
    </para>

  </sect1>

  <sect1 id="plhist" renderas="sect3">
    <title>
      <function>plhist</function>: Plot a histogram from unbinned data
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plhist</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>data</parameter></paramdef>
        <paramdef><parameter>datmin</parameter></paramdef>
        <paramdef><parameter>datmax</parameter></paramdef>
        <paramdef><parameter>nbin</parameter></paramdef>
        <paramdef><parameter>oldwin</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Plots a histogram from <literal><parameter>n</parameter></literal>
      data points stored in the array
      <literal><parameter>data</parameter></literal>.  This routine bins
      the data into <literal><parameter>nbin</parameter></literal> bins
      equally spaced between
      <literal><parameter>datmin</parameter></literal> and
      <literal><parameter>datmax</parameter></literal>, and calls &plbin;
      to draw the resulting histogram.  Parameter
      <literal><parameter>oldwin</parameter></literal> allows the histogram
      either to be plotted in an existing window or causes &plhist; to call
      &plenv; with suitable limits before plotting the histogram.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of data points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>data</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with values of the
	    <literal><parameter>n</parameter></literal> data points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>datmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Left-hand edge of lowest-valued bin.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>datmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Right-hand edge of highest-valued bin.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nbin</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of (equal-sized) bins into which to divide the interval
	    <literal><parameter>xmin</parameter></literal> to
	    <literal><parameter>xmax</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>oldwin</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    If one, the histogram is plotted in the currently-defined
	    window, and if zero, &plenv; is called automatically before
	    plotting.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plhls" renderas="sect3">
    <title>
      <function>plhls</function>: Set current color by HLS
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plhls</function>
        </funcdef>
        <paramdef><parameter>h</parameter></paramdef>
        <paramdef><parameter>l</parameter></paramdef>
        <paramdef><parameter>s</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set current color by hue, lightness, and saturation.
      Convert hls color coordinates to rgb, then call plrgb.
      Do <emphasis>not</emphasis> use this.  Only retained for backward compatibility
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>h</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>l</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>s</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plinit" renderas="sect3">
    <title>
      <function>plinit</function>: Initialize PLplot
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plinit</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Initializing the plotting package.  The program prompts for the
      device keyword or number of the desired output device.  Hitting a
      RETURN in response to the prompt is the same as selecting the first
      device.  &plinit; will issue no prompt if either the device was
      specified previously (via command line flag or the
      &plsdev; function), or if only one device is
      enabled when PLplot is installed.  If subpages have been specified,
      the output device is divided into <literal>nx</literal> by
      <literal>ny</literal> sub-pages, each of which may be used
      independently.  If &plinit; is called again during a program, the
      previously opened file will be closed.  The subroutine &pladv; is
      used to advance from one subpage to the next.
    </para>

  </sect1>

  <sect1 id="pljoin" renderas="sect3">
    <title>
      <function>pljoin</function>: Draw a line between two points
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pljoin</function>
	</funcdef>
        <paramdef><parameter>x1</parameter></paramdef>
        <paramdef><parameter>y1</parameter></paramdef>
        <paramdef><parameter>x2</parameter></paramdef>
        <paramdef><parameter>y2</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Joins the point <literal>(<parameter>x1</parameter>,
      <parameter>y1</parameter>)</literal> to
      <literal>(<parameter>x2</parameter>,
      <parameter>y2</parameter>)</literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x1</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    x coordinate of first point.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y1</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    y coordinate of first point.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x2</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    x coordinate of second point.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y2</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    y coordinate of second point.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pllab" renderas="sect3">
    <title>
      <function>pllab</function>: Simple routine to write labels
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pllab</function>
	</funcdef>
        <paramdef><parameter>xlabel</parameter></paramdef>
        <paramdef><parameter>ylabel</parameter></paramdef>
        <paramdef><parameter>tlabel</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Routine for writing simple labels. Use &plmtex; for more complex
      labels.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xlabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Label for horizontal axis.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ylabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Label for vertical axis.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>tlabel</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Title of graph.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pllightsource" renderas="sect3">
    <title>
      <function>pllightsource</function>: Sets the 3D position of the light
source
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>pllightsource</function>
        </funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
    Sets the 3D position of the light source.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plline" renderas="sect3">
    <title>
      <function>plline</function>: Draw lines between a number of points
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plline</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws <literal><parameter>n</parameter>-1</literal> line segments
      joining points <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[i])</literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of points to join.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with x coordinates of points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with y coordinates of points.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plline3" renderas="sect3">
    <title>
      <function>plline3</function>: Draw a line in 3 space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plline3</function>
        </funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Draws a line in 3 space.  You must first set up the viewport, the
      2d viewing window (in world coordinates), and the 3d normalized
      coordinate box.  See <filename>x18c.c</filename> for more info.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pllsty" renderas="sect3">
    <title>
      <function>pllsty</function>: Select line style
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pllsty</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets the line style according to one of eight predefined
      patterns (also see &plstyl;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Integer value between 1 and 8.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plmesh" renderas="sect3">
    <title>
      <function>plmesh</function>: Plot surface mesh 
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plmesh</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>opt</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Plots a surface mesh within the environment set up by &plw3d;.  The
      surface is defined by the two-dimensional array
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      the point <literal><parameter>z</parameter>[i][j]</literal> being the
      value of the function at <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[j])</literal>.  Note that the points in
      arrays <literal><parameter>x</parameter></literal> and
      <literal><parameter>y</parameter></literal> do not need to be equally
      spaced, but must be stored in ascending order.  The parameter
      <literal><parameter>opt</parameter></literal> controls the way in
      which the surface is displayed.  For further details see <xref
      linkend="tri-d-plots"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of x coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of y coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array with set of
	    function values.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>x</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>y</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>opt</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Determines the way in which the surface is represented:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=1</literal>: Lines
		  are drawn showing
		  <literal><parameter>z</parameter></literal> as a function
		  of <literal><parameter>x</parameter></literal> for each
		  value of <literal><parameter>y</parameter>[j]</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=2</literal>: Lines
		  are drawn showing
		  <literal><parameter>z</parameter></literal> as a function
		  of <literal><parameter>y</parameter></literal> for each
		  value of <literal><parameter>x</parameter>[i]</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=3</literal>: Network
		  of lines is drawn connecting points at which function is
		  defined.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    
  </sect1>

  <sect1 id="plmkstrm" renderas="sect3">
    <title>
      <function>plmkstrm</function>: Creates a new stream and makes it the
default
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plmkstrm</function>
        </funcdef>
        <paramdef><parameter>p_strm</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Creates a new stream and makes it the default.  Differs from using
      &plsstrm;, in that a free stream number is found, and returned.
      Unfortunately, I <emphasis>have</emphasis> to start at stream 1 and work upward, since
      stream 0 is preallocated.  One of the <emphasis>big</emphasis> flaws in the PLplot API is
      that no initial, library-opening call is required.  So stream 0 must
      be preallocated, and there is no simple way of determining whether it
      is already in use or not.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>p_strm</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plmtex" renderas="sect3">
    <title>
      <function>plmtex</function>: Write text relative to viewport boundaries
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plmtex</function>
	</funcdef>
        <paramdef><parameter>side</parameter></paramdef>
        <paramdef><parameter>disp</parameter></paramdef>
        <paramdef><parameter>pos</parameter></paramdef>
        <paramdef><parameter>just</parameter></paramdef>
        <paramdef><parameter>text</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Writes text at a specified position relative to the viewport
      boundaries.  Text may be written inside or outside the viewport, but
      is clipped at the subpage boundaries.  The reference point of a
      string lies along a line passing through the string at half the
      height of a capital letter.  The position of the reference point
      along this line is determined by
      <literal><parameter>just</parameter></literal>, and the position of
      the reference point relative to the viewport is set by
      <literal><parameter>disp</parameter></literal> and
      <literal><parameter>pos</parameter></literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>side</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the side of the viewport along which the text is to
	    be written. The string must be one of:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal>b</literal>: Bottom of viewport.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>l</literal>: Left of viewport, text written
		  parallel to edge.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>lv</literal>: Left of viewport, text written at
		  right angles to edge.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>r</literal>: Right of viewport, text written
		  parallel to edge.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>rv</literal>: Right of viewport, text written at
		  right angles to edge.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal>t</literal>: Top of viewport.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>disp</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Position of the reference point of string, measured outwards
	    from the specified viewport edge in units of the current
	    character height.  Use negative
	    <literal><parameter>disp</parameter></literal> to write within
	    the viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pos</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Position of the reference point of string along the specified
	    edge, expressed as a fraction of the length of the edge.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>just</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the position of the string relative to its reference
	    point.  If <literal><parameter>just</parameter>=0</literal>,
	    the reference point is at the left and if
	    <literal><parameter>just</parameter>=1</literal>, it is at the
	    right of the string.  Other values of
	    <literal><parameter>just</parameter></literal> give
	    intermediate justifications.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>text</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    The string to be written out.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plot3d" renderas="sect3">
    <title>
      <function>plot3d</function>: Plot 3-d surface plot
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plot3d</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>opt</parameter></paramdef>
        <paramdef><parameter>side</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Plots a three dimensional surface plot within the environment set up
      by &plw3d;.  The surface is defined by the two-dimensional array
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      the point <literal><parameter>z</parameter>[i][j]</literal> being the
      value of the function at <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[j])</literal>.  Note that the points in
      arrays <literal><parameter>x</parameter></literal> and
      <literal><parameter>y</parameter></literal> do not need to be equally
      spaced, but must be stored in ascending order.  The parameter
      <literal><parameter>opt</parameter></literal> controls the way in
      which the surface is displayed.  For further details see <xref
      linkend="tri-d-plots"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of x coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of y coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array with set of
	    function values.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>x</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>y</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>opt</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Determines the way in which the surface is represented:
	    <itemizedlist>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=1</literal>: Lines
		  are drawn showing
		  <literal><parameter>z</parameter></literal> as a function
		  of <literal><parameter>x</parameter></literal> for each
		  value of <literal><parameter>y</parameter>[j]</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=2</literal>: Lines
		  are drawn showing
		  <literal><parameter>z</parameter></literal> as a function
		  of <literal><parameter>y</parameter></literal> for each
		  value of <literal><parameter>x</parameter>[i]</literal>.
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <literal><parameter>opt</parameter>=3</literal>: Network
		  of lines is drawn connecting points at which function is
		  defined.
		</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>side</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Flag to indicate whether or not ``sides'' should be draw on the
	    figure.  If <literal><parameter>side</parameter>=0</literal> no
	    sides are drawn, otherwise the sides are drawn.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plotsh3d" renderas="sect3">
    <title>
      <function>plotsh3d</function>: Plot shaded 3-d surface plot
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plotsh3d</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>side</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Plots a three dimensional shaded surface plot within the environment set up
      by &plw3d;.  The surface is defined by the two-dimensional array
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      the point <literal><parameter>z</parameter>[i][j]</literal> being the
      value of the function at <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[j])</literal>.  Note that the points in
      arrays <literal><parameter>x</parameter></literal> and
      <literal><parameter>y</parameter></literal> do not need to be equally
      spaced, but must be stored in ascending order.  
      For further details see <xref linkend="tri-d-plots"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of x coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to set of y coordinate values at which the function is
	    evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array with set of
	    function values.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>x</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of <literal><parameter>y</parameter></literal> values at
	    which function is evaluated.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>side</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Flag to indicate whether or not ``sides'' should be draw on the
	    figure.  If <literal><parameter>side</parameter>=0</literal> no
	    sides are drawn, otherwise the sides are drawn.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plpage" renderas="sect3">
    <title>
      <function>plpage</function>: Begin a new page
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plpage</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Deprecated.  Use the new name, &plbop;, for this function instead.
    </para>

  </sect1>

  <sect1 id="plpat" renderas="sect3">
    <title>
      <function>plpat</function>: Set area fill pattern
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plpat</function>
	</funcdef>
        <paramdef><parameter>nlin</parameter></paramdef>
        <paramdef><parameter>inc</parameter></paramdef>
        <paramdef><parameter>del</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the area fill pattern.  The pattern consists of 1 or 2 sets of
      parallel lines with specified inclinations and spacings.  The
      arguments to this routine are the number of sets to use (1 or 2)
      followed by two pointers to integer arrays (of 1 or 2 elements)
      specifying the inclinations in tenths of a degree and the spacing in
      micrometers.  (also see &plpsty;)
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>nlin</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of sets of lines making up the pattern, either 1 or 2.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>inc</parameter>
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with
	    <literal><parameter>nlin</parameter></literal> elements.
	    Specifies the line inclination in tenths of a degree.  (Should
	    be between -900 and 900).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>del</parameter>
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with
	    <literal><parameter>nlin</parameter></literal> elements.
	    Specifies the spacing in micrometers between the lines making
	    up the pattern.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plpoin" renderas="sect3">
    <title>
      <function>plpoin</function>: Plots a character at the specified points
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plpoin</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>code</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Marks out a set of <literal><parameter>n</parameter></literal> points
      at positions <literal>(<parameter>x</parameter>(i),
      <parameter>y</parameter>(i))</literal>, using the symbol defined by
      <literal><parameter>code</parameter></literal>.  If
      <literal><parameter>code</parameter></literal> is between 32 and 127,
      the symbol is simply the printable ASCII character in the default
      font.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of points to be marked.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with set of x coordinate values for the
	    points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with set of y coordinate values for the
	    points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>code</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Code number for the symbol to be plotted.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plpoin3" renderas="sect3">
    <title>
      <function>plpoin3</function>:  Draw a series of points in 3 space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plpoin3</function>
        </funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>code</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
       Draws a series of points in 3 space.  Setup similar to &plline3;.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter> 
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter> 
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter> 
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>code</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plpoly3" renderas="sect3">
    <title>
      <function>plpoly3</function>: Draw a polygon in 3 space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plpoly3</function>
        </funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>draw</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Draws a polygon in 3 space.  This differs from &plline3; in that this
      attempts to determine if the polygon is viewable.  If the back of
      polygon is facing the viewer, then it isn't drawn.  If this isn't what
      you want, then use &plline3; instead.
    </para>

    <para>
      <literal><parameter>n</parameter></literal> specifies the number of
      points.  They are assumed to be in a plane, and the directionality of
      the plane is determined from the first three points.  Additional
      points do not <emphasis>have</emphasis> to lie on the plane defined
      by the first three, but if they do not, then the determination of
      visibility obviously can't be 100% accurate... So if you're 3 space
      polygons are too far from planar, consider breaking them into smaller
      polygons.  <quote>3 points define a plane</quote> :-).
    </para>

    <para>
      The directionality of the polygon is determined by assuming the points
      are laid out in clockwise order.  If you are drawing them in
      counter clockwise order, make <literal><parameter>n</parameter></literal>
      the negative of the number of points.
    </para>

    <para>
      <emphasis>Bugs</emphasis>:  If one of the first two segments is of
      zero length, or if they are colinear, the calculation of visibility
      has a 50/50 chance of being correct.  Avoid such situations :-).  See
      <filename>x18c.c</filename> for an example of this problem.  
      (Search for <quote>20.1</quote>).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>z</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>draw</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plprec" renderas="sect3">
    <title>
      <function>plprec</function>: Set precision in numeric labels
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plprec</function>
	</funcdef>
        <paramdef><parameter>set</parameter></paramdef>
        <paramdef><parameter>prec</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the number of places after the decimal point in numeric labels.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>set</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    If <literal><parameter>set</parameter></literal> is equal to 0
	    then PLplot automatically determines the number of places to
	    use after the decimal point in numeric labels (like those used
	    to label axes).  If
	    <literal><parameter>set</parameter></literal> is 1 then
	    <literal><parameter>prec</parameter></literal> sets the number
	    of places.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>prec</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The number of characters to draw after the decimal point in
	    numeric labels.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plpsty" renderas="sect3">
    <title>
      <function>plpsty</function>: Select area fill pattern
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plpsty</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Select one of eight predefined area fill patterns to use (also see
      &plpat;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The desired pattern.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plptex" renderas="sect3">
    <title>
      <function>plptex</function>: Write text inside the viewport
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plptex</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>dx</parameter></paramdef>
        <paramdef><parameter>dy</parameter></paramdef>
        <paramdef><parameter>just</parameter></paramdef>
        <paramdef><parameter>text</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Writes text at a specified position and inclination within the
      viewport.  Text is clipped at the viewport boundaries.  The reference
      point of a string lies along a line passing through the string at
      half the height of a capital letter.  The position of the reference
      point along this line is determined by
      <literal><parameter>just</parameter></literal>, the reference point
      is placed at world coordinates <literal>(<parameter>x</parameter>,
      <parameter>y</parameter>)</literal> within the viewport.  The
      inclination of the string is specified in terms of differences of
      world coordinates making it easy to write text parallel to a line in
      a graph.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    x coordinate of reference point of string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    y coordinate of reference point of string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dx</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Together with <literal><parameter>dy</parameter></literal>,
	    this specifies the inclination of the string.  The baseline of
	    the string is parallel to a line joining
	    <literal>(<parameter>x</parameter>,
	    <parameter>y</parameter>)</literal> to
	    <literal>(<parameter>x</parameter>+<parameter>dx</parameter>,
	    <parameter>y</parameter>+<parameter>dy</parameter>)</literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dy</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Together with <literal><parameter>dx</parameter></literal>,
	    this specifies the inclination of the string.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>just</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Specifies the position of the string relative to its reference
	    point.  If <literal><parameter>just</parameter>=0</literal>,
	    the reference point is at the left and if
	    <literal><parameter>just</parameter>=1</literal>, it is at the
	    right of the string.  Other values of
	    <literal><parameter>just</parameter></literal> give
	    intermediate justifications.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>text</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    The string to be written out.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plreplot" renderas="sect3">
    <title>
      <function>plreplot</function>: Replays contents of plot buffer to
current device/file
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
	  <function>plreplot</function>
        </funcdef>
	<paramdef></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Replays contents of plot buffer to current device/file.
    </para>

  </sect1>

  <sect1 id="plrgb" renderas="sect3">
    <title>
      <function>plrgb</function>: Set line color by red, green
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plrgb</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set line color by red, green, blue from  0. to 1.  Do
<emphasis>not</emphasis> use this.
Only retained for backward compatibility
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plrgb1" renderas="sect3">
    <title>
      <function>plrgb1</function>: Set line color by 8-bit RGB values
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plrgb1</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set line color by 8-bit RGB values.  Do <emphasis>not</emphasis> use this.  Only retained
for backward compatibility.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plschr" renderas="sect3">
    <title>
      <function>plschr</function>: Set character size
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plschr</function>
	</funcdef>
        <paramdef><parameter>def</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets up the size of all subsequent characters drawn.  The actual
      height of a character is the product of the default character size
      and a scaling factor.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>def</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The default height of a character in millimeters, should be set
	    to zero if the default height is to remain unchanged.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Scale factor to be applied to default to get actual character
	    height.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscmap0" renderas="sect3">
    <title>
      <function>plscmap0</function>: Set color map0 colors by 8-bit RGB
values
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscmap0</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
        <paramdef><parameter>ncol0</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set color map0 colors using 8-bit RGB values (see <xref linkend="color-map-0"/>).  This sets the entire color
       map &ndash; only as many colors as specified will be allocated.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of red in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of green in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of blue in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ncol0</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Number of items in the
	    <literal><parameter>r</parameter></literal>,
	    <literal><parameter>g</parameter></literal>, and
	    <literal><parameter>b</parameter></literal> arrays.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscmap0n" renderas="sect3">
    <title>
      <function>plscmap0n</function>: Set number of colors in color map0
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscmap0n</function>
        </funcdef>
        <paramdef><parameter>ncol0</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Set number of colors in color map0 (see <xref linkend="color-map-0"/>). Allocate (or reallocate) color map0,
      and fill with default values for those colors not previously allocated.
      The first 16 default colors are given in the &plcol0; documentation. 
      For larger indices the default color is red. </para>

    <para>
      The drivers are not guaranteed to support more than 16 colors.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>ncol0</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Number of colors that will be allocated in the map0 palette.
	    If this number is zero or less, then the value from the 
	    previous call to &plscmap0n; is used and if there is no 
	    previous call, then a default value is used.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscmap1" renderas="sect3">
    <title>
      <function>plscmap1</function>: Set color map1 colors using 8-bit RGB
values
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscmap1</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
        <paramdef><parameter>ncol1</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Set color map1 colors using 8-bit RGB values (see <xref
      linkend="color-map-1"/>).  This also sets the number of colors.
      </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of red in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of green in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array with set of unsigned 8-bit integers (0-255) 
	    representing the degree of blue in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ncol1</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Number of items in the
	    <literal><parameter>r</parameter></literal>,
	    <literal><parameter>g</parameter></literal>, and
	    <literal><parameter>b</parameter></literal> arrays.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscmap1l" renderas="sect3">
    <title>
      <function>plscmap1l</function>: Set color map1 colors using a
piece-wise linear relationship
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscmap1l</function>
        </funcdef>
        <paramdef><parameter>itype</parameter></paramdef>
        <paramdef><parameter>npts</parameter></paramdef>
        <paramdef><parameter>pos</parameter></paramdef>
        <paramdef><parameter>coord1</parameter></paramdef>
        <paramdef><parameter>coord2</parameter></paramdef>
        <paramdef><parameter>coord3</parameter></paramdef>
        <paramdef><parameter>rev</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Set color map1 colors using a piece-wise linear relationship
      between position in the color map (from 0 to 1) and position in HLS or
      RGB color space (see <xref linkend="color-map-1"/>).  May be called at
      any time. </para>

    <para>
      The idea here is to specify a number of control points that define
      the mapping between palette 1 input positions (intensities) and HLS (or RGB).  Between
      these points, linear interpolation is used which
      gives a smooth variation of
      color with input position.  Any number of control points may be specified,
      located at arbitrary positions, although typically 2 - 4
      are enough. Another way of stating this is that we are traversing a
      given number of lines through HLS (or RGB) space as we move through
      color map1 entries.  The control points at the minimum and maximum
      position (0 and 1) must always be specified.  By adding more control
      points you can get more variation.  One good technique for plotting
      functions that vary about some expected average is to use an
      additional 2 control points in the center (position ~= 0.5) that are
      the same lightness as the background (typically white for paper output,
      black for crt), and same hue as the boundary control points.  This
      allows the highs and lows to be very easily distinguished.
    </para>
    <para>
      Each control point must specify the position in color map1 as well as
      three coordinates in HLS or RGB space.  The first point
      <emphasis>must</emphasis> correspond to position = 0, and the last to 
      position = 1.
    </para>

<para> The hue is interpolated around the "front" of the color wheel
      (red&lt;->green&lt;->blue&lt;->red) unless the "rev" flag is set, in
      which case interpolation (between the <literal>i</literal> and
      <literal>i + 1</literal> control point for <literal>rev[i]</literal>)
      proceeds around the back (reverse) side.  Specifying rev=NULL is
      equivalent to setting rev[]=0 for every control point. </para>

<para>
<table frame="none"><title> Bounds on coordinates</title>
<tgroup cols="4" align="center" colsep="0" rowsep="0">
<tbody>
<row><entry>RGB</entry><entry>R</entry><entry>[0, 1]</entry><entry>magnitude</entry> </row>
<row><entry>RGB</entry><entry>G</entry><entry>[0, 1]</entry><entry>magnitude</entry> </row>
<row><entry>RGB</entry><entry>B</entry><entry>[0, 1]</entry><entry>magnitude</entry> </row>
<row><entry>HLS</entry><entry>hue</entry><entry>[0, 360]</entry><entry>degrees</entry> </row>
<row><entry>HLS</entry><entry>lightness</entry><entry>[0, 1]</entry><entry>magnitude</entry> </row>
<row><entry>HLS</entry><entry>saturation</entry><entry>[0, 1]</entry><entry>magnitude</entry> </row>
</tbody>
</tgroup>
</table>
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>itype</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            0: HLS, 1: RGB
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>npts</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            number of control points
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pos</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            position for each control point
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>coord1</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            first coordinate (H or R) for each control point
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>coord2</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            second coordinate (L or G) for each control point
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>coord3</parameter> 
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
            third coordinate (S or B) for each control point
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>rev</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            reverse flag for each control point (<literal>rev[i]</literal> refers
	    to the interpolation interval between the <literal>i</literal> and
	    <literal>i + 1</literal> control points).
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscmap1n" renderas="sect3">
    <title>
      <function>plscmap1n</function>: Set number of colors in color map1
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscmap1n</function>
        </funcdef>
        <paramdef><parameter>ncol1</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Set number of colors in color map1, (re-)allocate color map1, and
    set default values if this is the first allocation (see <xref
    linkend="color-map-1"/>). </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>ncol1</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Number of colors that will be allocated in the map1 palette.
	    If this number is zero or less, then the value from the 
	    previous call to &plscmap1n; is used and if there is no 
	    previous call, then a default value is used.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscol0" renderas="sect3">
    <title>
      <function>plscol0</function>:  Set a given color from color map0 by 8
bit RGB value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscol0</function>
        </funcdef>
        <paramdef><parameter>icol0</parameter></paramdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> Set a given color by 8-bit RGB value for color map0 (see <xref linkend="color-map-0"/>).  Overwrites
    the previous (default?) color value for the given index and, thus, does
    not result in any additional allocation of space for colors. </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>icol0</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Color index.  Must be less than the maximum number of colors
	    (which is set by default, by &plscmap0n;, or even by &plscmap0;).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of red in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of green in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of blue in the color.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscolbg" renderas="sect3">
    <title>
      <function>plscolbg</function>: Set the background color (cmap0[0]) by
8-bit RGB value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscolbg</function>
        </funcdef>
        <paramdef><parameter>r</parameter></paramdef>
        <paramdef><parameter>g</parameter></paramdef>
        <paramdef><parameter>b</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set the background color (cmap0[0]) by 8-bit RGB value (see <xref
linkend="color-map-0"/>).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>r</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of red in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>g</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of green in the color.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>b</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Unsigned 8-bit integer (0-255) representing 
	    the degree of blue in the color.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscolor" renderas="sect3">
    <title>
      <function>plscolor</function>: Used to globally turn color output on/off
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plscolor</function>
        </funcdef>
        <paramdef><parameter>color</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Used to globally turn color output on/off for those drivers/devices
      that support it.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Color flag (Boolean).  If zero, color is turned off.  If
	    non-zero, color is turned on.
          </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plscompression" renderas="sect3">
    <title>
      <function>plscompression</function>: Set device-compression level
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plscompression</function>
	</funcdef>
        <paramdef><parameter>compression</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Set device-compression level.  Only used for drivers that provide
      compression.  This function, if used, should be invoked
      before a call to &plinit;.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>compression</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The desired compression level. This is a device-dependent 
	    value.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdev" renderas="sect3">
    <title>
      <function>plsdev</function>: Set the device (keyword) name
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdev</function>
        </funcdef>
        <paramdef><parameter>devname</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set the device (keyword) name.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>devname</parameter> 
	  (<literal>const char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdidev" renderas="sect3">
    <title>
      <function>plsdidev</function>: Set window into device space using
margin, aspect ratio, and justification.
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdidev</function>
        </funcdef>
        <paramdef><parameter>mar</parameter></paramdef>
        <paramdef><parameter>aspect</parameter></paramdef>
        <paramdef><parameter>jx</parameter></paramdef>
        <paramdef><parameter>jy</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set window into device space using margin, aspect ratio, and
      justification.  If you want to just use the previous value for any of
      these, just pass in the magic value PL_NOTSET. It is unlikely that one
      should ever need to change the aspect ratio but it's in there for
      completeness.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>mar</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>aspect</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>jx</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>jy</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdimap" renderas="sect3">
    <title>
      <function>plsdimap</function>: Set up transformation from metafile
coordinates
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdimap</function>
        </funcdef>
        <paramdef><parameter>dimxmin</parameter></paramdef>
        <paramdef><parameter>dimxmax</parameter></paramdef>
        <paramdef><parameter>dimymin</parameter></paramdef>
        <paramdef><parameter>dimymax</parameter></paramdef>
        <paramdef><parameter>dimxpmm</parameter></paramdef>
        <paramdef><parameter>dimypmm</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set up transformation from metafile coordinates.  The size of the plot
      is scaled so as to preserve aspect ratio.  This isn't intended to be a
      general-purpose facility just yet (not sure why the user would need
      it, for one).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>dimxmin</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dimxmax</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dimymin</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dimymax</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dimxpmm</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>dimypmm</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdiori" renderas="sect3">
    <title>
      <function>plsdiori</function>: Set plot orientation, specifying
rotation in units of pi/2
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdiori</function>
        </funcdef>
        <paramdef><parameter>rot</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set plot orientation, specifying rotation in units of pi/2.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>rot</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdiplt" renderas="sect3">
    <title>
      <function>plsdiplt</function>: Set window into plot space
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdiplt</function>
        </funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
    Set window into plot space.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsdiplz" renderas="sect3">
    <title>
      <function>plsdiplz</function>: Set window into plot space
incrementally (zoom)
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsdiplz</function>
        </funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set window into plot space incrementally (zoom).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsesc" renderas="sect3">
    <title>
      <function>plsesc</function>: Set the escape character for text strings
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsesc</function>
        </funcdef>
        <paramdef><parameter>esc</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
    Set the escape character for text strings.  From C you can pass as a
    character. Only
    selected characters are allowed to prevent the user from shooting
    himself in the foot (For example, a <quote>\</quote> isn't allowed since it conflicts with C's use
    of backslash as a character escape).  Here are the allowed escape
characters and their corresponding decimal ASCII values:
<itemizedlist>
<listitem>
<para>
  <quote>!</quote>, ASCII 33
</para>
</listitem>
<listitem>
<para>
  <quote>#</quote>, ASCII 35
</para>
</listitem>
<listitem>
<para>
  <quote>$</quote>, ASCII 36
</para>
</listitem>
<listitem>
<para>
  <quote>%</quote>, ASCII 37
</para>
</listitem>
<listitem>
<para>
  <quote>&amp;</quote>, ASCII 38
</para>
</listitem>
<listitem>
<para>
  <quote>*</quote>, ASCII 42
</para>
</listitem>
<listitem>
<para>
  <quote>@</quote>, ASCII 64
</para>
</listitem>
<listitem>
<para>
  <quote>^</quote>, ASCII 94
</para>
</listitem>
<listitem>
<para>
  <quote>~</quote>, ASCII 126
</para>
</listitem>
</itemizedlist>
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>esc</parameter> 
	  (<literal>char</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsfam" renderas="sect3">
    <title>
      <function>plsfam</function>: Set family file parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsfam</function>
	</funcdef>
        <paramdef><parameter>fam</parameter></paramdef>
        <paramdef><parameter>num</parameter></paramdef>
        <paramdef><parameter>bmax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets variables dealing with output file familying.  Does nothing if
      familying not supported by the driver.  This routine, if used, must
      be called before initializing PLplot.  See <xref linkend="familying"/>
      for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>fam</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Family flag (Boolean).  If nonzero, familying is enabled.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>num</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Current family file number.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>bmax</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Maximum file size (in bytes) for a family file.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsfnam" renderas="sect3">
    <title>
      <function>plsfnam</function>: Set output file name
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsfnam</function>
	</funcdef>
        <paramdef><parameter>fnam</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the current output file name, if applicable.  If the file name
      has not been specified and is required by the driver, the user will
      be prompted for it.  If using the X-windows output driver, this sets
      the display name.  This routine, if used, must be called before
      initializing PLplot.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>fnam</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to file name string.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plshades" renderas="sect3">
    <title>
      <function>plshades</function>: Shade regions on the basis of value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plshades</function>
        </funcdef>
        <paramdef><parameter>a</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>defined</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
        <paramdef><parameter>fill_width</parameter></paramdef>
        <paramdef><parameter>cont_color</parameter></paramdef>
        <paramdef><parameter>cont_width</parameter></paramdef>
        <paramdef><parameter>fill</parameter></paramdef>
        <paramdef><parameter>rectangular</parameter></paramdef>
        <paramdef><parameter>pltr</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Shade regions on the basis of value.  This is the high-level routine
      for making continuous color shaded plots with cmap1 while
      &plshade; (or &plshade1;) are used for individual shaded regions
      using either cmap0 or cmap1.
      <filename>examples/c/x16c.c</filename> shows a number of examples
      for using this function.
      See the following discussion of the
      arguments and <xref linkend="contour-plots"/> for
      more information.    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>a</parameter> 
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
             Contains ** pointer to array to be plotted. The array must have been declared
	     as PLFLT a[nx][ny].
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            First dimension of arrays "a" and "defined".
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Second dimension of arrays "a" and "defined".
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>defined</parameter> 
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Contains pointer to array of flags, 1 = data is valid, 0 = data is not
	    valid. This array determines which sections of the data is to be
	    plotted. This argument can be NULL if all the values are valid.
	    Must have been declared as char defined[nx][ny].
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>clevel</parameter> 
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
            Pointer to array containing the data levels corresponding to
	    the edges of each shaded region that will be plotted by this
	    function.  To work properly the levels should be monotonic.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nlevel</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Number of shades plus 1 (i.e., the number of shade edge values
	    in <literal><parameter>nlevel</parameter></literal>).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>fill_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines width used by the fill pattern.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>cont_color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen color used for contours defining edges of shaded
	    regions.  The pen color is only temporary set for the
	    contour drawing.  Set this value to zero or less if no shade edge contours are wanted.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>cont_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen width used for contours defining edges of shaded
	    regions.  This value may not be honored by all drivers.
	    The pen width is only temporary set for the
	    contour drawing.  Set this value to zero or less if no shade edge contours are wanted.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>fill</parameter> 
	  (<literal>void (*) (PLINT, PLFLT *, PLFLT *)</literal>, input)
	</term>
	<listitem>
	  <para>
            Routine used to fill the region.  Use &plfill;.  Future version of
	    plplot may have other fill routines.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>rectangular</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Set <literal><parameter>rectangular</parameter></literal> to 1
	  if rectangles map to rectangles after coordinate transformation
	  with <literal><parameter>pltrl</parameter></literal>.  Otherwise,
	  set <literal><parameter>rectangular</parameter></literal> to 0.
	  If <literal><parameter>rectangular</parameter></literal>
	  is set to 1, plshade tries to save time by
	  filling large rectangles.  This optimization fails if 
	  the coordinate transformation distorts the shape of rectangles.
	  For example a plot in polor coordinates has to have rectangular 
	  set to 0.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr</parameter> 
	  (<literal>void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)
           </literal>, input) 
	</term>
	<listitem>
	  <para>
	    Pointer to function that defines transformation between indices
	    in array <literal><parameter>z</parameter></literal> and the
	    world coordinates (C only).  Transformation functions are
	    provided in the PLplot library: 
	    &pltr0; for identity mapping, and &pltr1; and &pltr2; for
	    arbitrary mappings respectively defined by one- and 
	    two-dimensional arrays.  In addition, user-supplied routines
	    for the transformation can be used as well.  Examples of
	    all of these approaches are given in 
	    <xref linkend="contour-plots-c"/>.
	    The transformation function should
	    have the form given by any of &pltr0;, &pltr1;, or &pltr2;.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, output)
	</term>
	<listitem>
	  <para>
	    Extra parameter to help
	    pass information to &pltr0;, &pltr1;, &pltr2;, or whatever routine
	    that is externally supplied.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plshade" renderas="sect3">
    <title>
      <function>plshade</function>:  Shade individual region on the basis of value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plshade</function>
        </funcdef>
        <paramdef><parameter>a</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>defined</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>shade_min</parameter></paramdef>
        <paramdef><parameter>shade_max</parameter></paramdef>
        <paramdef><parameter>sh_cmap</parameter></paramdef>
        <paramdef><parameter>sh_color</parameter></paramdef>
        <paramdef><parameter>sh_width</parameter></paramdef>
        <paramdef><parameter>min_color</parameter></paramdef>
        <paramdef><parameter>min_width</parameter></paramdef>
        <paramdef><parameter>max_color</parameter></paramdef>
        <paramdef><parameter>max_width</parameter></paramdef>
        <paramdef><parameter>fill</parameter></paramdef>
        <paramdef><parameter>rectangular</parameter></paramdef>
        <paramdef><parameter>pltr</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para> 
      Shade individual region on the basis of value.  Use &plshades; if you want to
      shade a number of regions using continuous colors.
      &plshade; is identical to &plshade1; 
      except for the type of the first parameter.
      See &plshade1; for further discussion.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>a</parameter> 
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>defined</parameter> 
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>shade_min</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>shade_max</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_cmap</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_color</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>min_color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>min_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>max_color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>max_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>fill</parameter> 
	  (<literal>void (*) (PLINT, PLFLT *, PLFLT *)</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>rectangular</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr</parameter> 
	  (<literal>void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)
           </literal>, input) 
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter> 
	  (<literal>PLPointer</literal>, input)
	</term>
	<listitem>
	  <para>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plshade1" renderas="sect3">
    <title>
      <function>plshade1</function>: Shade individual region on the basis of value
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plshade1</function>
        </funcdef>
        <paramdef><parameter>a</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>defined</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>shade_min</parameter></paramdef>
        <paramdef><parameter>shade_max</parameter></paramdef>
        <paramdef><parameter>sh_cmap</parameter></paramdef>
        <paramdef><parameter>sh_color</parameter></paramdef>
        <paramdef><parameter>sh_width</parameter></paramdef>
        <paramdef><parameter>min_color</parameter></paramdef>
        <paramdef><parameter>min_width</parameter></paramdef>
        <paramdef><parameter>max_color</parameter></paramdef>
        <paramdef><parameter>max_width</parameter></paramdef>
        <paramdef><parameter>fill</parameter></paramdef>
        <paramdef><parameter>rectangular</parameter></paramdef>
        <paramdef><parameter>pltr</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Shade individual region on the basis of value.  Use &plshades; if you want to
      shade a number of contiguous regions using continuous colors.  In
      particular the edge contours are treated properly in &plshades;.
      If you attempt to do contiguous regions with &plshade1; (or &plshade;)
      the contours at the edge of the shade are partially obliterated by subsequent
      plots of contiguous shaded regions.
      &plshade1; differs from &plshade; by the type of the first
      argument.  Look at the argument list below, &plcont; and
      <xref linkend="contour-plots"/> for
      more information about the transformation from grid to world
      coordinates.  Shading NEEDS DOCUMENTATION, but
      as a stopgap look at how &plshade; is used in
      <filename>examples/c/x15c.c</filename>
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>a</parameter> 
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
             Contains array to be plotted. The array must have been declared
	     as PLFLT a[nx][ny].
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            First dimension of arrays "a" and "defined".
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Second dimension of arrays "a" and "defined".
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>defined</parameter> 
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Contains pointer to array of flags, 1 = data is valid, 0 = data is not
	    valid. This array determines which sections of the data is to be
	    plotted. This argument can be NULL if all the values are valid.
	    Must have been declared as char defined[nx][ny].
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Defines the "grid" coordinates.  The data a[0][0] has a
	     position of (xmin,ymin).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>shade_min</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines the interval to be shaded. If shade_max &leq; shade_min,
	    &plshade1; does nothing.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>shade_max</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines the interval to be shaded. If shade_max &leq; shade_min,
	    &plshade1; does nothing.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_cmap</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines color map.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_color</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines color map index if cmap0 or color map input value (ranging
	    from 0. to 1.) if cmap1.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>sh_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines width used by the fill pattern.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>min_color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen color, width used by the boundary of shaded region.
	    The min values are used for the shade_min boundary, and the max
	    values are used on the shade_max boundary.  Set color and width
	    to zero for no plotted boundaries.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>min_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen color, width used by the boundary of shaded region.
	    The min values are used for the shade_min boundary, and the max
	    values are used on the shade_max boundary.  Set color and width
	    to zero for no plotted boundaries.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>max_color</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen color, width used by the boundary of shaded region.
	    The min values are used for the shade_min boundary, and the max
	    values are used on the shade_max boundary.  Set color and width
	    to zero for no plotted boundaries.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>max_width</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            Defines pen color, width used by the boundary of shaded region.
	    The min values are used for the shade_min boundary, and the max
	    values are used on the shade_max boundary.  Set color and width
	    to zero for no plotted boundaries.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>fill</parameter> 
	  (<literal>void (*) (PLINT, PLFLT *, PLFLT *)</literal>, input)
	</term>
	<listitem>
	  <para>
            Routine used to fill the region.  Use &plfill;.  Future version of
	    plplot may have other fill routines.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>rectangular</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  Set <literal><parameter>rectangular</parameter></literal> to 1
	  if rectangles map to rectangles after coordinate transformation
	  with <literal><parameter>pltrl</parameter></literal>.  Otherwise,
	  set <literal><parameter>rectangular</parameter></literal> to 0.
	  If <literal><parameter>rectangular</parameter></literal>
	  is set to 1, plshade tries to save time by
	  filling large rectangles.  This optimization fails if 
	  the coordinate transformation distorts the shape of rectangles.
	  For example a plot in polor coordinates has to have rectangular 
	  set to 0.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr</parameter> 
	  (<literal>void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)
           </literal>, input) 
	</term>
	<listitem>
	  <para>
	    Pointer to function that defines transformation between indices
	    in array <literal><parameter>z</parameter></literal> and the
	    world coordinates (C only).  Transformation functions are
	    provided in the PLplot library: 
	    &pltr0; for identity mapping, and &pltr1; and &pltr2; for
	    arbitrary mappings respectively defined by one- and 
	    two-dimensional arrays.  In addition, user-supplied routines
	    for the transformation can be used as well.  Examples of
	    all of these approaches are given in 
	    <xref linkend="contour-plots-c"/>.
	    The transformation function should
	    have the form given by any of &pltr0;, &pltr1;, or &pltr2;.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, output)
	</term>
	<listitem>
	  <para>
	    Extra parameter to help
	    pass information to &pltr0;, &pltr1;, &pltr2;, or whatever routine
	    that is externally supplied.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsmaj" renderas="sect3">
    <title>
      <function>plsmaj</function>: Set length of major ticks
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsmaj</function>
	</funcdef>
        <paramdef><parameter>def</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets up the length of the major ticks.  The actual length is the
      product of the default length and a scaling factor as for character
      height.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>def</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The default length of a major tick in millimeters, should be
	    set to zero if the default length is to remain unchanged.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Scale factor to be applied to default to get actual tick
	    length.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsmin" renderas="sect3">
    <title>
      <function>plsmin</function>: Set length of minor ticks
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsmin</function>
	</funcdef>
        <paramdef><parameter>def</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets up the length of the minor ticks and the length of the
      terminals on error bars.  The actual length is the product of the
      default length and a scaling factor as for character height.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>def</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The default length of a minor tick in millimeters, should be
	    set to zero if the default length is to remain unchanged.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Scale factor to be applied to default to get actual tick
	    length.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsori" renderas="sect3">
    <title>
      <function>plsori</function>: Set orientation
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsori</function>
	</funcdef>
        <paramdef><parameter>ori</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the current orientation.  If
      <literal><parameter>ori</parameter></literal> is equal to zero
      (default) then landscape is used (x axis is parallel to the longest
      edge of the page), otherwise portrait is used.  This option is not
      supported by all output drivers (in particular, most interactive
      screen drivers ignore the orientation).  This routine, if used, must
      be called before initializing PLplot.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>ori</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Orientation value.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plspage" renderas="sect3">
    <title>
      <function>plspage</function>: Set page parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plspage</function>
	</funcdef>
        <paramdef><parameter>xp</parameter></paramdef>
        <paramdef><parameter>yp</parameter></paramdef>
        <paramdef><parameter>xleng</parameter></paramdef>
        <paramdef><parameter>yleng</parameter></paramdef>
        <paramdef><parameter>xoff</parameter></paramdef>
        <paramdef><parameter>yoff</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the page configuration (optional).  Not all parameters
      recognized by all drivers.  The X-window driver uses the length and
      offset parameters to determine the window size and location.  This
      routine, if used, must be called before initializing PLplot.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xp</parameter>
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
	    Number of pixels, x.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yp</parameter>
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
	    Number of pixels, y.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xleng</parameter>
	  (<literal>PLINT </literal>, output)
	</term>
	<listitem>
	  <para>
	    Page length, x.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yleng</parameter>
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
	    Page length, y.
          </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
          <parameter>xoff</parameter>
          (<literal>PLINT</literal>, output)
        </term>
        <listitem>
          <para>
            Page offset, x.
          </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
          <parameter>yoff</parameter>
          (<literal>PLINT</literal>, output)
        </term>
        <listitem>
          <para>
            Page offset, y.
          </para>
        </listitem>
       </varlistentry>
     </variablelist>
 
   </sect1>

  <sect1 id="plspause" renderas="sect3">
    <title>
      <function>plspause</function>: Set the pause (on end-of-page) status
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plspause</function>
        </funcdef>
        <paramdef><parameter>pause</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set the pause (on end-of-page) status.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>pause</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsstrm" renderas="sect3">
    <title>
      <function>plsstrm</function>: Set current output stream
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsstrm</function>
	</funcdef>
        <paramdef><parameter>strm</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the number of the current output stream.  The stream number
      defaults to 0 unless changed by this routine.  The first use of this
      routine must be followed by a call initializing PLplot
      (e.g. &plstar;).
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>strm</parameter>
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
	    The current stream number.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plssub" renderas="sect3">
    <title>
      <function>plssub</function>: Set the number of subwindows in x and y
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plssub</function>
        </funcdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Set the number of subwindows in x and y.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>nx</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plssym" renderas="sect3">
    <title>
      <function>plssym</function>: Set symbol size
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plssym</function>
	</funcdef>
        <paramdef><parameter>def</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets up the size of all subsequent symbols drawn by &plpoin; and
      &plsym;.  The actual height of a symbol is the product of the default
      symbol size and a scaling factor as for the character height.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>def</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The default height of a symbol in millimeters, should be set to
	    zero if the default height is to remain unchanged.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Scale factor to be applied to default to get actual symbol
	    height.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstar" renderas="sect3">
    <title>
      <function>plstar</function>: Initialization
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plstar</function>
	</funcdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Initializing the plotting package.  The program prompts for the
      device keyword or number of the desired output device.  Hitting a
      RETURN in response to the prompt is the same as selecting the first
      device.  If only one device is enabled when PLplot is installed,
      &plstar; will issue no prompt.  The output device is divided into
      <literal><parameter>nx</parameter></literal> by
      <literal><parameter>ny</parameter></literal> sub-pages, each of which
      may be used independently.  The subroutine &pladv; is used to advance
      from one subpage to the next.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>nx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subpages to divide output page in the horizontal
	    direction.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subpages to divide output page in the vertical
	    direction.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstart" renderas="sect3">
    <title>
      <function>plstart</function>: Initialization
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plstart</function>
	</funcdef>
        <paramdef><parameter>device</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Alternative to &plstar; for initializing the plotting package.  The
      <literal><parameter>device</parameter></literal> name keyword for the
      desired output device must be supplied as an argument.  The device
      keywords are the same as those printed out by &plstar;.  If the
      requested device is not available, or if the input string is empty or
      begins with ``?'', the prompted startup of &plstar; is used.  This
      routine also divides the output device into
      <literal><parameter>nx</parameter></literal> by
      <literal><parameter>ny</parameter></literal> sub-pages, each of which
      may be used independently.  The subroutine &pladv; is used to advance
      from one subpage to the next.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>device</parameter>
	  (<literal>const char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Device name (keyword) of the required output device.  If NULL
	    or if the first character is a ``?'', the normal (prompted)
	    startup is used.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subpages to divide output page in the horizontal
	    direction.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of subpages to divide output page in the vertical
	    direction.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstripa" renderas="sect3">
    <title>
      <function>plstripa</function>: Add a point to a stripchart
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plstripa</function>
        </funcdef>
        <paramdef><parameter>id</parameter></paramdef>
        <paramdef><parameter>p</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Add a point to a stripchart.  Allocates memory and rescales as
necessary.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>id</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>p</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter> 
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstripc" renderas="sect3">
    <title>
      <function>plstripc</function>: Create 1d stripchart
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plstripc</function>
        </funcdef>
        <paramdef><parameter>id</parameter></paramdef>
        <paramdef><parameter>xspec</parameter></paramdef>
        <paramdef><parameter>yspec</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>xjump</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>xlpos</parameter></paramdef>
        <paramdef><parameter>ylpos</parameter></paramdef>
        <paramdef><parameter>y_ascl</parameter></paramdef>
        <paramdef><parameter>acc</parameter></paramdef>
        <paramdef><parameter>colbox</parameter></paramdef>
        <paramdef><parameter>collab</parameter></paramdef>
        <paramdef><parameter>colline</parameter></paramdef>
        <paramdef><parameter>styline</parameter></paramdef>
        <paramdef><parameter>legline[]</parameter></paramdef>
        <paramdef><parameter>labx</parameter></paramdef>
        <paramdef><parameter>laby</parameter></paramdef>
        <paramdef><parameter>labtop</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Create 1d stripchart.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>id</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xspec</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>yspec</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xjump</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xlpos</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ylpos</parameter> 
	  (<literal>PLFLT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y_ascl</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>acc</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>colbox</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>collab</parameter> 
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>colline</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>styline</parameter> 
	  (<literal>PLINT *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>legline[]</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>labx</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>laby</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>labtop</parameter> 
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstripd" renderas="sect3">
    <title>
      <function>plstripd</function>: Deletes and releases memory used by a
stripchart
    </title> 

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plstripd</function>
        </funcdef>
        <paramdef><parameter>id</parameter></paramdef>
      </funcprototype>
      </funcsynopsis> 
    </para> 

    <para>
      Deletes and releases memory used by a stripchart.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>id</parameter> 
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plstyl" renderas="sect3">
    <title>
      <function>plstyl</function>: Set line style
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plstyl</function>
	</funcdef>
        <paramdef><parameter>nels</parameter></paramdef>
        <paramdef><parameter>mark</parameter></paramdef>
        <paramdef><parameter>space</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This sets up the line style for all lines subsequently drawn.  A line
      consists of segments in which the pen is alternately down and up.
      The lengths of these segments are passed in the arrays
      <literal><parameter>mark</parameter></literal> and
      <literal><parameter>space</parameter></literal> respectively.  The
      number of mark-space pairs is specified by
      <literal><parameter>nels</parameter></literal>.  In order to return
      the line style to the default continuous line, &plstyl; should be
      called with <literal><parameter>nels</parameter>=0</literal>.(see
      also &pllsty;)
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>nels</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The number of <literal><parameter>mark</parameter></literal>
	    and <literal><parameter>space</parameter></literal> elements in
	    a line.  Thus a simple broken line can be obtained by setting
	    <literal><parameter>nels</parameter>=1</literal>.  A continuous
	    line is specified by setting
	    <literal><parameter>nels</parameter>=0</literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>mark</parameter>
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with the lengths of the segments during which
	    the pen is down, measured in micrometers.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>space</parameter>
	  (<literal>PLINT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with the lengths of the segments during which
	    the pen is up, measured in micrometers.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsvpa" renderas="sect3">
    <title>
      <function>plsvpa</function>: Specify viewport in absolute coordinates
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsvpa</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Alternate routine to &plvpor; for setting up the viewport.  This
      routine should be used only if the viewport is required to have a
      definite size in millimeters.  The routine &plgspa; is useful for
      finding out the size of the current subpage.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The distance of the left-hand edge of the viewport from the
	    left-hand edge of the subpage in millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The distance of the right-hand edge of the viewport from the
	    left-hand edge of the subpage in millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The distance of the bottom edge of the viewport from the bottom
	    edge of the subpage in millimeters.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The distance of the top edge of the viewport from the top edge
	    of the subpage in millimeters.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsxax" renderas="sect3">
    <title>
      <function>plsxax</function>: Set x axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsxax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Returns current values of the
      <literal><parameter>digmax</parameter></literal> and
      <literal><parameter>digits</parameter></literal> flags for the x
      axis.  <literal><parameter>digits</parameter></literal> is updated
      after the plot is drawn, so so this routine should only be called
      <emphasis>after</emphasis> the call to &plbox; (or &plbox3;) is
      complete.  See <xref linkend="annotation"/> for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>digmax</parameter>
	  (<literal>PLINT</literal>, output)
	</term>
	<listitem>
	  <para>
	    Variable to set the maximum number of digits.  If nonzero, the
	    printed label will be switched to a floating point
	    representation when the number of digits exceeds
	    <literal><parameter>digmax</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>digits</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Field digits value.  Currently, changing its value here has no
	    effect since it is set only by &plbox; or &plbox3;.  However,
	    the user may obtain its value after a call to &plbox; by
	    calling &plgxax;.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsyax" renderas="sect3">
    <title>
      <function>plsyax</function>: Set y axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsyax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Identical to &plsxax;, except that arguments are flags for y axis.
      See the description of &plsxax; for more detail.
    </para>

  </sect1>

  <sect1 id="plsym" renderas="sect3">
    <title>
      <function>plsym</function>: Plots a symbol at the specified points
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsym</function>
	</funcdef>
        <paramdef><parameter>n</parameter></paramdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>code</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Marks out a set of <literal><parameter>n</parameter></literal> points
      at positions <literal>(<parameter>x</parameter>[i],
      <parameter>y</parameter>[i])</literal>, using the symbol defined by
      <literal><parameter>code</parameter></literal>.  The code is
      interpreted as an index in the Hershey font tables.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>n</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of points to be marked.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with set of x coordinate values for the
	    points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array with set of y coordinate values for the
	    points.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>code</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Code number for the symbol to be plotted.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plszax" renderas="sect3">
    <title>
      <function>plszax</function>: Set z axis parameters
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plszax</function>
	</funcdef>
        <paramdef><parameter>digmax</parameter></paramdef>
        <paramdef><parameter>digits</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Identical to &plsxax;, except that arguments are flags for z axis.
      See the description of &plsxax; for more detail.
    </para>

  </sect1>

  <sect1 id="pltext" renderas="sect3">
    <title>
      <function>pltext</function>: Switch to text screen
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pltext</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets an interactive device to text mode, used in conjunction with
      &plgra; to allow graphics and text to be interspersed.  On a device
      which supports separate text and graphics windows, this command
      causes control to be switched to the text window.  This can be useful
      for printing diagnostic messages or getting user input, which would
      otherwise interfere with the plots.  The user
      <emphasis>must</emphasis> switch back to the graphics window before
      issuing plot commands, as the text (or console) device will probably
      become quite confused otherwise.  If already in text mode, this
      command is ignored.  It is also ignored on devices which only support
      a single window or use a different method for shifting focus (see
      also &plgra;).
    </para>

  </sect1>

  <sect1 id="plvasp" renderas="sect3">
    <title>
      <function>plvasp</function>: Specify viewport using aspect ratio only
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvasp</function>
	</funcdef>
        <paramdef><parameter>aspect</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the viewport so that the ratio of the length of the y axis to
      that of the x axis is equal to
      <literal><parameter>aspect</parameter></literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>aspect</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Ratio of length of y axis to length of x axis.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plvpas" renderas="sect3">
    <title>
      <function>plvpas</function>: Specify viewport using coordinates and aspect ratio
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvpas</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>aspect</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Device-independent routine for setting up the viewport.  The viewport
      is chosen to be the largest with the given aspect ratio that fits
      within the specified region (in terms of normalized subpage
      coordinates).  This routine is functionally equivalent to &plvpor;
      when a ``natural'' aspect ratio (0.0) is chosen.  Unlike &plvasp;,
      this routine reserves no extra space at the edges for labels.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the left-hand edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the right-hand edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the bottom edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the top edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>aspect</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Ratio of length of y axis to length of x axis.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plvpor" renderas="sect3">
    <title>
      <function>plvpor</function>: Specify viewport using coordinates
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvpor</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Device-independent routine for setting up the viewport.  This defines
      the viewport in terms of normalized subpage coordinates which run
      from 0.0 to 1.0 (left to right and bottom to top) along each edge of
      the current subpage.  Use the alternate routine &plsvpa; in order to
      create a viewport of a definite size.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the left-hand edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the right-hand edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the bottom edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The normalized subpage coordinate of the top edge of the
	    viewport.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plvsta" renderas="sect3">
    <title>
      <function>plvsta</function>: Select standard viewport
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvsta</function>
	</funcdef>
        <paramdef></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets up a standard viewport, leaving a left-hand margin of seven
      character heights, and four character heights around the other three
      sides.
    </para>

  </sect1>

  <sect1 id="plw3d" renderas="sect3">
    <title>
      <function>plw3d</function>: Set up window for 3-d plotting
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plw3d</function>
	</funcdef>
        <paramdef><parameter>basex</parameter></paramdef>
        <paramdef><parameter>basey</parameter></paramdef>
        <paramdef><parameter>height</parameter></paramdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
        <paramdef><parameter>zmin</parameter></paramdef>
        <paramdef><parameter>zmax</parameter></paramdef>
        <paramdef><parameter>alt</parameter></paramdef>
        <paramdef><parameter>az</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets up a window for a three-dimensional surface plot within the
      currently defined two-dimensional window.  The enclosing box for the
      surface plot defined by
      <literal><parameter>xmin</parameter></literal>,
      <literal><parameter>xmax</parameter></literal>,
      <literal><parameter>ymin</parameter></literal>,
      <literal><parameter>ymax</parameter></literal>,
      <literal><parameter>zmin</parameter></literal> and
      <literal><parameter>zmax</parameter></literal> in user-coordinate
      space is mapped into a box of world coordinate size
      <literal><parameter>basex</parameter></literal> by
      <literal><parameter>basey</parameter></literal> by
      <literal><parameter>height</parameter></literal> so that
      <literal><parameter>xmin</parameter></literal> maps to
      <literal>-<parameter>basex</parameter>/2</literal>,
      <literal><parameter>xmax</parameter></literal> maps to
      <literal><parameter>basex</parameter>/2</literal>,
      <literal><parameter>ymin</parameter></literal> maps to
      <literal>-<parameter>basey</parameter>/2</literal>,
      <literal><parameter>ymax</parameter></literal> maps to
      <literal><parameter>basey</parameter>/2</literal>,
      <literal><parameter>zmin</parameter></literal> maps to
      <literal>0</literal> and
      <literal><parameter>zmax</parameter></literal> maps to
      <literal><parameter>height</parameter></literal>.  The resulting
      world-coordinate box is then viewed by an observer at altitude
      <literal><parameter>alt</parameter></literal> and azimuth
      <literal><parameter>az</parameter></literal>.  This routine must be
      called before &plbox3; or &plot3d;.  For a more complete description
      of three-dimensional plotting see <xref linkend="tri-d-plots"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>basex</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The x coordinate size of the world-coordinate box.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>basey</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The y coordinate size of the world-coordinate box.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>height</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The z coordinate size of the world-coordinate box.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The minimum user x coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The maximum user x coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The minimum user y coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The maximum user y coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>zmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The minimum user z coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>zmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The maximum user z coordinate value.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>alt</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The viewing altitude in degrees above the xy plane.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>az</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The viewing azimuth in degrees.  When
	    <literal><parameter>az</parameter>=0</literal>, the observer is
	    looking face onto the zx plane, and as
	    <literal><parameter>az</parameter></literal> is increased, the
	    observer moves clockwise around the box when viewed from above
	    the xy plane.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plwid" renderas="sect3">
    <title>
      <function>plwid</function>: Set pen width
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plwid</function>
	</funcdef>
        <paramdef><parameter>width</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the pen width.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>width</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The desired pen width.  The pen width must be between 1 and a
	    device dependent maximum value.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plwind" renderas="sect3">
    <title>
      <function>plwind</function>: Specify world coordinates of viewport boundaries
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plwind</function>
	</funcdef>
        <paramdef><parameter>xmin</parameter></paramdef>
        <paramdef><parameter>xmax</parameter></paramdef>
        <paramdef><parameter>ymin</parameter></paramdef>
        <paramdef><parameter>ymax</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets up the world coordinates of the edges of the viewport.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>xmin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The world x coordinate of the left-hand edge of the viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xmax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The world x coordinate of the right-hand edge of the viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymin</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The world y coordinate of the bottom edge of the viewport.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ymax</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    The world y coordinate of the top edge of the viewport.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>
  <sect1 id="plxormod" renderas="sect3">
    <title>
      <function>plxormod</function>: Enter or leave xor mode
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plxormod</function>
	</funcdef>
        <paramdef><parameter>mode</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Enter (mode !=0) or leave (mode == 0) xor mode for those drivers 
      (e.g., the xwin driver) that support it.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>mode</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	  mode != 0 means enter xor mode and mode == 0 means leave xor
	  mode.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: ("plplotdoc.sgml" "book" "chapter" "")
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
