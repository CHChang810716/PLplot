<!-- -*-  mode: nxml -*- -->
<!--
    c.xml: "C Language" chapter

Copyright (C) 1994  Geoffrey Furnish and Maurice LeBrun
Copyright (C) 1999-2016 Alan W. Irwin
Copyright (C) 1999, 2000, 2001, 2002, 2003  Rafael Laboissiere
Copyright (C) 2003  Joao Cardoso

Redistribution and use in source (XML DocBook) and "compiled" forms
(HTML, PDF, PostScript, DVI, TeXinfo and so forth) with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code (XML DocBook) must retain the
above copyright notice, this list of conditions and the following
disclaimer as the first lines of this file unmodified.

2. Redistributions in compiled form (transformed to other DTDs,
converted to HTML, PDF, PostScript, and other formats) must
reproduce the above copyright notice, this list of conditions and
the following disclaimer in the documentation and/or other
materials provided with the distribution.

Important: THIS DOCUMENTATION IS PROVIDED BY THE PLPLOT PROJECT "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PLPLOT PROJECT BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<chapter id="c">
  <title>C Language</title>
  <para>The C computer language is fundamental to PLplot because our
  core plotting library and our definitive set of standard examples are
  written in that language, and the remainder of the computer languages
  that we support are implemented as bindings for our core C library.
  The C standard we use is <ulink
  url="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n897.pdf">C99</ulink>,
  and our experience is that all C compilers accessible to our users
  support that standard sufficiently to have no trouble building
  PLplot.</para>
  <para><anchor id="plplot-types"/>The fundamental PLplot types that are used in our C library are defined as follows:</para>
  <itemizedlist><title>PLplot C Types</title>
    <listitem><para>Floating-point type (where the C macro PL_DOUBLE is #defined if the
    CMake variable PL_DOUBLE is set to ON [which occurs by default])<programlisting>
#if defined ( PL_DOUBLE )
typedef double PLFLT;
#else
typedef float PLFLT;
#endif
    </programlisting></para></listitem>
    <listitem><para>Integer type<programlisting>
typedef int32_t PLINT;
    </programlisting></para></listitem>
    <listitem><para>Boolean type<programlisting>
typedef PLINT PLBOOL;
    </programlisting></para></listitem>
    <listitem><para>32-bit type that contains either UCS4-encoded unicode or FCI (font characterization integer) data<programlisting>
typedef uint32_t PLUNICODE;
    </programlisting></para></listitem>
    <listitem><para>Input PLFLT vector<programlisting>
typedef const PLFLT * PLFLT_VECTOR;
    </programlisting></para></listitem>
    <listitem><para>Input PLINT vector<programlisting>
typedef const PLINT * PLINT_VECTOR;
    </programlisting></para></listitem>
    <listitem><para>Input PLBOOL vector<programlisting>
typedef const PLBOOL * PLBOOL_VECTOR;
    </programlisting></para></listitem>
    <listitem><para>Input char vector<programlisting>
typedef const char * PLCHAR_VECTOR;
    </programlisting></para></listitem>
    <listitem><para>Input PLFLT 2D matrix<programlisting>
typedef const PLFLT * const * PLFLT_MATRIX;
    </programlisting>where for the C language case the matrix is organized in the row-major order normally expected for that language, i.e. as a column vector of pointers to PLFLT row vectors.</para></listitem>
    <listitem><para>Input char 2D matrix<programlisting>
typedef const char * const * PLCHAR_MATRIX;
    </programlisting>where for the C language case the matrix is organized in the row-major order normally expected for that language, i.e. as a column vector of pointers to char row vectors.</para></listitem>
    <listitem><para>Generic pointer<programlisting>
typedef void* PLPointer;
    </programlisting></para></listitem>
    <listitem><para>Type for returning mouse/keyboard events<programlisting>
typedef struct
{
    int          type;              // of event (CURRENTLY UNUSED)
    unsigned int state;             // key or button mask
    unsigned int keysym;            // key selected
    unsigned int button;            // mouse button selected
    PLINT        subwindow;         // subwindow (alias subpage, alias subplot) number
    char         string[PL_MAXKEY]; // translated string
    int          pX, pY;            // absolute device coordinates of pointer
    PLFLT        dX, dY;            // relative device coordinates of pointer
    PLFLT        wX, wY;            // world coordinates of pointer
} PLGraphicsIn;
    </programlisting></para></listitem>
    <listitem><para>Map transformation callback type<programlisting>
typedef void ( *PLMAPFORM_callback )( PLINT n, PLFLT *x, PLFLT *y );
    </programlisting>where the callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>n</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>Number of elements in the <literal>x</literal> and <literal>y</literal> arrays.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>x</parameter>
          (<literal>PLFLT *</literal>, input/output)
        </term>
        <listitem>
          <para>
            Pointer to array with <literal>x</literal> coordinates of points to be transformed.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>y</parameter>
          (<literal>PLFLT *</literal>, input/output)
        </term>
        <listitem>
          <para>
            Pointer to array with <literal>y</literal> coordinates of points to be transformed.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
    <listitem><para>Coordinate transformation callback type<programlisting>
typedef void ( *PLTRANSFORM_callback )( PLFLT x, PLFLT y, PLFLT *xp, PLFLT *yp, PLPointer data);
    </programlisting>where the callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>x</parameter>
          (<literal>PLFLT</literal>, input)
        </term>
        <listitem>
          <para>
            <literal>x</literal>-position to be transformed.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>y</parameter>
          (<literal>PLFLT</literal>, input)
        </term>
        <listitem>
          <para>
            <literal>y</literal>-position to be transformed.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
         <term>
          <parameter>tx</parameter>
          (<literal>PLFLT *</literal>, output)
        </term>
        <listitem>
          <para>
            Pointer to returned value of transformed <literal>x</literal>-position.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>ty</parameter>
          (<literal>PLFLT *</literal>, output)
        </term>
        <listitem>
          <para>
            Pointer to returned value of transformed <literal>y</literal>-position.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>data</parameter>
          (<literal>PLPointer</literal>, input)
        </term>
        <listitem>
          <para>
            Generic pointer to additional input data that may be required by the callback routine in
            order to implement the transformation.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
    <listitem><para>Custom label callback type<programlisting>
typedef void ( *PLLABEL_FUNC_callback )( PLINT axis, PLFLT value, char *label, PLINT length, PLPointer data);
    </programlisting>where the callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>axis</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>
	    An integer whose value is <literal>PL_X_AXIS = 1</literal> if an
	    <literal>x</literal>-axis label is being generated and
	    <literal>PL_Y_AXIS = 2</literal> if a <literal>y</literal>-axis label
	    is being generated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>value</parameter>
          (<literal>PLFLT</literal>, input)
        </term>
        <listitem>
          <para>
	    Floating-point numerical value to be used to help generate the label.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>label</parameter>
          (<literal>char *</literal>, output)
        </term>
        <listitem>
          <para>
	    A pointer to a memory area suitable for containing the output
	    NULL-terminated character string of maximum length (including
	    the NULL-terminating byte) of <literal>length</literal>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>length</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>
	    The maximum possible length (including NULL-terminating byte) of the
	    output NULL-terminated character string.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>data</parameter>
          (<literal>PLPointer</literal>, input)
        </term>
        <listitem>
          <para>
            Generic pointer to additional input data that may be required by the callback routine in
	    order to generate a label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
    <listitem><para>Two-dimensional function array lookup callback type<programlisting>
typedef PLFLT ( *PLF2EVAL_callback )( PLINT ix, PLINT iy, PLPointer data);
    </programlisting>where the callback function returns the looked-up value, and the
callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>ix</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>The <literal>x</literal> index of the function array lookup.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>iy</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>The <literal>y</literal> index of the function array lookup.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>data</parameter>
          (<literal>PLPointer</literal>, input)
        </term>
        <listitem>
	  <para>Generic pointer to the two-dimensional function input data that
	  are required by the callback routine.  Since this is a generic
	  pointer, these two-dimensional data can be arranged in any way that is
	  desired by the user.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
    <listitem><para>Fill callback type<programlisting>
typedef void ( *PLFILL_callback )( PLINT n, const PLFLT *x, const PLFLT *y );
    </programlisting>where the callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>n</parameter>
          (<literal>PLINT</literal>, input)
        </term>
        <listitem>
          <para>Number of vertices in polygon to be filled.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>x</parameter>
          (<literal>const PLFLT *</literal>, input)
        </term>
        <listitem>
          <para>Pointer to array with <literal>x</literal>-coordinates of vertices.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>y</parameter>
          (<literal>const PLFLT *</literal>, input)
        </term>
        <listitem>
          <para>Pointer to array with <literal>y</literal>-coordinates of vertices.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
    <listitem><para>Defined callback type<programlisting>
typedef PLINT ( *PLDEFINED_callback )( PLFLT x, PLFLT y );
</programlisting>where the callback function returns a 1 or 0 depending on whether the
<literal>x</literal> and <literal>y</literal> arguments are within specified defined
area, and the callback arguments are the following:</para>
    <variablelist>
      <varlistentry>
        <term>
          <parameter>x</parameter>
          (<literal>PLFLT</literal>, input)
        </term>
        <listitem>
          <para><literal>x</literal>-coordinate to be tested for whether it is in the defined region.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>y</parameter>
          (<literal>PLFLT</literal>, input)
        </term>
        <listitem>
          <para><literal>y</literal>-coordinate to be tested for whether it is in the defined region.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    </listitem>
  </itemizedlist>
  <para>For more information on calling PLplot from C, please consult
  the example C programs in <filename>examples/c</filename> that are
  distributed with PLplot.  For more information on building your own
  PLplot-related C routines, please consult either the traditional
  (Makefile + pkg-config) or CMake-based build systems that are created
  as part of the install step for our C (and other language)
  examples.</para>
</chapter>
