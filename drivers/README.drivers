This document is a quick overview of building and configuring drivers from
the perspective of what system files have to be modified.  (For actual details
about how to construct a new device driver read the source for some of
the drivers in this directory.  Also, there are several useful sections in
the DocBook documentation [see, for example, "Output Devices" and "Driver
Functions" in Chapter 3] that you should look at.)

Here is the list of PLplot system files, and how they must be modified.  The
examples here are taken from what was done for the gd driver (with png and
jpeg devices) and the cgm driver (with cgm device).

(1) ../include/drivers.h

   Put a line such as void plD_dispatch_init_cgm ( PLDispatchTable *pdt );
   in this file.  The cgm device and driver name are identical for this
   case. When the two names are different (e.g., png and jpeg are the devices
   implemented by the gd driver), use the device name here.

   The point of plD_dispatch_init_??? is to initialize the driver dispatch
   table with the data it needs to know.  Here is an example from cgm.c

void plD_dispatch_init_cgm( PLDispatchTable *pdt )
{
    pdt->pl_MenuStr  = "CGM (Computer Graphics metafile) file";
    pdt->pl_DevName  = "cgm";
    pdt->pl_type     = plDevType_FileOriented;
    pdt->pl_seq      = 44;
    pdt->pl_init     = (plD_init_fp)     plD_init_cgm;
    pdt->pl_line     = (plD_line_fp)     plD_line_cgm;
    pdt->pl_polyline = (plD_polyline_fp) plD_polyline_cgm;
    pdt->pl_eop      = (plD_eop_fp)      plD_eop_cgm;
    pdt->pl_bop      = (plD_bop_fp)      plD_bop_cgm;
    pdt->pl_tidy     = (plD_tidy_fp)     plD_tidy_cgm;
    pdt->pl_state    = (plD_state_fp)    plD_state_cgm;
    pdt->pl_esc      = (plD_esc_fp)      plD_esc_cgm;
}

The declarations for the plD_*_cgm routines occur right before this
function, and the definitions of these routines afterwards.

(2) ../include/plcore.h

   Append lines similar to the following into the static_device_initializers
   definition part of this file.

#if defined(PLD_cgm) && !defined(ENABLE_DYNDRIVERS)
    plD_dispatch_init_cgm,
#endif

(3) ../cf/configure.in

   The general idea here is to pick a driver with devices already represented
   in configure.in and copy the form for your new driver.

   To be specific, put lines similar to the following in this file.
   
(Default settings for devices [not drivers])
enable_jpeg=yes
enable_png=yes
enable_cgm=yes

(Default PL_DRIVER_LIST, actually this is a misnomer should be PL_DEVICE_LIST)
add the device(s) (e.g., jpeg and png for gd.c) for your 
driver to this static list.

(Default PL_DYNAMIC_DRIVER_LIST, actually this is a misnomer should be 
PL_DYNAMIC_DEVICE_LIST)
add the device(s) (e.g., jpeg and png for gd.c) for your 
driver to this dynamic list.

(Add device driver pairs to PL_device_driver_pair_list, e.g.,

png:gd jpeg:gd

Add a stanza to 
for drv in $DYNAMIC_DRIVERS; do

e.g.,

            gd)
	    echo "png:PNG file:gd.drv:39:png" >> drivers/drivers.db
	    echo "jpeg:JPEG file:gd.drv:40:jpeg" >> drivers/drivers.db
	    ;;

Note these stanzas give the definitive sequence numbers that define the
order of the drivers presented to the user.  Care should be used to insure
the sequence numbers are the same in drivers/*.c.  (Confirmed 2002/01/18)
so there is a uniform look regardless of whether the drivers are statically
or dynamically loaded.
						
(3) ../cf/dyndrv.in

This is a fragment of the Makefile that deals with linking dynamic drivers.
The gd lines are

drivers/gd.drv : shared/gd$O
        $(SHLIB_BUILD) $@ $< @GDLIBS@ $(driverlibs)
	
where GDLIBS is the configured (see sysloc.in discussion below) library link
string required for the special library used by the gd driver.  (Note cgm
has a similar special library requirement.)

(4) ../cf/objs.in

This file has the automatically generated dependencies (including those
for gd.o and cgm.o) that are created by cd tmp; make depend

(5) ../cf/plDevs.h.in

#undef PLD_png
#undef PLD_jpeg
#undef PLD_cgm

These are turned into defines for plDevs.h by the configuration process and
setting enable_jpeg=yes, etc., above in configure.in.

(6) ../cf/plplot-test.sh.in

jpeg, png, and cgm appear in this configuration file for plplot-test.sh so
that these drivers can be used for automatic generation and testing of
non-interactive examples for various front ends.

(7) ../cf/sysloc.in

This file has scripts to find system libraries and headers.  In particular
the cgm section is programmed to find the special library and header needed
by that driver, and similarly for gd.
