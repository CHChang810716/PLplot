divert(-1)dnl
!***********************************************************************
! $Id$
! $Log$
! Revision 1.2  2000/12/24 19:02:28  airwin
! For these m4 source files remove DBLE (a poorly chosen name) and replace
! with REAL_FUN.  REAL_FUN is applied to constants and expressions that are
! surrounded by parentheses.  It gets replaced by real if single precision and
! by dble if double precision.
!
! Revision 1.1  2000/12/23 23:19:24  airwin
! Double precision handled by m4. These are the m4 source files for the *.f
! files that are compiled for examples.  m4 source is fairly close to
! old version of the *.f file, but with a header prepended, and REAL,
! implicit_none, and DBLE translated appropriately.  In particular the
! implicit_none demanded a lot of changes in these examples, and
! single-precision arguments to plplot routines were converted using
! DBLE (which translates to dble or real depending on DOUBLE).
!
! Revision 1.2  1994/05/26 19:34:19  mjl
! Inserted missing CVS Id and Log fields for all Fortran demos.  Comment
! character changed to "!" everywhere, to work well with font-lock in Lucid
! emacs (requires a small change to fortran-mode.el).
!
!
      program example06
!     =================
!
!***********************************************************************
! Uses implicit_none, REAL, and REAL_FUN from fmacs.m4.
divert(1)dnl
include(fmacs.m4)dnl
! Displays the plotter symbols for PLPOIN
      implicit_none
      integer i, j, k
      REAL x, y

      character*3 text

! Full sized page for display

      call plinit()
      call pladv(0)

      call plcol(2)

! Set up viewport and window

      call plvpor(REAL_FUN (0.1), REAL_FUN (1.0), REAL_FUN (0.1), REAL_FUN (0.9)) 
      call plwind(REAL_FUN (0.0), REAL_FUN (1.0), REAL_FUN (0.0), REAL_FUN (1.3)) 

! Draw the grid using plbox

      call plbox('bcgt', REAL_FUN (0.1), 0, 'bcgt', REAL_FUN (0.1), 0)
      call plcol(15)

! Write the digits below the frame

      do 5 i=0,9
        write (text,'(i1)') i
        call plmtex('b', REAL_FUN (1.5), REAL_FUN (0.1*i+0.05),
     &    REAL_FUN (0.5), text)
    5 continue

      k=0
      do 1 i=0,12

! Write the digits to the left of the frame

        write (text,'(i3)') 10*i
        call plmtex('lv', REAL_FUN (1.0), REAL_FUN (1.0-(2*i+1)/26.0),
     &    REAL_FUN (1.0), text)
        do 2 j=0,9
          x=0.1*j+0.05
          y=1.25-0.1*i

! Display the symbols

          if (k.lt.128) call plpoin(1,x,y,k)
          k=k+1
    2   continue
    1 continue

      call plmtex('t', REAL_FUN (1.5), REAL_FUN (0.5), REAL_FUN (0.5),
     &  'PLPLOT Example 6 - PLPOIN symbols')
      call plend
      end
