c      $Id$
c      Shade plot demo.
c      Does a variety of shade plots.
c
c      Copyright (C) 2004  Alan W. Irwin
c
c      This file is part of PLplot.
c
c      PLplot is free software; you can redistribute it and/or modify
c      it under the terms of the GNU General Library Public License as
c      published by the Free Software Foundation; either version 2 of the
c      License, or (at your option) any later version.
c
c      PLplot is distributed in the hope that it will be useful,
c      but WITHOUT ANY WARRANTY; without even the implied warranty of
c      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c      GNU Library General Public License for more details.
c
c      You should have received a copy of the GNU Library General Public
c      License along with PLplot; if not, write to the Free Software
c      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

      implicit none

      integer  xdim, ydim, XPTS, YPTS
c      xdim and ydim are the static dimensions of the 2D arrays while
c      NX and NY are the defined area.
      parameter( xdim = 99, XPTS = 35, ydim = 100, YPTS = 46 )

      integer i,  j
      real*8  xx, yy
      real*8  z(xdim, ydim), zmin, zmax

      integer PL_PARSE_FULL
      parameter(PL_PARSE_FULL = 1)
c      Process command-line arguments
      call plparseopts(PL_PARSE_FULL)

c      Set up color map 1 (but comment out because this makes
c      no difference for the current cmap0 plshade calls in plot1 and plot2.)

c      call cmap1_init2()

c      Initialize plplot

      call plinit()

c      Set up data array

      do i = 1,XPTS
        xx = dble(i-1 - (XPTS / 2)) / dble(XPTS / 2)
        do j = 1,YPTS
          yy = dble(j-1 - (YPTS / 2)) / dble(YPTS / 2) - 1.0d0
          z(i,j) = xx*xx - yy*yy + (xx - yy)/(xx*xx+yy*yy + 0.1d0)
        enddo
      enddo

      call a2mnmx(z, XPTS, YPTS, zmin, zmax, xdim)

      call plot1(z, XPTS, YPTS, zmin, zmax, xdim)
      call plot2(z, XPTS, YPTS, zmin, zmax, xdim)
      call plot3()

      call plend()
      end

c -------------------------------------------------------------------------
c      cmap1_init1
c
c      Initializes color map 1 in HLS space.
c -------------------------------------------------------------------------

      subroutine cmap1_init1()
      implicit none
      real*8   i(4), h(4), l(4), s(4)
      integer rev(4)

      i(1) = 0.0d0    ! left boundary
      i(2) = 0.45d0   ! just before center
      i(3) = 0.55d0   ! just after center
      i(4) = 1.0d0    ! right boundary

      h(1) = 260.0d0  ! hue -- low: blue-violet
      h(2) = 260.0d0  ! only change as we go over vertex
      h(3) = 20.0d0   ! hue -- high: red
      h(4) = 20.0d0   ! keep fixed


      l(1) = 0.5d0    ! lightness -- low
      l(2) = 0.0d0    ! lightness -- center
      l(3) = 0.0d0    ! lightness -- center
      l(4) = 0.5d0    ! lightness -- high

c     call plscolbg(255,255,255)
c     l(1) = 0.5d0    ! lightness -- low
c     l(2) = 1.0d0    ! lightness -- center
c     l(3) = 1.0d0    ! lightness -- center
c     l(4) = 0.5d0    ! lightness -- high

      s(1) = 1.0d0    ! maximum saturation
      s(2) = 1.0d0    ! maximum saturation
      s(3) = 1.0d0    ! maximum saturation
      s(4) = 1.0d0    ! maximum saturation

      rev(1) = 0
      rev(2) = 0
      rev(3) = 0
      rev(4) = 0

      call plscmap1l(0, 4, i, h, l, s, rev)
      end

c -------------------------------------------------------------------------
c      cmap1_init2
c
c      Initializes color map 1 in HLS space.
c -------------------------------------------------------------------------

      subroutine cmap1_init2()
      implicit none
      real*8 i(4), h(4), l(4), s(4)
      integer rev(4)

      i(1) = 0.0d0    ! left boundary
      i(2) = 0.45d0   ! just before center
      i(3) = 0.55d0   ! just after center
      i(4) = 1.0d0    ! right boundary

      h(1) = 260.0d0  ! hue -- low: blue-violet
      h(2) = 260.0d0  ! only change as we go over vertex
      h(3) = 20.0d0   ! hue -- high: red
      h(4) = 20.0d0   ! keep fixed


      l(1) = 0.6d0    ! lightness -- low
      l(2) = 0.0d0    ! lightness -- center
      l(3) = 0.0d0    ! lightness -- center
      l(4) = 0.6d0    ! lightness -- high

c     call plscolbg(255,255,255)
c     l(1) = 0.5d0    ! lightness -- low
c     l(2) = 1.0d0    ! lightness -- center
c     l(3) = 1.0d0    ! lightness -- center
c     l(4) = 0.5d0    ! lightness -- high

      s(1) = 1.0d0    ! maximum saturation
      s(2) = 0.5d0    ! maximum saturation
      s(3) = 0.5d0    ! maximum saturation
      s(4) = 1.0d0    ! maximum saturation

      rev(1) = 0
      rev(2) = 0
      rev(3) = 0
      rev(4) = 0

      call plscmap1l(0, 4, i, h, l, s, rev)
      end

c -------------------------------------------------------------------------
c      plot1
c
c      Illustrates a single shaded region.
c -------------------------------------------------------------------------

      subroutine plot1(z, XPTS, YPTS, zmin, zmax, xdim)
      implicit none

      integer xdim, XPTS, YPTS
      real*8  z(xdim,YPTS), zmin, zmax

      character*1 undefined
      real*8  shade_min, shade_max, sh_color
      integer sh_cmap, sh_width
      integer min_color, min_width, max_color, max_width

      sh_cmap   = 0
      min_color = 0
      min_width = 0
      max_color = 0
      max_width = 0

      call pladv(0)
      call plvpor( 0.1d0, 0.9d0,  0.1d0, 0.9d0)
      call plwind(-1.0d0, 1.0d0, -1.0d0, 1.0d0)

c      Plot using identity transform

      shade_min = zmin + (zmax-zmin)*0.4d0
      shade_max = zmin + (zmax-zmin)*0.6d0
      sh_color  = 7
      sh_width  = 2
      min_color = 9
      max_color = 2
      min_width = 2
      max_width = 2

      call plpsty(8)

c      Use_ plshade0 instead of plshade1 - identity mapping
      call plshade0(z, XPTS, YPTS, undefined,
     &  -1.d0, 1.d0, -1.d0, 1.d0,
     &  shade_min, shade_max,
     &  sh_cmap, sh_color, sh_width,
     &  min_color, min_width, max_color, max_width, xdim)

      call plcol0(1)
      call plbox('bcnst', 0.0d0, 0, 'bcnstv', 0.0d0, 0)
      call plcol0(2)
      call pllab('distance', 'altitude', 'Bogon flux')

      end

c -------------------------------------------------------------------------
c      plot2
c
c      Illustrates multiple adjacent shaded regions, using different fill
c      patterns for each region.
c -------------------------------------------------------------------------

      subroutine plot2(z, XPTS, YPTS, zmin, zmax, xdim)
      implicit none

      integer xdim, XPTS, YPTS
      real*8  z(xdim,YPTS), zmin, zmax

      character*1 undefined
      real*8  shade_min, shade_max, sh_color
      integer sh_cmap, sh_width
      integer min_color, min_width, max_color, max_width
      integer i,j

      integer nlin(10), inc(2,10), del(2,10)
      data nlin /1, 1, 1, 1, 1, 2, 2, 2, 2, 2/
      data ( (inc(i,j), i=1,2), j=1,10) /
     &     450, 0, -450, 0, 0, 0, 900, 0, 
     &     300, 0, 450,-450, 0, 900, 0, 450, 
     &     450, -450, 0, 900/
      data ( (del(i,j), i=1,2), j=1,10) /
     &     2000, 2000, 2000, 2000, 2000, 2000, 
     &     2000, 2000, 2000, 2000, 2000, 2000, 
     &     2000, 2000, 2000, 2000, 4000, 4000,
     &     4000, 2000/

      sh_cmap   = 0
      min_color = 0
      min_width = 0
      max_color = 0
      max_width = 0
      sh_width  = 2

      call pladv(0)
      call plvpor( 0.1d0, 0.9d0,  0.1d0, 0.9d0)
      call plwind(-1.0d0, 1.0d0, -1.0d0, 1.0d0)

c      Plot using identity transform

      do  i = 1,10
        shade_min = zmin + (zmax - zmin) * (i-1) / 10.0d0
        shade_max = zmin + (zmax - zmin) * i / 10.0d0
        sh_color = i+5
        call plpat(nlin(i),inc(1,i),del(1,i))
c        Use_ plshade0 instead of plshade1 - identity mapping
        call plshade0(z, XPTS, YPTS, undefined,
     &    -1.d0, 1.d0, -1.d0, 1.d0,
     &    shade_min, shade_max,
     &    sh_cmap, sh_color, sh_width,
     &    min_color, min_width, max_color, max_width, xdim)
      enddo

      call plcol0(1)
      call plbox('bcnst', 0.0d0, 0, 'bcnstv', 0.0d0, 0)
      call plcol0(2)
      call pllab('distance', 'altitude', 'Bogon flux')
      
      end

c--------------------------------------------------------------------------
c     plot3
c
c     Illustrates shaded regions in 3d, using a different fill pattern for 
c     each region.  
c--------------------------------------------------------------------------

      subroutine plot3
      implicit none
      real*8 xx1(5), xx2(5), yy1(5), yy2(5), zz1(5), zz2(5)
      data xx1 / -1.0d0, 1.0d0, 1.0d0, -1.0d0, -1.0d0/
      data xx2 / -1.0d0, 1.0d0, 1.0d0, -1.0d0, -1.0d0/
      data yy1 /1.0d0, 1.0d0, 0.0d0, 0.0d0, 1.0d0/
      data yy2 / -1.0d0, -1.0d0, 0.0d0, 0.0d0, -1.0d0/
      data zz1 / 0.0d0, 0.0d0, 1.0d0, 1.0d0, 0.0d0/
      data zz2 / 0.0d0, 0.0d0, 1.0d0, 1.0d0, 0.0d0/

      call pladv(0)
      call plvpor(0.1d0, 0.9d0, 0.1d0, 0.9d0)
      call plwind(-1.0d0, 1.0d0, -1.0d0, 1.0d0)
      call plw3d(1.d0, 1.d0, 1.d0, -1.0d0, 1.0d0, -1.0d0, 1.0d0, 0.0d0, 
     &     1.5d0, 30.d0, -40.d0)

c     Plot using identity transform 
    
      call plcol0(1)
      call plbox3("bntu", "X", 0.0d0, 0, "bntu", "Y", 0.0d0, 0, 
     &     "bcdfntu", "Z", 0.5d0, 0)
      call plcol0(2)
      call pllab("","","3-d polygon filling")

      call plcol0(3)
      call plpsty(1)
      call plline3(5, xx1, yy1, zz1)
      call plfill3(4, xx1, yy1, zz1)
      call plpsty(2)
      call plline3(5, xx2, yy2, zz2)
      call plfill3(4, xx2, yy2, zz2)

      end

c----------------------------------------------------------------------------
c      Subroutine a2mnmx
c      Minimum and the maximum elements of a 2-d array.

      subroutine a2mnmx(f, nx, ny, fmin, fmax, xdim)
      implicit none

      integer   i, j, nx, ny, xdim
      real*8    f(xdim, ny), fmin, fmax

      fmax = f(1, 1)
      fmin = fmax
      do j = 1, ny
        do  i = 1, nx
          fmax = max(fmax, f(i, j))
          fmin = min(fmin, f(i, j))
        enddo
      enddo
      end
