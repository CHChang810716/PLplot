c      $Id$
c
c      Copyright (C) 2004  Alan W. Irwin
c
c      This file is part of PLplot.
c
c      PLplot is free software; you can redistribute it and/or modify
c      it under the terms of the GNU Library General Public License as
c      published by the Free Software Foundation; either version 2 of the
c      License, or (at your option) any later version.
c
c      PLplot is distributed in the hope that it will be useful,
c      but WITHOUT ANY WARRANTY; without even the implied warranty of
c      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c      GNU Library General Public License for more details.
c
c      You should have received a copy of the GNU Library General Public
c      License along with PLplot; if not, write to the Free Software
c      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


c--------------------------------------------------------------------------
c      main program
c--------------------------------------------------------------------------

      program x17f
      implicit none
      integer id1, n, autoy, acc, nsteps
      parameter ( nsteps = 1000 )
      real*8 y1, y2, y3, y4, ymin, ymax, xlab, ylab
      real*8 t, tmin, tmax, tjump, dt, noise
      integer colbox, collab, colline(4), styline(4)
      character*20 legline(4)

      external plrandd
      real*8 plrandd

      include 'plplot_parameters.h'

      logical      pl_errcode
      character*80 errmsg

c      Process command-line arguments
      call plparseopts(PL_PARSE_FULL)

c      plplot initialization

c      If db is used the plot is much more smooth. However, because of the
c      async X behaviour, one does not have a real-time scripcharter.
c
c     call plsetopt('db', '')
c     call plsetopt('np', '')

c      User sets up plot completely except for window and data
c      Eventually settings in place when strip chart is created will be
c      remembered so that multiple strip charts can be used simultaneously.


c      Specify some reasonable defaults for ymin and ymax
c      The plot will grow automatically if needed (but not shrink)

      ymin = -0.1d0
      ymax = 0.1d0

c      Specify initial tmin and tmax -- this determines length of window.
c      Also specify maximum jump in t
c      This can accomodate adaptive timesteps

      tmin = 0.d0
      tmax = 10.d0
c      percentage of plot to jump
      tjump = 0.3d0

c      Axes options same as plbox.
c      Only automatic tick generation and label placement allowed
c      Eventually I'll make this fancier

      colbox = 1
      collab = 3
c      pens color and line style
      styline(1) = 2
      colline(1) = 2
      styline(2) = 3
      colline(2) = 3
      styline(3) = 4
      colline(3) = 4
      styline(4) = 5
      colline(4) = 5

c      pens legend
      legline(1) = 'sum'
      legline(2) = 'sin'
      legline(3) = 'sin*noi'
      legline(4) = 'sin+noi'

c      legend position
      xlab = 0.d0
      ylab = 0.25d0

c      autoscale y
      autoy = 1
c      don't scrip, accumulate
      acc = 1

c      Initialize plplot

      call plinit()

      call pladv(0)
      call plvsta()

c      Register our error variables with PLplot
c      From here on, we're handling all errors here

c      TODO: call plsError(&pl_errcode, errmsg)

      call plstripc(id1, 'bcnst', 'bcnstv',
     &  tmin, tmax, tjump, ymin, ymax,
     &  xlab, ylab,
     &  autoy, acc,
     &  colbox, collab,
     &  colline, styline, legline,
     &  't', '', 'Strip chart demo')

      pl_errcode = .false.
      if ( pl_errcode ) then
        write(*,*) errmsg
        stop
      endif

c      Let plplot handle errors from here on

c      TODO: call plsError(NULL, NULL)

c      autoscale y
      autoy = 0
c      accumulate
      acc = 1

c      This is to represent a loop over time
c      Let's try a random walk process

      y1 = 0.0d0
      y2 = 0.0d0
      y3 = 0.0d0
      y4 = 0.0d0
      dt = 0.1d0

      do n = 0,nsteps-1
c        wait a little (10 ms) to simulate time elapsing.
c        g77 sleep has resolution of 1 sec so the call below is commented out
c        because it is like watching paint dry.  In any case,
c        I like the resulting speedier output when
c        you drop sleep altogether from this loop.
c        call sleep(1)

        t = dble(n) * dt
        noise = plrandd() - 0.5d0
        y1 = y1 + noise
        y2 = sin(t*PI/18.d0)
        y3 = y2 * noise
        y4 = y2 + noise/3.d0

c        There is no need for all pens to have the same number of
c        points or beeing equally time spaced.

        if ( mod(n,2) .ne. 0 ) then
          call plstripa(id1, 0, t, y1)
        endif
        if ( mod(n,3) .ne. 0 ) then
          call plstripa(id1, 1, t, y2)
        endif
        if ( mod(n,4) .ne. 0 ) then
          call plstripa(id1, 2, t, y3)
        endif
        if ( mod(n,5) .ne. 0 ) then
          call plstripa(id1, 3, t, y4)
        endif
c        use_ double buffer (-db on command line)
c       call pleop()
      enddo

c      Destroy strip chart and it's memory

      call plstripd(id1)
      call plend()
      end
