

!--------------------------------------------------------------------------
! main
!
! Does a series of 3-d plots for a given data set, with different
! viewing options in each plot.
!--------------------------------------------------------------------------

      program x18f
      implicit none

      real*8 pi
      parameter ( pi     = 3.1415926535897932384 )
      integer NPTS
      parameter ( NPTS = 1000 )

      integer i, j, k
      real*8    x(NPTS), y(NPTS), z(NPTS)
      real*8    r
      character*80 title

      integer opt(4)
      real*8    alt(4)
      real*8    az(4)
      data opt /    1,    0,    1,    0 /
      data alt / 20.0, 35.0, 50.0, 65.0 /
      data az  / 30.0, 40.0, 50.0, 60.0 /

! Parse and process command line arguments

      ! TODO: plParseOpts()

! Initialize plplot

      call plinit()

      do 110 k = 1, 4
         call test_poly(k, alt(k), az(k))
  110 continue

! From the mind of a sick and twisted physicist...

      do 120 i = 1,NPTS
         z(i) = -1. + 2. * dble (i-1) / dble (NPTS)

! Pick one ...

!        r = 1. - dble (i-1) / dble (NPTS)
         r = z(i)

         x(i) = r * cos( 2. * PI * 6. * dble (i-1) / dble (NPTS) )
         y(i) = r * sin( 2. * PI * 6. * dble (i-1) / dble (NPTS) )
  120 continue

      do 130 k = 1, 4
         call pladv(0)
         call plvpor(dble (0.0),  dble (1.0), dble (0.0),
     &               dble (0.9))
         call plwind(dble (-1.0), dble (1.0), dble (-0.9),
     &               dble (1.1))
         call plcol0(1)
         call plw3d(dble (1.0),  dble (1.0),  dble (1.0),
     &              dble (-1.0), dble (1.0),  dble (-1.0),
     &              dble (1.0),  dble (-1.0), dble (1.0),
     &              alt(k), az(k))
         call plbox3('bnstu', 'x axis', dble (0.0), 0,
     &               'bnstu', 'y axis', dble (0.0), 0,
     &               'bcdmnstuv', 'z axis', dble (0.0), 0)

         call plcol0(2)

         if ( opt(k).gt. 0 ) then
            call plline3( NPTS, x, y, z )
         else
            call plpoin3( NPTS, x, y, z, 1 )
         endif

         call plcol0(3)
         write( title,
     &   '(''#frPLplot Example 18 - Alt='',f10.0,''Az='',f10.0)' )
     &       alt(k), az(k)
         call plmtex('t', dble (1.0), dble (0.5), dble (0.5),
     &           title)
  130 continue

      call plend()
      stop
      end

      subroutine test_poly(k, alt, az)
      implicit none
      integer k
      real*8 alt, az

      real*8 x(5), y(5), z(5)
      integer i, j
      real*8 pi, two_pi
      parameter ( pi     = 3.1415926535897932384 )
      parameter ( two_pi = 2.0*pi                )
      real*8 draw(4,4)
      DATA draw /
     &      1, 1, 1, 1,
     &      1, 0, 1, 0,
     &      0, 1, 0, 1,
     &      1, 1, 0, 0 /
      real*8 theta, phi, a
      THETA(a) = (two_pi * (a) /20.)
      PHI(a)   = (pi * (a) / 20.1)

      call pladv(0)
      call plvpor(dble (0.0),  dble (1.0), dble (0.0),  dble (0.9))
      call plwind(dble (-1.0), dble (1.0), dble (-0.9), dble (1.1))
      call plcol0(1)
      call plw3d(dble (1.0),  dble (1.0),  dble (1.0),
     &           dble (-1.0), dble (1.0),  dble (-1.0),
     &           dble (1.0),  dble (-1.0), dble (1.0),
     &           alt, az)
      call plbox3('bnstu', 'x axis', dble (0.0), 0,
     &            'bnstu', 'y axis', dble (0.0), 0,
     &            'bcdmnstuv', 'z axis', dble (0.0), 0)

      call plcol0(2)


!
!  x = r sin(phi) cos(theta)
!  y = r sin(phi) sin(theta)
!  z = r cos(phi)
!  r = 1 :=)
!/

      do 120 i=1,20
         do 110 j=1,20
            x(1) = sin( PHI(j) ) * cos( THETA(i) )
            y(1) = sin( PHI(j) ) * sin( THETA(i) )
            z(1) = cos( PHI(j) )

            x(2) = sin( PHI(j+1) ) * cos( THETA(i) )
            y(2) = sin( PHI(j+1) ) * sin( THETA(i) )
            z(2) = cos( PHI(j+1) )

            x(3) = sin( PHI(j+1) ) * cos( THETA(i+1) )
            y(3) = sin( PHI(j+1) ) * sin( THETA(i+1) )
            z(3) = cos( PHI(j+1) )

            x(4) = sin( PHI(j) ) * cos( THETA(i+1) )
            y(4) = sin( PHI(j) ) * sin( THETA(i+1) )
            z(4) = cos( PHI(j) )

            x(5) = sin( PHI(j) ) * cos( THETA(i) )
            y(5) = sin( PHI(j) ) * sin( THETA(i) )
            z(5) = cos( PHI(j) )

            call plpoly3( 5, x, y, z, draw(1,k), 1 )
  110    continue
  120 continue

      call plcol0(3)
      call plmtex('t', dble (1.0), dble (0.5), dble (0.5),
     &        'unit radius sphere' )
      return
      end

      real function PHI( j )

      implicit none
      real*8 pi, two_pi
      parameter ( pi     = 3.1415926535897932384 )
      parameter ( two_pi = 2.0*pi                )

      integer j

      PHI = pi * (j-1) / 20.1
      return
      end

      real function THETA( j )

      implicit none
      real*8 pi, two_pi
      parameter ( pi     = 3.1415926535897932384 )
      parameter ( two_pi = 2.0*pi                )

      integer j

      THETA = two_pi * (j-1) / 20.0
      return
      end
