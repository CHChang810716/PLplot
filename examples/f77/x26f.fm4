c  -*- coding: utf-8; -*-
c
c  $Id$
c
c  Multi-lingual version of the first page of example 4.
c
c  Copyright (C) 2006 Alan Irwin
c  Copyright (C) 2006 Andrew Ross
c
c  Thanks to the following for providing translated strings for this example:
c  Valery Pipin (Russian)
c
c  This file is part of PLplot.
c
c  PLplot is free software; you can redistribute it and/or modify
c  it under the terms of the GNU General Library Public License as published
c  by the Free Software Foundation; either version 2 of the License, or
c  (at your option) any later version.
c
c  PLplot is distributed in the hope that it will be useful,
c  but WITHOUT ANY WARRANTY; without even the implied warranty of
c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c  GNU Library General Public License for more details.
c
c  You should have received a copy of the GNU Library General Public License
c  along with PLplot; if not, write to the Free Software
c  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
c
c

c
c This example designed just for devices (e.g., psttfc and the
c cairo-related devices) that utilise the pango and fontconfig libraries. The
c best choice of glyph is selected by fontconfig and automatically rendered
c by pango in way that is sensitive to complex text layout (CTL) language
c issues for each unicode character in this example. Of course, you must
c have the appropriate TrueType fonts installed to have access to all the
c required glyphs.
c
c Translation instructions: The strings to be translated are given by
c x_label, y_label, alty_label, title_label, and line_label below.  The
c encoding used must be UTF-8.
c
c The following strings to be translated involve some scientific/mathematical
c jargon which is now discussed further to help translators.
c
c (1) dB is a decibel unit, see http://en.wikipedia.org/wiki/Decibel .
c (2) degrees is an angular measure, see
c     http://en.wikipedia.org/wiki/Degree_(angle) .
c (3) low-pass filter is one that transmits (passes) low frequencies.
c (4) pole is in the mathematical sense, see
c     http://en.wikipedia.org/wiki/Pole_(complex_analysis) .  "Single Pole"
c     means a particular mathematical transformation of the filter function has
c     a single pole, see
c     http://ccrma.stanford.edu/~jos/filters/Pole_Zero_Analysis_I.html .
c     Furthermore, a single-pole filter must have an inverse square decline
c     (or -20 db/decade). Since the filter plotted here does have that
c     characteristic, it must by definition be a single-pole filter, see also
c     http://www-k.ext.ti.com/SRVS/Data/ti/KnowledgeBases/analog/document/faqs/1p.htm
c (5) decade represents a factor of 10, see
c     http://en.wikipedia.org/wiki/Decade_(log_scale) .
c
c
c

c --------------------------------------------------------------------------
c  main
c
c  Illustration of logarithmic axes, and redefinition of window.
c --------------------------------------------------------------------------

      program x26f

      implicit none

      include 'plplot_parameters.h'

      integer      nolangs
      parameter  ( nolangs = 2 )

      character*80 x_label(nolangs)
      character*80 y_label(nolangs)
      character*80 alty_label(nolangs)
      character*80 title_label(nolangs)
      character*80 line_label(nolangs)

      integer      i

      data (x_label(i) ,i=1,nolangs) /
     &    'Frequency',
     &    'Частота'/

      data (y_label(i) ,i=1,nolangs) /
     &    'Amplitude (dB)',
     &    'Амплитуда (dB)'/

      data (alty_label(i) ,i=1,nolangs) /
     &    'Phase shift (degrees)',
     &    'Фазовый сдвиг (градусы)'/

      data (title_label(i) ,i=1,nolangs) /
     &    'Single Pole Low-Pass Filter',
     &    'Однополюсный Низко-Частотный Фил
     &ьтр'/

      data (line_label(i) ,i=1,nolangs) /
     &     '-20 dB/decade',
     &     '-20 dB/десяток'/

c  Parse and process command line arguments

      call plparseopts(PL_PARSE_FULL)

c  Initialize plplot

      call plinit()
      call plfont(2)

c  Make log plots using two different styles.

      do 110 i = 1,nolangs
          call plot1(0, x_label(i), y_label(i), alty_label(i),
     &               title_label(i), line_label(i))
  110 continue

      call plend()
      end

c --------------------------------------------------------------------------
c  plot1
c
c  Log-linear plot.
c --------------------------------------------------------------------------

      subroutine plot1( type, x_label, y_label, alty_label,
     &                  title_label, line_label )

      implicit none

      integer type
      character(*) x_label, y_label, alty_label, title_label, line_label

      integer i
      real*8  freql(101), ampl(101), phase(101)
      real*8  f0, freq

      integer      nlegend
      integer      opt_array(2)
      integer      text_colors(2)
      integer      line_colors(2)
      integer      line_styles(2)
      integer      line_widths(2)
      integer      symbol_numbers(2), symbol_colors(2)
      real*8       symbol_scales(2)
      character*20 symbols(2)
      integer      box_colors(1), box_patterns(1), box_scales(1)
      real*8       box_line_widths(1)
      real*8       legend_width, legend_height
      character*40 legend_text(2,2)

      data nlegend / 2 /

c Short rearranged versions of y_label and alty_label.
      data legend_text /
     &    'Amplitude',          'Phase shift'               ,
     &    'Амплитуда', 'Фазовый сдвиг' /

      include 'plplot_parameters.h'

      call pladv(0)

c  Set up data for log plot

      f0 = 1.0
      do 110 i = 1,101
          freql(i) = -2.0d0 + (i-1) / 20.0d0
          freq     = 10.0d0 ** freql(i)
          ampl(i)  = 20.0d0 * log10(1.0d0 / sqrt(1.0d0 + (freq/f0)**2))
          phase(i) = -(180.0d0 / PI) * atan(freq / f0)
  110 continue

      call plvpor(0.15d0, 0.85d0, 0.1d0, 0.9d0)
      call plwind(-2.0d0, 3.0d0, -80.0d0, 0.0d0)

c  Try different axis and labelling styles.

      call plcol0(1)
      if ( type .eq. 0 ) then
          call plbox("bclnst", 0.0d0, 0, "bnstv", 0.0d0, 0)
      endif
      if ( type .eq. 1 ) then
          call plbox("bcfghlnst", 0.0d0, 0, "bcghnstv", 0.0d0, 0)
      endif

c  Plot ampl vs freq

      call plcol0(2)
      call plline(101, freql, ampl)
      call plcol0(1)
      call plptex(1.6d0, -30.0d0, 1.0d0, -20.0d0, 0.5d0, line_label)

c  Put labels on

      call plcol0(1)
      call plmtex("b", 3.2d0, 0.5d0, 0.5d0, x_label)
      call plmtex("t", 2.0d0, 0.5d0, 0.5d0, title_label)
      call plcol0(2)
      call plmtex("l", 5.0d0, 0.5d0, 0.5d0, y_label)

c  For the gridless case, put phase vs freq on same plot

      if (type .eq. 0) then
          call plcol0(1)
          call plwind(-2.0d0, 3.0d0, -100.0d0, 0.0d0)
          call plbox("", 0.0d0, 0, "cmstv", 30.0d0, 3)
          call plcol0(3)
          call plline(101, freql, phase)
          call plstring(101, freql, phase, '*')
          call plcol0(3)
          call plmtex("r", 5.0d0, 0.5d0, 0.5d0, alty_label)
      endif

c  Draw a legend
c     First legend entry.

      nlegend        = 2
      opt_array(1)   = PL_LEGEND_LINE
      text_colors(1) = 2
      line_colors(1) = 2
      line_styles(1) = 1
      line_widths(1) = 1

c     note from the above opt_array the first symbol (and box) indices
c     do not have to be specified

c     Second legend entry.

      opt_array(2)      = PL_LEGEND_LINE + PL_LEGEND_SYMBOL
      text_colors(2)    = 3
      line_colors(2)    = 3
      line_styles(2)    = 1
      line_widths(2)    = 1
      symbol_colors(2)  = 3
      symbol_scales(2)  = 1.
      symbol_numbers(2) = 4
      symbols(2)        = "*"

c     from the above opt_arrays we can completely ignore everything
c     to do with boxes.

      call plscol0a( 15, 32, 32, 32, 0.70d0 )
      call pllegend( legend_width, legend_height,
     &    0, PL_LEGEND_BACKGROUND + PL_LEGEND_BOUNDING_BOX,
     &    0.0d0, 0.0d0, 0.10d0, 15,
     &    1, 1, 0, 0,
     &    nlegend, opt_array,
     &    1.0d0, 1.0d0, 2.0d0,
     &    1.0d0, text_colors, legend_text,
     &    box_colors, box_patterns, box_scales, box_line_widths,
     &    line_colors, line_styles, line_widths,
     &    symbol_colors, symbol_scales, symbol_numbers, symbols )

      end
