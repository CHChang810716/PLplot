c  $Id$
c
c   Alpha color values demonstration
c
c   Copyright (C) 2008 Hazen Babcock
c   Copyright (C) 2008 Andrew Ross
c
c   This file is part of PLplot.
c
c   PLplot is free software; you can redistribute it and/or modify
c   it under the terms of the GNU Library General Public License as
c   published by the Free Software Foundation; either version 2 of the
c   License, or (at your option) any later version.
c
c   PLplot is distributed in the hope that it will be useful,
c   but WITHOUT ANY WARRANTY; without even the implied warranty of
c   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
c   GNU Library General Public License for more details.
c
c   You should have received a copy of the GNU Library General Public
c   License along with PLplot; if not, write to the Free Software
c   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
c

      program x30f

      implicit none
      include 'plplot_parameters.h'

      integer red(4), green(4), blue(4)
      real*8 alpha(4), px(4), py(4)
      real*8 pos(2), rcoord(2), gcoord(2), bcoord(2), acoord(2)
      logical rev(2)

      data red   / 0, 255, 0, 0 /
      data green / 0, 0, 255, 0 /
      data blue  / 0, 0, 0, 255 /
      data alpha / 1.0d0, 1.0d0, 1.0d0, 1.0d0 /
      data px / 0.1d0, 0.5d0, 0.5d0, 0.1d0 /
      data py / 0.1d0, 0.1d0, 0.5d0, 0.5d0 /
      data pos / 0.0d0, 1.0d0 / 
      data rcoord / 1.0d0, 1.0d0 / 
      data gcoord / 0.0d0, 0.0d0 / 
      data bcoord / 0.0d0, 0.0d0 / 
      data acoord / 0.0d0, 1.0d0 /
      data rev / .false. , .false. /

      integer i, j
      integer icol, r, g, b
      real*8 a

      character*1 defined

      call plparseopts(PL_PARSE_FULL)

      call plinit()

      call plscmap0n(4)

      call plscmap0a (red, green, blue, alpha, 4)

c 
c     Page 1:
c
c     This is a series of red, green and blue rectangles overlaid
c     on each other with gradually increasing transparency.
c

c     Set up the window
      call pladv (0)
      call plvpor (0.0d0, 1.0d0, 0.0d0, 1.0d0)
      call plwind (0.0d0, 1.0d0, 0.0d0, 1.0d0)
      call plcol0 (0)
      call plbox ("", 1.0d0, 0, "", 1.0d0, 0)

c     Draw the boxes 
      do i = 1,9
         icol = mod(i-1,3) + 1
      
c     Get a color, change its transparency and 
c     set it as the current color.
         call plgcol0a (icol, r, g, b, a)
         call plscol0a (icol, r, g, b, 1.0d0 - dble(i-1)/9.0d0)
         call plcol0 (icol)
         
c     Draw the rectangle
         call plfill (4, px, py)

c     Shift the rectangles coordinates
         do j = 1,4
            px(j) = px(j) + 0.5d0/9.0d0
            py(j) = py(j) + 0.5d0/9.0d0
         enddo
      enddo
c
c     Page 2:
c
c     This is a bunch of boxes colored red, green or blue with a single 
c     large (red) box of linearly varying transparency overlaid. The
c     overlaid box is completely transparent at the bottom and completely
c     opaque at the top.
c     

c     Set up the window
      call pladv(0)
      call plvpor(0.1d0, 0.9d0, 0.1d0, 0.9d0)
      call plwind(0.0d0, 1.0d0, 0.0d0, 1.0d0)

c     Draw the boxes. There are 25 of them drawn on a 5 x 5 grid.
      do i = 1,5
c     Set box X position
         px(1) = 0.05d0 + 0.2d0 * dble(i-1)
         px(2) = px(1) + 0.1d0
         px(3) = px(2)
         px(4) = px(1)

c     We don't want the boxes to be transparent, so since we changed
c     the colors transparencies in the first example we have to change
c     the transparencies back to completely opaque.
         icol = mod(i-1,3) + 1
         call plgcol0a (icol, r, g, b, a)
         call plscol0a (icol, r, g, b, 1.0d0)
         call plcol0 (icol)
         do j = 1, 5
c     Set box y position and draw the box.
            py(1) = 0.05d0 + 0.2d0 * dble(j-1)
            py(2) = py(1)
            py(3) = py(1) + 0.1d0
            py(4) = py(3)
            call plfill(4, px, py)
         enddo
      enddo

c     Create the color map with 128 colors and call plscmap1la to initialize
c     the color values with a linearly varying red transparency (or alpha)
      call plscmap1n(128)
      call plscmap1la(1, 2, pos, rcoord, gcoord, bcoord, acoord, rev)

c     Use that cmap1 to create a transparent red gradient for the whole
c     window.
      px(1) = 0.d0
      px(2) = 1.d0
      px(3) = 1.d0
      px(4) = 0.d0

      py(1) = 0.d0
      py(2) = 0.d0
      py(3) = 1.d0
      py(4) = 1.d0

      call plgradient( 4, px, py, 90.d0 )

      call plend()
      end

