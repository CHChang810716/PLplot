The Status of the Python Examples

I (Alan W. Irwin) could never get pytkdemo (which calls all the old x??.py
examples) to work on Linux.  I therefore made some new stand-alone
widgetless examples xw??.py (note the different name than x??.py) that do
work under Linux.  The xw??.py files were made from the corresponding x??.py
file, but with the w argument (required for widgets) removed, plinit and
plend inserted, the correct modules loaded, and several bugs elminated.
With the new recommended method of creating and installing the dynamically
loadable python plplot module, plmodule.so (which now occurs by default)
these xw??.py examples all work under Linux. To try out these examples,
simply type their names (or if python is not located in the standard place
[/usr/bin/python]) then type "python xw01.py", etc.  See note below
on the PYTHONPATH and LD_LIBRARY_PATH variables that may have to be set

All these xw??.py examples should also work under Unix systems according to
the python team comments on dynamic loading, but that is yet to be tested
as of 2001 January 7.

Eventually, we also plan to get pytkdemo (and tutor.py and xtkpy?) working
for the default dynamic loading method, but the core group doesn't currently
have the python skills to do this.  If anybody can make some variation of
pytkdemo work, please get in touch with Alan W. Irwin
(irwin@beluga.phys.uvic.ca).  Note there are some obvious bugs in some of
the x??.py demos, and to sort these out, inspect the equivalent xw??.py
demo. In all cases the xw??.py demos have been thoroughly debugged (albeit
without the "w" arguments that are absolutely necessary to get the widget
x??.py examples to work.)

PYTHONPATH and LD_LIBRARY_PATH variables

There are two situations:

(1) The first case is you are just testing it out without installing. In
order to get dynamic loads to work when plmodule.so and libplplot are in tmp
and not installed, you have to set PYTHONPATH to tmp (that allows python to
find plmodule.so) and either be in tmp (RPATH refers to the ./ directory) or
set LD_LIBRARY_PATH to tmp.  If either of these two latter conditions are
met that allows plmodule.so to find libplplot.  These last conditions are
the same for all C, fortran, etc., examples in tmp so you are probably
already familiar with them.

(2) Once you install, You can point PYTHONPATH to the directory where
plmodule.so was installed, or better yet put in a symlink from the python
directory where python expects to find its dynamic modules. The install
takes this latter course.  If that symlink works, you won't need PYTHONPATH.
If it doesn't work, the install warns you.  (Which probably meant you didn't
have root privilege during install or else there was some configuration
screwup in finding the correct place where python expects to find its
dynamic modules.) To check the correct place for the symlink, inspect
tmp/python_dynamic/Makefile (a file generated from a copy of Makefile.pre.in
that is supplied by your python system) which should have the correct
*python* install location. (However, I don't use the make install
possibility in that directory because it copies plmodule.so to the *python*
install location, and I much prefer putting a symlink at that location to
the *plplot* install location for plmodule.so.) Note, the installed version
of plmodule.so knows where the libplplot library is installed so that means
you don't need LD_LIBRARY_PATH (just as with the other installed programmes
and examples.)
