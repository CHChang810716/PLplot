#!@SH_EXECUTABLE@
# -*- mode: shell-script -*-
# $Id$
#
# Copyright (C) 2009 Alan W. Irwin
#
# This file is part of PLplot.
#
# PLplot is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Library Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PLplot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with PLplot; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# Test suite of PLplot interactive stuff that cannot be tested with
# file output device drivers.

EXAMPLES_DIR=${EXAMPLES_DIR:-.}
SRC_EXAMPLES_DIR=${SRC_EXAMPLES_DIR:-.}

usage()
{
echo '
Usage: plplot-test-interactive.sh [OPTIONS]

Options:
   [--device=DEVICES_LIST] 
       where DEVICES_LIST is one of more devices specified as a
       blank-delimited string (e.g., --device=xwin or
       --device="qtwidget extqt").  Note each specified device must be
       taken from the following list of eligible interactive devices:

       xwin, tk, xcairo, gcw, wxwidgets, qtwidget, extcairo or extqt.

   [--help]

Environment variables:
   DEVICES_LIST can be used to specify the device(s).
   This environment variable is overridden by the option --device.

N.B. All members of DEVICES_LIST (whether specified by the
DEVICES_LIST environment variable or by the --device option _must_ be
configured.  If neither the environment variable or --device option is
specified, then every _configured_ device from the above list is used.
'
   exit $1
}

# Figure out what script options were specified by the user.

while test $# -gt 0; do
   if [ "@HAVE_BASH@" = "ON" ] ; then
      case "$1" in
      -*=*) optarg=${1#*=} ;;
      *) optarg= ;;
      esac
   else
      case "$1" in
      -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
      *) optarg= ;;
      esac
   fi

   case $1 in
      --device=*)
         DEVICES_LIST=$optarg
	 ;;
      --help)
         usage 0 1>&2
         ;;
      *)
         usage 1 1>&2
         ;;
   esac
   shift
done

# This script is only designed to work when EXAMPLES_DIR is a directory
# with a subdirectory called "c".  Check whether this conditions is true.
if [ ! -d "$EXAMPLES_DIR"/c ] ; then
    echo '
This script is only designed to work when the EXAMPLES_DIR environment
variable (overridden by option --examples-dir) is a directory with a
subdirectory called "c".  This condition has been violated.
'
    exit 1
fi

# Set up interactive and/or external devices that are used for tests.
# Cannot use loop for this because of configuration.

PLD_xwin=@PLD_xwin@
PLD_tk=@PLD_tk@
PLD_xcairo=@PLD_xcairo@
PLD_gcw=@PLD_gcw@
PLD_wxwidgets=@PLD_wxwidgets@
PLD_qtwidget=@PLD_qtwidget@
PLD_extcairo=@PLD_extcairo@
PLD_extqt=@PLD_extqt@

# These blank-delimited strings must be consistent with previous configured
# list of devices.
POSSIBLE_INTERACTIVE_DEVICES_LIST="xwin tk xcairo gcw wxwidgets qtwidget"
POSSIBLE_DEVICES_LIST="$POSSIBLE_INTERACTIVE_DEVICES_LIST extcairo extqt"

# Default DEVICES_LIST is all eligible devices if environment variable
# not specified and --devices option not specified.
if [ -z "$DEVICES_LIST" ] ; then
    DEVICES_LIST=
    for device in $POSSIBLE_DEVICES_LIST ; do
	eval pld_device='$'PLD_$device
	test "$pld_device" = "ON" && DEVICES_LIST="$DEVICES_LIST $device"
    done
fi

# Check that everything in DEVICES_LIST is a configured  device.
for device in $DEVICES_LIST ; do
    eval pld_device='$'PLD_$device
    if [ ! "$pld_device" = "ON" ] ; then
	echo "$device is either not configured or not used for interactive tests."
	usage 1 1>&2 
    fi
done

# Turn off all devices not mentioned in DEVICES_LIST.
for device in $POSSIBLE_DEVICES_LIST ; do
    eval "PLD_$device=OFF"
done

for device in $DEVICES_LIST ; do
    eval "PLD_$device=ON"
done

INTERACTIVE_DEVICES_LIST=
for device in $POSSIBLE_INTERACTIVE_DEVICES_LIST ; do
    eval pld_device='$'PLD_$device
    test "$pld_device" = "ON" && \
	INTERACTIVE_DEVICES_LIST="$INTERACTIVE_DEVICES_LIST $device"
done

OVERALL_STATUS_CODE=0
INDEX_LIST="01 04 08 14 16 17 23"
for device in $INTERACTIVE_DEVICES_LIST ; do
    for index in $INDEX_LIST ; do
	echo "${EXAMPLES_DIR}/c/x${index}c -dev $device"
	"${EXAMPLES_DIR}"/c/x${index}c -dev $device 2> test.error
	# Look for any status codes (segfaults, plexit) from the examples themselves
	status_code=$?
	if [ "$status_code" -ne 0 ] ; then
            echo "ERROR indicated by status code = $status_code for c/x${index}c -dev $device"
	    OVERALL_STATUS_CODE=$status_code
	fi
	cat test.error
	# Look for any PLPLOT ERROR messages from plwarn that do not result in an exit code.
	is_error=`grep -l 'PLPLOT ERROR' test.error`
	if [ -n "$is_error" ] ; then
            echo "ERROR indicated by 'PLPLOT ERROR' in stderr for c/x${index}c -dev $device" 
	    OVERALL_STATUS_CODE=1
	fi
    done
done

INDEX_LIST=
COUNT=0
if [ "@PLD_xcairo@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./extXdrawable_demo"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@PLD_extcairo@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./ext-cairo-test"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_wxwidgets@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c++"
    COMMAND[$COUNT]="./wxPLplotDemo"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@PLD_extqt@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c++"
    COMMAND[$COUNT]="./qt_example"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_gnome2@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./plplotcanvas_demo"
    COUNT=$(( $COUNT + 1 ))

    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./plplotcanvas_animation"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_pygcw@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${SRC_EXAMPLES_DIR}/python"
    COMMAND[$COUNT]="./plplotcanvas_demo.py"
    COUNT=$(( $COUNT + 1 ))

    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${SRC_EXAMPLES_DIR}/python"
    COMMAND[$COUNT]="./plplotcanvas_animation.py"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_tk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk01 -f tk01"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_itk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk02 -f tk02"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_tk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="plserver -f tk03"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_itk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk04 -f tk04"
    COUNT=$(( $COUNT + 1 ))
fi

# execute all interactive commands set up by previous stanzas.
for index in $INDEX_LIST ; do
    pushd ${DIRECTORY[$index]}
    echo "${COMMAND[$index]}"
    ${COMMAND[$index]} 2> test.error
    # Look for any status codes (segfaults, plexit) from the examples themselves
    status_code=$?
    if [ "$status_code" -ne 0 ] ; then
        echo "ERROR indicated by status code = $status_code for ${COMMAND[$index]}"
	OVERALL_STATUS_CODE=$status_code
    fi
    cat test.error
    # Look for any PLPLOT ERROR messages from plwarn that do not result in an exit code.
    is_error=`grep -l 'PLPLOT ERROR' test.error`
    if [ -n "$is_error" ] ; then
        echo "ERROR indicated by 'PLPLOT ERROR' in stderr for ${COMMAND[$index]}" 
	OVERALL_STATUS_CODE=1
    fi
    popd
done

if [ "@ENABLE_tk@" = "ON" ] ; then
    cd "${SRC_EXAMPLES_DIR}"/tcl
    plserver <<EOF
plstdwin .
plxframe .plw
pack append . .plw {left expand fill}
source plgrid.tcl
proc 1 {} "plgrid .plw.plwin"
1
exit
EOF
    cd "${EXAMPLES_DIR}"/tk
    pwd
# Drop 14 because multiple devices do not seem to work in this context.
# Drop 31 since it produces empty plot (by design).
    plserver <<EOF
source tkdemos.tcl
1
2
3
4
5
6
7
8
9
10
11
12
13
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
exit
EOF
fi
if [ "$OVERALL_STATUS_CODE" -ne 0 ] ; then
    echo "A major error occurred for one of the interactive examples"
else
    echo "All interactive tests completed without major errors"
fi
exit $OVERALL_STATUS_CODE
