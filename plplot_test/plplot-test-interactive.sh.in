#!@SH_EXECUTABLE@
# Test suite of PLplot interactive stuff that cannot be tested with
# file output device drivers.
EXAMPLES_DIR=${EXAMPLES_DIR:-.}
SRC_EXAMPLES_DIR=${SRC_EXAMPLES_DIR:-.}

# This script is only designed to work when EXAMPLES_DIR is a directory
# with a subdirectory called "c".  Check whether this conditions is true.

if [ ! -d $EXAMPLES_DIR/c ] ; then
echo '
This script is only designed to work when the EXAMPLES_DIR environment
variable (overridden by option --examples-dir) is a directory with a
subdirectory called "c".  This condition has been violated.
'
exit 1
fi

OVERALL_STATUS_CODE=0
INDEX_LIST="01 04 08 14 16 17 23"
DEVICE_LIST=
if [ "@PLD_xwin@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST xwin"
fi

if [ "@PLD_tk@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST tk"
fi

if [ "@PLD_xcairo@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST xcairo"
fi

if [ "@PLD_gcw@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST gcw"
fi

if [ "@PLD_wxwidgets@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST wxwidgets"
fi

if [ "@PLD_qtwidget@" = "ON" ] ; then
    DEVICE_LIST="$DEVICE_LIST qtwidget"
fi

for device in $DEVICE_LIST ; do
    for index in $INDEX_LIST ; do
	echo "${EXAMPLES_DIR}/c/x${index}c -dev $device"
	${EXAMPLES_DIR}/c/x${index}c -dev $device 2> test.error
	# Look for any status codes (segfaults, plexit) from the examples themselves
	status_code=$?
	if [ "$status_code" -ne 0 ] ; then
            echo "ERROR indicated by status code = $status_code for c/x${index}c -dev $device"
	    OVERALL_STATUS_CODE=$status_code
	fi
	cat test.error
	# Look for any PLPLOT ERROR messages from plwarn that do not result in an exit code.
	is_error=`grep -l 'PLPLOT ERROR' test.error`
	if [ -n "$is_error" ] ; then
            echo "ERROR indicated by 'PLPLOT ERROR' in stderr for c/x${index}c -dev $device" 
	    OVERALL_STATUS_CODE=1
	fi
    done
done

INDEX_LIST=
COUNT=0
if [ "@PLD_xcairo@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./extXdrawable_demo"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@PLD_extcairo@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./ext-cairo-test"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_wxwidgets@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c++"
    COMMAND[$COUNT]="./wxPLplotDemo"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@PLD_extqt@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c++"
    COMMAND[$COUNT]="./qt_example"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_gnome2@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./plplotcanvas_demo"
    COUNT=$(( $COUNT + 1 ))

    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/c"
    COMMAND[$COUNT]="./plplotcanvas_animation"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_pygcw@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${SRC_EXAMPLES_DIR}/python"
    COMMAND[$COUNT]="./plplotcanvas_demo.py"
    COUNT=$(( $COUNT + 1 ))

    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${SRC_EXAMPLES_DIR}/python"
    COMMAND[$COUNT]="./plplotcanvas_animation.py"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_tk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk01 -f tk01"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_itk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk02 -f tk02"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_tk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="plserver -f tk03"
    COUNT=$(( $COUNT + 1 ))
fi

if [ "@ENABLE_itk@" = "ON" ] ; then
    INDEX_LIST="$INDEX_LIST $COUNT"
    DIRECTORY[$COUNT]="${EXAMPLES_DIR}/tk"
    COMMAND[$COUNT]="./xtk04 -f tk04"
    COUNT=$(( $COUNT + 1 ))
fi

# execute all interactive commands set up by previous stanzas.
for index in $INDEX_LIST ; do
    pushd ${DIRECTORY[$index]}
    echo "${COMMAND[$index]}"
    ${COMMAND[$index]} 2> test.error
    # Look for any status codes (segfaults, plexit) from the examples themselves
    status_code=$?
    if [ "$status_code" -ne 0 ] ; then
        echo "ERROR indicated by status code = $status_code for ${COMMAND[$index]}"
	OVERALL_STATUS_CODE=$status_code
    fi
    cat test.error
    # Look for any PLPLOT ERROR messages from plwarn that do not result in an exit code.
    is_error=`grep -l 'PLPLOT ERROR' test.error`
    if [ -n "$is_error" ] ; then
        echo "ERROR indicated by 'PLPLOT ERROR' in stderr for ${COMMAND[$index]}" 
	OVERALL_STATUS_CODE=1
    fi
    popd
done

if [ "@ENABLE_tk@" = "ON" ] ; then
    cd ${SRC_EXAMPLES_DIR}/tcl
    plserver <<EOF
plstdwin .
plxframe .plw
pack append . .plw {left expand fill}
source plgrid.tcl
proc 1 {} "plgrid .plw.plwin"
1
exit
EOF
    cd ${EXAMPLES_DIR}/tk
    pwd
# Drop 14 because multiple devices do not seem to work in this context.
# Drop 31 since it produces empty plot (by design).
    plserver <<EOF
source tkdemos.tcl
1
2
3
4
5
6
7
8
9
10
11
12
13
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
exit
EOF
fi
if [ "$OVERALL_STATUS_CODE" -ne 0 ] ; then
    echo "A major error occurred for one of the interactive examples"
else
    echo "All interactive tests completed without major errors"
fi
exit $OVERALL_STATUS_CODE
