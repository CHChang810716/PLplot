I'm reasonably confident the latest plplot works fine on the following
platforms: HPUX, Unicos, AIX 3.x, SunOS 4.x, Super-UX (NEC), Linux.  Other
systems (which we use less or don't spend much time on) are less well
supported.  If changes to the config files are required to compile it on
other platforms, please forward your fixes.

Maurice LeBrun
mjl@dino.ph.utexas.edu

Below are installation notes, system dependencies, gotchas, and anything
else worth remembering for Unix platforms.  More generic stuff in the
FAQ (I may move some of this stuff there eventually).

---------------------------------------------------------------------------
1. Building and installing PLPLOT.

From the top level directory, just type the following:

	cd tmp
	../configure

The makefile will then be built by running the file makefile.m4 through
the m4 macro processor with an appropriate value for the SYSTEM macro
(this is a bit different from how it was handled prior to 4.99d).  All of
the m4 scripts used in the build are located in the m4 directory; see the
README file there for details on their construction (normally you don't
need to know what's going on unless you need to change a config file).
The configure script automatically gets the system name right, using the
output of `uname`.  There are many other options you can give configure,
or you can specify these as environmental or shell variables if you like.
Type ../configure h for more information.

You must ensure that the appropriate system header files can be found by the
generated makefile.  This is occasionally a problem for X11 header files,
e.g. they might be in /usr/include/X11, /usr/include/X11R4/X11,
/usr/include/X11R5/X11, etc.  The cf_plplot.m4 file is for customizing
settings for your site; the default values will work for many systems.
If not, you should create a directory ~/config, copy cf_plplot.m4 to it,
and modify it accordingly.  The next time you use configure it will soft
link the copy in ~/config and use that.  This way you can set up site-
specific config files once and have the build always work flawlessly.

For example, if you wish to compile plplot without the Tcl/TK support, you
can comment out the define({TK}) in cf_plplot.m4.  This is the best way if
your site does not have Tcl/TK.  Another way to do the same thing is to
specify no_tk when running configure.  This is the best way if you are
building multiple libraries, with and without TK.

Then, while in the tmp directory

	% make

makes the main library (default precision, probably single on a
workstation), makes the renderer and the server (if the TK driver is
specified).  Finally, to make a demo,

	% make x01c

for the first C demo, or

	% make x01f

for the first Fortran demo.

The easiest way to install the library is to type "make install".  It
installs into directory /usr/local/plplot by default.  I've found it is
not difficult to get the system administrator to give you ownership of
such a directory on systems that you use.  At the sysadm's option,
softlinks can be made to /usr/local/lib, /usr/local/bin,
/usr/local/include, or whatever, leaving you free to install new plplot
versions as they become available.  It is a good idea to copy the file
README.local to the install directory and edit it accordingly for your
site (this is not done automatically).

The font files (located in the lib directory) will be put into
/usr/local/plplot by "make install", but there are actually several places
where PLPLOT looks for them.  The default search path is:

	current directory
	$(HOME)/lib
	INSTALL_DIR	(typically /usr/local/plplot)
	$(PLFONTS)
	PLFONTDEV1      (/usr/local/lib)
	PLFONTDEV2      (/usr/local/lib/plplot)
	PLFONTDEV3      (/usr/local/plplot)

You probably should also print & read the TeX documentation on the Unix
installation (NOTE: currently very out of date).

Finally, there are several shell scripts in the top level directory to
help you archive all the source files using 'zoo', 'tar', or 'zip'.

---------------------------------------------------------------------------
2. System specific notes

Gradually these will disappear, to reappear in the FAQ.  Look there
first if you have problems.

---
2.1 SunOS: be on the lookout for a non-ANSI libc.  Old versions of acc and
self-installed gcc's are vulnerable to this.  See the FAQ item 1.5 for a
description of the problem and how to deal with it.

I haven't tried building shared libraries for SunOS yet but hope to get
around to it one of these days.

---
2.2 HPUX: This is the platform I use every day; you should have no problems.
One nice thing is that shared libraries are particularly easy to build, and
the config file (cf_hp.m4) is set up to do that by default (except when gcc
is being used).

Here are the lines from my ~/config/cf_plplot.m4 used to locate the link
libraries:

LDC_PATH	= -L/usr/local/lib -L/usr/lib/X11R5
LDCX_PATH	= -L/usr/local/lib -L/usr/lib/X11R5
LDF_PATH	= -L/usr/local/lib -L/usr/lib/X11R5

If you are still running X11R4 or have your Tcl/TK libraries located
somewhere else (actually mine are in a separate directory under /usr/local
but there are softlinks to /usr/local/lib), these will need modification.

---
2.3 A/IX: The optimizer under 3.2.3 fails on the file "xwin.o" (it goes
into some kind of loop where it forever allocates memory, eventually
crapping out when you hit some limit).  I've hacked cf_depend.m4 to get
around it temporarily.  I tried building a shared library under AIX but
failed due to some missing externals, I think from X.  I think I need to
specify an import file of external symbols or some such, because of the X
library being shared.  If anyone has success doing this I'd be very
interested.

---
2.4 Super-UX (NEC): The optimizer creates bad code for sccont.c.  I've
hacked cf_depend.m4 to get around it temporarily.  I have had no luck
getting Tcl/TK to build on this machine (the 32 bit ints/longs, 64 bit
pointers causes headaches for a LOT of codes).


---------------------------------------------------------------------------
3. Using f2c to compile fortran stubs

There should be no problem using f2c with plplot now.  Make sure you link
with the f2c support lib.  On unix systems, f2c generally comes with an
"f77" script, which takes care of this transparently.

---------------------------------------------------------------------------
