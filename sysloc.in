# sysloc.in   --*-Autoconf-*--
#
# Maurice LeBrun
# IFS, University of Texas at Austin
# 14-Jul-1994
#
# This script sets up config variables for a Unix-like system.
# The stuff set here is fairly generic and can be automated.
# This includes how to find required header files and libraries.
# Includes code and ideas taken from the BLT (Tk extension) configure.
# ----------------------------------------------------------------------------

# Default linker library commands.  These may need version numbers
# appended to them though.

ITKLIBSTR=-litk
TKLIBSTR=-ltk
ITCLLIBSTR=-litcl
TCLLIBSTR=-ltcl
GDLIBSTR=-lgd
CDLIBSTR=-lcd
PNGLIBSTR=-lpng
JPEGLIBSTR=-ljpeg
ZLIBLIBSTR=-lz
FREETYPELIBSTR=-lfreetype
PTHREADLIBS=""
QHULLLIBS=""
NNLIBS=""
CSALIBS=""

# ----------------------------------------------------------------------------
# Attempt to find jni.h, if java support is enabled.
# ----------------------------------------------------------------------------

if test "$enable_java" = "yes"; then
    if test "$enable_shared" != "yes"; then
        AC_MSG_RESULT([warning: java support requires enable_shared=yes, setting enable_java=no])
        enable_java=no
    fi

fi

if test "$enable_java" = "yes"; then
    if test -n "$JAVA_HOME"; then
        if test -r "$JAVA_HOME/include/jni.h"; then
            JAVAINCDIR="$JAVA_HOME/include"
        fi
    else
        # Should make token effort to find jni.h anyway, presumably
        # employing AC_TRY_CPP.  Later...
        AC_MSG_RESULT( "Uhhh." )
    fi

    if test -n "$JAVAINCDIR"; then
        # See if machine dependent files exist in JAVAINCDIR (J2RE 1.3.0 IBM)
        if test -r "$JAVA_HOME/include/jni_md.h"; then
            JAVAMDINCDIR="$JAVA_HOME/include"
        else
        # Now we need to find the machine dependent directory.
            case $system in 
                Linux* )
                    JAVAMDINCDIR="$JAVAINCDIR/linux"
                ;;
                SunOS-5* )
                    JAVAMDINCDIR="$JAVAINCDIR/solaris"
                ;;
                * )         
                    AC_MSG_RESULT('Can\'t find Java machine dependent includes.')
                ;;
            esac
        fi
        if test ! -r "$JAVAMDINCDIR/jni_md.h"; then
            JAVAMDINCDIR="$JAVAINCDIR/genunix"
            if test ! -r "$JAVAMDINCDIR/jni_md.h"; then
                JAVAMDINCDIR=""
            fi
        fi

        if test -z "$JAVAMDINCDIR"; then
            AC_MSG_RESULT(Missing jni_md.h, disabling Java support.)
            enable_java=no
        fi

    else
        AC_MSG_RESULT(warning: Java Native Interface include file not found)
        enable_java=no
    fi
fi

# ----------------------------------------------------------------------------
# Find libgd libraries and headers and libpng, libjpeg, and zlib libraries
# required for building png and/or jpeg drivers.  
# Written by Alan W. Irwin following what is done for X.
# ----------------------------------------------------------------------------

if test "$enable_png" = "yes" -o "$enable_jpeg" = "yes"; then
    if test -z "$GDINCDIR"; then
        AC_TRY_CPP([#include <gd.h>], [ GDINCDIR=default ], [
        incdirs="\
        /usr/include \
        /usr/local/include"

        for dir in $incdirs; do
            if test -r "$dir/gd.h"; then
               GDINCDIR="$dir"
               break
            fi
        done
        if test -z "$GDINCDIR"; then
            AC_MSG_RESULT(warning: gd header files not found)
            GDINCDIR=default
            enable_png=no
            enable_jpeg=no
        fi ])
    fi
    if test "$GDINCDIR" = "/usr/include"; then
        GDINCDIR=default
    fi

    if test -z "$GDLIBDIR"; then
        AC_CHECK_LIB(gd, main, [ GDLIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libgd.so" -o -r "$dir/libgd.a"; then
                GDLIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$GDLIBDIR"; then
            AC_MSG_RESULT(warning: gd library not found)
            GDLIBDIR=default
            enable_png=no
            enable_jpeg=no
        fi ])
    fi
    if test "$GDLIBDIR" = "/usr/lib"; then
        GDLIBDIR=default
    fi
fi

if test "$enable_png" = "yes" -o "$enable_jpeg" = "yes"; then
    if test -z "$PNGLIBDIR"; then
        AC_CHECK_LIB(png, main, [ PNGLIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libpng.so" -o -r "$dir/libpng.a"; then
                PNGLIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$PNGLIBDIR"; then
            AC_MSG_RESULT(warning: png library not found)
            PNGLIBDIR=default
            enable_png=no
            enable_jpeg=no
        fi ])
    fi
    if test "$PNGLIBDIR" = "/usr/lib"; then
        PNGLIBDIR=default
    fi
fi

if test "$enable_png" = "yes" -o "$enable_jpeg" = "yes"; then
    if test -z "$JPEGLIBDIR"; then
        AC_CHECK_LIB(jpeg, main, [ JPEGLIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libjpeg.so" -o -r "$dir/libjpeg.a"; then
                JPEGLIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$JPEGLIBDIR"; then
            AC_MSG_RESULT(warning: jpeg library not found)
            JPEGLIBDIR=default
            enable_png=no
            enable_jpeg=no
        fi ])
    fi
    if test "$JPEGLIBDIR" = "/usr/lib"; then
        JPEGLIBDIR=default
    fi
fi

if test "$enable_png" = "yes" -o "$enable_jpeg" = "yes"; then
    if test -z "$ZLIBLIBDIR"; then
        AC_CHECK_LIB(z, main, [ ZLIBLIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libz.so" -o -r "$dir/libz.a"; then
                ZLIBLIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$ZLIBLIBDIR"; then
            AC_MSG_RESULT(warning: zlib library not found)
            ZLIBLIBDIR=default
            enable_png=no
            enable_jpeg=no
        fi ])
    fi
    if test "$ZLIBLIBDIR" = "/usr/lib"; then
        ZLIBLIBDIR=default
    fi
fi

#next test requires C language
AC_LANG_SAVE
AC_LANG_C

if test "$enable_png" = "yes" -o "$enable_jpeg" = "yes"; then
# All required headers and libraries are present for libgd, libpng, libjpeg,
# and zlib.  Now check if this version of libgd supports png and/or jpeg.

    CFLAGS_SAVE=$CFLAGS
    LIBS_SAVE=$LIBS
    LDFLAGS_SAVE=$LDFLAGS

    CFLAGS="-I$GDINCDIR"
    LIBS="-L$GDLIBDIR -L$PNGLIBDIR -L$JPEGLIBDIR -L$ZLIBLIBDIR $GDLIBSTR $PNGLIBSTR $JPEGLIBSTR $ZLIBLIBSTR"
    LDFLAGS=

# This test for png support is made in case this is an ancient libgd that
# only supported giff (e.g., the Redhat 6.2 version).
    AC_MSG_CHECKING(for png support in libgd)
    AC_TRY_LINK_FUNC([
      gdImagePng
    ], [AC_MSG_RESULT(yes)], [
      AC_MSG_RESULT(no: png driver disabled)
      enable_png=no
    ])

    AC_MSG_CHECKING(for jpeg support in libgd)
    AC_TRY_LINK_FUNC([
      gdImageJpeg
    ], [AC_MSG_RESULT(yes)], [
      AC_MSG_RESULT(no: jpeg driver disabled)
      enable_jpeg=no
    ])

    CFLAGS=$CFLAGS_SAVE
    LIBS=$LIBS_SAVE
    LDFLAGS=$LDFLAGS_SAVE

fi
#restore the language the way it was before this test
AC_LANG_RESTORE

# ----------------------------------------------------------------------------
# Find libcd library and header required for building cgm driver.  
# Written by Alan W. Irwin following what is done for gd driver.
# ----------------------------------------------------------------------------

if test "$enable_cgm" = "yes"; then
    if test -z "$CDINCDIR"; then
        AC_TRY_CPP([#include <cd.h>], [ CDINCDIR=default ], [
        incdirs="\
        /usr/include \
        /usr/local/include"

        for dir in $incdirs; do
            if test -r "$dir/cd.h"; then
               CDINCDIR="$dir"
               break
            fi
        done
        if test -z "$CDINCDIR"; then
            AC_MSG_RESULT(warning: cd header files not found)
            CDINCDIR=default
            enable_cgm=no
        fi ])
    fi
    if test "$CDINCDIR" = "/usr/include"; then
        CDINCDIR=default
    fi

    if test -z "$CDLIBDIR"; then
        AC_CHECK_LIB(cd, main, [ CDLIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libcd.so" -o -r "$dir/libcd.a"; then
                CDLIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$CDLIBDIR"; then
            AC_MSG_RESULT(warning: cd library not found)
            CDLIBDIR=default
            enable_cgm=no
        fi ])
    fi
    if test "$CDLIBDIR" = "/usr/lib"; then
        CDLIBDIR=default
    fi
fi

CDINCS=""
CDINCPATH=""
CDLIBS=""
CDLIBPATH=""
CDLIBS=""
CDINCS=""
if test "$enable_cgm" = "yes"; then
    ADD_TO_INCS($CDINCDIR, CDINCS, CDINCPATH)
    if test "$enable_dyndrivers" = "yes"; then
        ADD_TO_LIBS($CDLIBDIR, $CDLIBSTR, CDLIBS, CDLIBPATH)
    fi
fi

# ----------------------------------------------------------------------------
# Find freetype 2 library and header required for enabling 
# driver options for handling the fonts with the freetype library.
# Written by Alan W. Irwin.
# ----------------------------------------------------------------------------

if test "$with_freetype" = "yes"; then
    if test -z "$FREETYPEINCDIR"; then
        AC_TRY_CPP([#include <freetype/config/ftheader.h>], [ FREETYPEINCDIR=default ], [
        incdirs="\
        /usr/include/freetype2 \
        /usr/local/include/freetype2"

        for dir in $incdirs; do
            if test -r "$dir/freetype/config/ftheader.h"; then
               FREETYPEINCDIR="$dir"
               break
            fi
        done
        if test -z "$FREETYPEINCDIR"; then
            AC_MSG_RESULT(warning: freetype header files not found)
            FREETYPEINCDIR=default
            with_freetype=no
        fi ])
    fi
    if test "$FREETYPEINCDIR" = "/usr/include"; then
        FREETYPEINCDIR=default
    fi

    if test -z "$FREETYPELIBDIR"; then
        AC_CHECK_LIB(freetype, main, [ FREETYPELIBDIR=default ], [
        libdirs="\
        /usr/lib \
        /usr/local/lib"

        for dir in $libdirs; do
            if test -r "$dir/libfreetype.so" -o -r "$dir/libfreetype.a"; then
                FREETYPELIBDIR="$dir"
                AC_MSG_RESULT(but found in $dir)
                break
            fi
        done
        if test -z "$FREETYPELIBDIR"; then
            AC_MSG_RESULT(warning: freetype library not found)
            FREETYPELIBDIR=default
            with_freetype=no
        fi ])
    fi
    if test "$FREETYPELIBDIR" = "/usr/lib"; then
        FREETYPELIBDIR=default
    fi
fi

FREETYPEINCS=""
FREETYPEINCPATH=""
FREETYPELIBS=""
FREETYPELIBPATH=""
if test "$with_freetype" = "yes"; then
    ADD_TO_INCS($FREETYPEINCDIR, FREETYPEINCS, FREETYPEINCPATH)
    ADD_TO_LIBS($FREETYPELIBDIR, $FREETYPELIBSTR, FREETYPELIBS, FREETYPELIBPATH)
    AC_DEFINE(HAVE_FREETYPE, [], [Define if [freetype] is available])
    AC_SUBST(FREETYPELIBS)
    
fi

# ----------------------------------------------------------------------------
# Make some guesses where the Tcl/Tk include files and libraries are.
# Look first in the Tcl/Tk distributions and then move on to the standard
# include file/library locations.  If it's still not found I assume it's
# not here.
#
# Note: it is important to check in user directories _before_ checking
# anywhere else.  That way you can easily compile custom versions (of Tcl, Tk,
# etc), put them in your file space, and have them be found first.  Some
# examples: libraries compiled with debugging turned on, or from a different
# revision of the (Tcl, Tk, etc) package.  Also, when dealing with multiple
# versions, check for the newer version first.
# ----------------------------------------------------------------------------

# Default directories to search for include files

# Linux has a peculiar ambiguity where identical tcl.h files are found both in
# /usr/include and /usr/include/tcl<version>/generic.  The latter is
# *much* preferred because it has everything else as well having to do with tcl.
# So the generic include site is first on the list.  Note that prefix can be
# "/usr" which would give bad result under Linux without this ordering.

incdirs_default="\
/usr/include/tcl8.3/tcl-private/generic \
/usr/include/tcl8.3/tk-private/generic \
/usr/include/tcl8.3/itcl-private/generic \
/usr/include/tcl8.3 \
/usr/include/tcl8.2/generic \
$prefix/include/itcl \
/usr/include/itcl3.1/generic/ \
$prefix/include \
$HOME/local/include \
$HOME/include \
/usr/local/include \
/usr/include/tcl \
/usr/include"

# Default directories to search for library files

libdirs_default="\
$prefix/lib/itcl \
$prefix/lib \
$HOME/local/lib \
$HOME/lib \
/usr/local/lib \
/usr/lib"

incdirs=$incdirs_default
libdirs=$libdirs_default

if test -n "$with_pkgdir"; then
    incdirs="$with_pkgdir/include $incdirs"
    libdirs="$with_pkgdir/lib $libdirs"
fi

# ----------------------------------------------------------------------------
# tcl.h
# ----------------------------------------------------------------------------

if test "$enable_tcl" = "yes"; then
    if test -z "$TCLINCDIR"; then
        FIND_INC(tcl, TCLINCDIR, enable_tcl)
    fi
fi

# ----------------------------------------------------------------------------
# libtcl
#
# Includes checks against old versions of tcl no longer supported.
# But you can *try* linking against ANY non-versioned tcl.
# ----------------------------------------------------------------------------

if test "$enable_tcl" = "yes"; then
    if test -z "$TCLLIBDIR"; then
        FIND_LIB_BEGIN(tcl, TCLLIBDIR)
        for version in 8.4 8.3 8.2 8.1 8.0 ""; do
            FIND_LIB_SET(tcl$version, TCLLIBDIR, TCLLIBSTR)
            if test -n "$TCLLIBDIR"; then
                break
            fi
        done
        if test -n "$version"; then
            for oldversion in 8.1 8.0; do
                if test "$version" = "$oldversion"; then
                    echo "Tcl version $oldversion not supported.. please upgrade!"
                    enable_tcl="no"
# See comment below
#                    has_tcl="no"
                    break
                fi
            done
        fi
        FIND_LIB_END(tcl, TCLLIBDIR, enable_tcl)
    fi
    if test "$enable_tcl" = "yes"; then
        if test -r $TCLLIBDIR/tclConfig.sh; then
            . $TCLLIBDIR/tclConfig.sh
        fi
    fi
fi
# AWI does not understand the purpose of a distinction between has_tcl and 
# enable_tcl so make them the same for now.
has_tcl=$enable_tcl

# ----------------------------------------------------------------------------
# itcl.h
# ----------------------------------------------------------------------------

if test "$enable_tcl" = "no"; then
    enable_itcl=no
fi

if test "$enable_itcl" = "yes"; then
    if test -z "$ITCLINCDIR"; then
        FIND_INC(itcl, ITCLINCDIR, enable_itcl)
    fi
fi

# There should be an itclDecls.h with the other itcl includes.
# This is missing on some distributions, so define HAVE_ITCLDECLS_H if found.

if test "$enable_itcl" = "yes"; then
    old_CPPFLAGS=$CPPFLAGS 
    CPPFLAGS=-I$ITCLINCDIR 
    AC_CHECK_HEADER(itclDecls.h) 
    CPPFLAGS=$old_CPPFLAGS 
fi

# ----------------------------------------------------------------------------
# libitcl ([incr Tcl])
# ----------------------------------------------------------------------------

if test "$enable_itcl" = "yes"; then
    if test -z "$ITCLLIBDIR"; then
        FIND_LIB_BEGIN(itcl, ITCLLIBDIR)
        for version in 3.3 3.2 3.1 3.0 2.1 2.0 ""; do
            if test -n "$ITCLLIBDIR"; then
                break
            fi
            FIND_LIB_SET(itcl$version, ITCLLIBDIR, ITCLLIBSTR)
        done
        FIND_LIB_END(itcl, ITCLLIBDIR, enable_itcl)
    fi
    if test "$enable_itcl" = "yes"; then
        if test -r $ITCLLIBDIR/itclConfig.sh; then
            . $ITCLLIBDIR/itclConfig.sh
        fi
    fi
fi

# ----------------------------------------------------------------------------
# figure out how to build tclIndex
# ----------------------------------------------------------------------------

if test "$enable_tcl" = "yes"; then
    if test "$enable_itcl" = "yes"; then
        MKINDEX="$srcdir/scripts/mktclIndex -itcl"
    else
        MKINDEX="$srcdir/scripts/mktclIndex -tcl"
    fi
else
# shouldn't ever be used
    MKINDEX=echo
fi

AC_SUBST(MKINDEX)

# ----------------------------------------------------------------------------
# tk.h
# ----------------------------------------------------------------------------

if test "$has_tcl" = "no" -o "$have_x" != "yes"; then
    has_tk=no
    enable_tk=no
fi

if test "$enable_tk" = "yes"; then
    if test -z "$TKINCDIR"; then
        FIND_INC(tk, TKINCDIR, enable_tk)
    fi
fi

# ----------------------------------------------------------------------------
# tkInt.h (and indirectly tclInt.h) required by plplotter.c which is 
# required by tkwin device
# ----------------------------------------------------------------------------

if test "$has_tcl" = "no" -o "$have_x" != "yes"; then
    enable_tkwin=no
fi

if test "$enable_tkwin" = "yes"; then
    if test -z "$TKPRIVATEINCDIR"; then
        FIND_INC(tkInt, TKPRIVATEINCDIR, enable_tkwin)
    fi
fi

if test "$enable_tkwin" = "yes"; then
    if test -z "$TCLPRIVATEINCDIR"; then
        FIND_INC(tclInt, TCLPRIVATEINCDIR, enable_tkwin)
    fi
fi

# ----------------------------------------------------------------------------
# libtk
# ----------------------------------------------------------------------------

if test "$enable_tk" = "yes"; then
    if test -z "$TKLIBDIR"; then
        FIND_LIB_BEGIN(tk, TKLIBDIR)
        for version in 8.4 8.3 8.2 8.1 8.0 4.2i 4.1i 4.2 4.1 4.0 ""; do
            if test -n "$TKLIBDIR"; then
                break
            fi
            FIND_LIB_SET(tk$version, TKLIBDIR, TKLIBSTR)
        done
        FIND_LIB_END(tk, TKLIBDIR, enable_tk)
    fi
fi

# ----------------------------------------------------------------------------
# libitk
# ----------------------------------------------------------------------------

enable_itk="yes"
if test "$enable_tk" = "no" -o "$enable_itcl" = "no"; then
    enable_itk="no"
fi

if test "$enable_itk" = "yes"; then
    if test -z "$ITKLIBDIR"; then
        FIND_LIB_BEGIN(itk, ITKLIBDIR)
        for version in 3.3 3.2 3.1 3.0 2.1 2.0 ""; do
            if test -n "$ITKLIBDIR"; then
                break
            fi
            FIND_LIB_SET(itk$version, ITKLIBDIR, ITKLIBSTR)
        done
        FIND_LIB_END(itk, ITKLIBDIR, enable_itk)
    fi
fi

if test "$enable_itcl" = "yes"; then
    AC_DEFINE(HAVE_ITCL, [], [Define if [incr Tcl] is available])
fi

if test "$enable_itk" = "yes"; then
    AC_DEFINE(HAVE_ITK, [], [Define if [incr Tk] is available])
fi

#-----------------------------------------------------------------------------
# ntk driver
#-----------------------------------------------------------------------------
if test "$enable_tk" = "no" -o "$enable_tcl" = "no"; then
    enable_ntk="no"
fi

#-----------------------------------------------------------------------------
# xwin driver
#-----------------------------------------------------------------------------
if test "$have_x" != "yes"; then
    enable_xwin="no"
fi

# ----------------------------------------------------------------------------
# Gnome/GTK configuration tests
# Added by Rafael Laboissier on Fri Feb 23 21:34:40 CET 2001
# ----------------------------------------------------------------------------

if test "$enable_gnome" = "yes"; then

  AC_LANG_SAVE
  AC_LANG_C
  AM_PATH_GTK(1.2.7,
    [ GNOME_INIT
      if test "$GNOME_CONFIG" = "no"; then
        enable_gnome=no 
      fi ], 
    [ enable_gnome=no ], 
    gthread)

  if test "$enable_gnome" = "yes"; then

    # Include Gtk and Gnome libs
    GNOMELIBS=""
    GNOMEPATH=""
    for i in $GTK_LIBS $GNOME_LIBDIR $GNOMEUI_LIBS ; do
        case $i in 
        -L* )
            d=`echo $i | sed 's/-L//'`
            ADD_TO_LIBS( $d, "", GNOMELIBS, GNOMEPATH)
        ;;
        -l* )
            ADD_TO_LIBS( default, $i, GNOMELIBS, GNOMEPATH)
        ;;
        *)
        ;;
        esac
    done

    # Include Gtk and Gnome include dirs
    GNOME_FLAGS=""
    for i in $GTK_CFLAGS $GNOME_INCLUDEDIR ; do
        case $i in 
        -I* )
            ;;
        -D* )
            GNOME_FLAGS="$GNOME_FLAGS $i"
            ;;
         *)
            ;;
        esac
    done
    AC_LANG_RESTORE
  fi
fi 

# ----------------------------------------------------------------------------
# Octave support
# ----------------------------------------------------------------------------

if test "$enable_octave" = "yes"; then

# Check that plplot was built with shared libs
    if test "$enable_shared" != "yes"; then
        AC_MSG_WARN([Octave support requires enable_shared=yes, setting enable_octave=no.]);
        enable_octave=no;
    fi

# check for matwrap
    if test "$enable_octave" = "yes"; then
        MATWRAP=matwrap
        AC_CHECK_PROG(has_matwrap, matwrap, yes, no)
        if test "$has_matwrap" = "no"; then
            MATWRAP=`pwd`"/bindings/octave/matwrap/matwrap"
            AC_MSG_WARN([Using builtin matwrap.]);
        fi
    fi

# check for user supplied mkoctfile
    if test "$enable_octave" = "yes"; then
        AC_ARG_WITH(mkoctfile, [  --with-mkoctfile=file   Specify mkoctfile], MKOCTFILE="$withval", MKOCTFILE="mkoctfile")
        MKOCTFILE=`basename $MKOCTFILE`
        AC_CHECK_PROG(has_mkoctfile, $MKOCTFILE, yes, no)
        if test "$has_mkoctfile" = "no"; then
            AC_MSG_WARN([$MKOCTFILE not found, disabling Octave support.]);
            enable_octave=no;
        fi
    fi

# check for user supplied Octave
    if test "$enable_octave" = "yes"; then
        AC_ARG_WITH(octavex, [  --with-octavex=file      Specify Octave], OCTAVE="$withval", OCTAVE="octave")
        OCTAVE=`basename $OCTAVE`
        AC_CHECK_PROG(has_octave, $OCTAVE, yes, no)
        if test "$has_octave" = "no"; then
            AC_MSG_WARN([$OCTAVE not found, disabling Octave support.]);
            enable_octave=no;
        fi
    fi

AC_DEFUN(OCTAVE_CONFIG_INFO, [dnl
`$OCTAVE -q -f 2>&1 <<EOF
        t = octave_config_info;
        printf("%s", t.$1);
EOF`])


# Set Octave installation directories
    if test "$enable_octave" = "yes"; then

        # Get Octave version
        OCTAVE_VERSION=`$OCTAVE --version | sed 's/^.*version // ; q'`

	# This is the directory for installation of the PLplot_Octave
        # specific m files
        PLPLOT_OCTAVE_DIR=${prefix}/share/plplot_octave

	# Get Configuration default values for Octave
        OCTAVE_PREFIX=OCTAVE_CONFIG_INFO(prefix)
	if test -n "`echo $OCTAVE_VERSION | sed 's/^2.1//p ; d ; q'`" ; then 
            # Octave version 2.1 
            OCTAVE_OCT_DIR=OCTAVE_CONFIG_INFO(localoctfiledir)
            OCTAVE_M_DIR=OCTAVE_CONFIG_INFO(localfcnfiledir)
        else 
            # Octave version 2.0
            OCTAVE_OCT_DIR=OCTAVE_CONFIG_INFO(localoctfilepath)
            [OCTAVE_OCT_DIR=`echo $OCTAVE_OCT_DIR | sed 's/[^:]*://g;s://$::'`]
            OCTAVE_M_DIR=OCTAVE_CONFIG_INFO(localfcnfilepath)
            [OCTAVE_M_DIR=`echo $OCTAVE_M_DIR | sed 's/[^:]*://g;s://$::'`]
        fi

	# Strip Octave default prefix and prepend the configuration prefix 
        # currently specified
	OCTAVE_OCT_DIR=${prefix}/`echo $OCTAVE_OCT_DIR \
                                  | sed "s:$OCTAVE_PREFIX/*::"`
	OCTAVE_M_DIR=${prefix}/`echo $OCTAVE_M_DIR \
                                | sed "s:$OCTAVE_PREFIX/*::"`

    fi

    AC_SUBST(MATWRAP)
    AC_SUBST(MKOCTFILE)
    AC_SUBST(OCTAVE_VERSION)
    AC_SUBST(OCTAVE_OCT_DIR)
    AC_SUBST(OCTAVE_M_DIR)
    AC_SUBST(PLPLOT_OCTAVE_DIR)

fi

# -----------------------------------------------------------------------
# Python include and machdep directories
# -----------------------------------------------------------------------

if test "$enable_python" = "yes"; then
    if test "$enable_shared" != "yes"; then
        AC_MSG_RESULT([warning: python support requires enable_shared=yes, setting enable_python=no])
        enable_python=no
    fi
fi

if test "$enable_python" = "yes"; then
    if test -z "$PYTHON_INC_DIR" -o ! -d "$PYTHON_INC_DIR"; then
        incdirs="\
        $prefix/include/python2.2 \
        /usr/include/python2.2 \
        $prefix/include/python2.1 \
        /usr/include/python2.1 \
        $prefix/include/python2.0 \
        /usr/include/python2.0 \
        $prefix/include/python1.5 \
        /usr/include/python1.5"

        FIND_INC(Python, PYTHON_INC_DIR, enable_python)
    fi

# This needs to be a separate test in case PYTHON_INC_DIR is specified by the
# user, to pick up a particular version.  Numeric should be either in the same
# or a subdir of PYTHON_INC_DIR else version mismatch could occur.

    if test "$enable_python" = "yes"; then
        incdirs="\ 
        $PYTHON_INC_DIR \ 
        $PYTHON_INC_DIR/Numeric"
        FIND_INC(arrayobject, PYTHON_NUM_DIR, numeric_python)
        if test "$numeric_python" = "no"; then
            AC_MSG_RESULT([plplot module needs Python numeric extension.])
            AC_MSG_RESULT([Setting enable_python to no])
            enable_python=no
        fi
    fi
fi

AC_SUBST(PYTHON_INC_DIR)
AC_SUBST(PYTHON_NUM_DIR)


# ----------------------------------------------------------------------------
# swig support
# ----------------------------------------------------------------------------

# swig only used by python and java so far....
if test "$enable_python" = "yes" -o "$enable_java" = "yes"; then
    AC_CHECK_PROGS(SWIG, swig)
    SWIG_VERSION=`$SWIG  -version 2>&1 \
    | sed 's/^SWIG Version // ; t END ; d ; : END q'`
    SWIG_VERSION_MAJOR=`echo $SWIG_VERSION \
    | sed 's/\..*//'`
    [SWIG_VERSION_MINOR=`echo $SWIG_VERSION \
    | sed 's/[0-9]*\.// ; s/\..*//'`]
    [SWIG_VERSION_MICRO=`echo $SWIG_VERSION \
    | sed 's/[0-9]*\.[0-9]*\.//;s/[^0-9].*//'`]
    #echo Swig major version: $SWIG_VERSION_MAJOR
    #echo Swig minor version: $SWIG_VERSION_MINOR
    #echo Swig micro version: $SWIG_VERSION_MICRO
    # Must have swig version 1.3.17 (or later micro number for 1.3.x)
    if test -z "$SWIG" \
    -o "$SWIG_VERSION_MAJOR" != "1" \
    -o "$SWIG_VERSION_MINOR" != "3" \
    -o $(($SWIG_VERSION_MICRO < 17)) = 1 ; then
        # That sharp character '#' at the end is important
	SWIG="-@echo swig program not available #"
        AC_MSG_WARN([Must have swig version 1.3.17 or later 1.3.x])
        AC_MSG_WARN([for proper development of java and python bindings])
   fi
fi
# ----------------------------------------------------------------------------
# linuxvga support
# ----------------------------------------------------------------------------

if test "$enable_linuxvga" = "yes"; then
    if test -z "$VGALIBDIR"; then
        libdirs="\
        $prefix/lib \
        /usr/lib"

        FIND_LIB(vga, VGALIBDIR, VGALIBSTR, enable_linuxvga)        
    fi
    if test -n "$VGALIBDIR"; then
        LINUXVGALIBS=""
        LINUXVGAPATH=""
        ADD_TO_LIBS($VGALIBDIR, -lvga, LINUXVGALIBS, LINUXVGAPATH)        
    fi
fi

# ----------------------------------------------------------------------------
# Check for pthreads 
# ----------------------------------------------------------------------------

if test "$with_pthreads" = "yes" -a "$enable_xwin" = "yes"; then
    AC_CHECK_LIB(pthread, pthread_create, [
        AC_DEFINE(HAVE_PTHREAD, [], [Define if pthreads is available])
        PTHREADLIBS="-lpthread" ], [ with_pthreads="no"])
fi

# ----------------------------------------------------------------------------
# Check for csa
# ----------------------------------------------------------------------------

if test "$with_csa" = "yes"; then
#make test on simple NaN operations (nan+1. e.g.)
	AC_DEFINE(WITH_CSA, [], [Define if csa is desired])
	CSALIBS='$(top_builddir)/lib/csa/libcsa.la'
fi

# ----------------------------------------------------------------------------
# Check for QHull
# ----------------------------------------------------------------------------

if test "$with_qhull" = "yes"; then
# if the above csa test fails, don't use Qhull, as nn can't be used!
    AC_CHECK_LIB(qhull, qh_new_qhull, [ 
        AC_DEFINE(HAVE_QHULL, [], [Define if Qhull is available])
        QHULLLIBS="-lqhull"
        NNLIBS='$(top_builddir)/lib/nn/libnn.la' ], [ with_qhull="no" ])
fi

# ----------------------------------------------------------------------------
# CFLAGS to use ieee because of NaN issues in libnn and libcsa
# ----------------------------------------------------------------------------

if test "$with_qhull" = "yes" -o "$with_csa" = "yes"; then
    case "$host_cpu" in
	i*86 )
            CFLAGS="$CFLAGS -mieee-fp"
	;;
	alpha* )
            if test "$GCC" = yes; then
                CFLAGS="$CFLAGS -mieee"
            else
                CFLAGS="$CFLAGS -ieee"
            fi
	;;
    esac

fi

# ----------------------------------------------------------------------------
# Now do the variable substitutions.
# ----------------------------------------------------------------------------

AC_SUBST(ARLIB_BUILD)
AC_SUBST(ARLIB_BUILD_CXX)
AC_SUBST(SHLIB_BUILD)
AC_SUBST(SHLIB_BUILD_CXX)
AC_SUBST(SONAME_FLAGS)
AC_SUBST(SA)
AC_SUBST(SO)
AC_SUBST(LDSHARED)

AC_SUBST(SHLIB_CCFLAGS)
AC_SUBST(SHLIB_CXXFLAGS)
AC_SUBST(SHLIB_F77FLAGS)
AC_SUBST(SHLIB_LIBS)

# Substitutions for the dynamic drivers.
# if enable-dynamic-drivers is enabled, those libs don't go to "LIBS"
#
# CDLIBS has all libs needed from the gd driver, and
# GNOMELIBS all libs needed by the gnome driver.

AC_SUBST(LINUXVGALIBS)
AC_SUBST(GNOMELIBS)
AC_SUBST(CDLIBS)
AC_SUBST(PTHREADLIBS)
AC_SUBST(QHULLLIBS)
AC_SUBST(NNLIBS)
AC_SUBST(CSALIBS)